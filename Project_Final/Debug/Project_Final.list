
Project_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b418  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800b5d8  0800b5d8  0000c5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be68  0800be68  0000d294  2**0
                  CONTENTS
  4 .ARM          00000008  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be70  0800be70  0000d294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be70  0800be70  0000ce70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be74  0800be74  0000ce74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000294  20000000  0800be78  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014a0  20000294  0800c10c  0000d294  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001734  0800c10c  0000d734  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d294  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a673  00000000  00000000  0000d2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052e7  00000000  00000000  00037937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b08  00000000  00000000  0003cc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016dd  00000000  00000000  0003e728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ffad  00000000  00000000  0003fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e3de  00000000  00000000  0006fdb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011d8ef  00000000  00000000  0009e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bba7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061a0  00000000  00000000  001bbac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00013e8b  00000000  00000000  001c1c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  001d5aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000294 	.word	0x20000294
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b5c0 	.word	0x0800b5c0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000298 	.word	0x20000298
 80001fc:	0800b5c0 	.word	0x0800b5c0

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9a0 	b.w	8001010 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	460c      	mov	r4, r1
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d14e      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d60:	4694      	mov	ip, r2
 8000d62:	458c      	cmp	ip, r1
 8000d64:	4686      	mov	lr, r0
 8000d66:	fab2 f282 	clz	r2, r2
 8000d6a:	d962      	bls.n	8000e32 <__udivmoddi4+0xde>
 8000d6c:	b14a      	cbz	r2, 8000d82 <__udivmoddi4+0x2e>
 8000d6e:	f1c2 0320 	rsb	r3, r2, #32
 8000d72:	4091      	lsls	r1, r2
 8000d74:	fa20 f303 	lsr.w	r3, r0, r3
 8000d78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7c:	4319      	orrs	r1, r3
 8000d7e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f f68c 	uxth.w	r6, ip
 8000d8a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d8e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d92:	fb07 1114 	mls	r1, r7, r4, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb04 f106 	mul.w	r1, r4, r6
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000daa:	f080 8112 	bcs.w	8000fd2 <__udivmoddi4+0x27e>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 810f 	bls.w	8000fd2 <__udivmoddi4+0x27e>
 8000db4:	3c02      	subs	r4, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a59      	subs	r1, r3, r1
 8000dba:	fa1f f38e 	uxth.w	r3, lr
 8000dbe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dca:	fb00 f606 	mul.w	r6, r0, r6
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	d90a      	bls.n	8000de8 <__udivmoddi4+0x94>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dda:	f080 80fc 	bcs.w	8000fd6 <__udivmoddi4+0x282>
 8000dde:	429e      	cmp	r6, r3
 8000de0:	f240 80f9 	bls.w	8000fd6 <__udivmoddi4+0x282>
 8000de4:	4463      	add	r3, ip
 8000de6:	3802      	subs	r0, #2
 8000de8:	1b9b      	subs	r3, r3, r6
 8000dea:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dee:	2100      	movs	r1, #0
 8000df0:	b11d      	cbz	r5, 8000dfa <__udivmoddi4+0xa6>
 8000df2:	40d3      	lsrs	r3, r2
 8000df4:	2200      	movs	r2, #0
 8000df6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d905      	bls.n	8000e0e <__udivmoddi4+0xba>
 8000e02:	b10d      	cbz	r5, 8000e08 <__udivmoddi4+0xb4>
 8000e04:	e9c5 0100 	strd	r0, r1, [r5]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e7f5      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e0e:	fab3 f183 	clz	r1, r3
 8000e12:	2900      	cmp	r1, #0
 8000e14:	d146      	bne.n	8000ea4 <__udivmoddi4+0x150>
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	d302      	bcc.n	8000e20 <__udivmoddi4+0xcc>
 8000e1a:	4290      	cmp	r0, r2
 8000e1c:	f0c0 80f0 	bcc.w	8001000 <__udivmoddi4+0x2ac>
 8000e20:	1a86      	subs	r6, r0, r2
 8000e22:	eb64 0303 	sbc.w	r3, r4, r3
 8000e26:	2001      	movs	r0, #1
 8000e28:	2d00      	cmp	r5, #0
 8000e2a:	d0e6      	beq.n	8000dfa <__udivmoddi4+0xa6>
 8000e2c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e30:	e7e3      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000e32:	2a00      	cmp	r2, #0
 8000e34:	f040 8090 	bne.w	8000f58 <__udivmoddi4+0x204>
 8000e38:	eba1 040c 	sub.w	r4, r1, ip
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa1f f78c 	uxth.w	r7, ip
 8000e44:	2101      	movs	r1, #1
 8000e46:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e4e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb07 f006 	mul.w	r0, r7, r6
 8000e5a:	4298      	cmp	r0, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x11c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x11a>
 8000e68:	4298      	cmp	r0, r3
 8000e6a:	f200 80cd 	bhi.w	8001008 <__udivmoddi4+0x2b4>
 8000e6e:	4626      	mov	r6, r4
 8000e70:	1a1c      	subs	r4, r3, r0
 8000e72:	fa1f f38e 	uxth.w	r3, lr
 8000e76:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e7a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e82:	fb00 f707 	mul.w	r7, r0, r7
 8000e86:	429f      	cmp	r7, r3
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x148>
 8000e8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e8e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x146>
 8000e94:	429f      	cmp	r7, r3
 8000e96:	f200 80b0 	bhi.w	8000ffa <__udivmoddi4+0x2a6>
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	1bdb      	subs	r3, r3, r7
 8000e9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ea2:	e7a5      	b.n	8000df0 <__udivmoddi4+0x9c>
 8000ea4:	f1c1 0620 	rsb	r6, r1, #32
 8000ea8:	408b      	lsls	r3, r1
 8000eaa:	fa22 f706 	lsr.w	r7, r2, r6
 8000eae:	431f      	orrs	r7, r3
 8000eb0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000eb4:	fa04 f301 	lsl.w	r3, r4, r1
 8000eb8:	ea43 030c 	orr.w	r3, r3, ip
 8000ebc:	40f4      	lsrs	r4, r6
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	0c38      	lsrs	r0, r7, #16
 8000ec4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ec8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ecc:	fa1f fc87 	uxth.w	ip, r7
 8000ed0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ed4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed8:	fb0e f90c 	mul.w	r9, lr, ip
 8000edc:	45a1      	cmp	r9, r4
 8000ede:	fa02 f201 	lsl.w	r2, r2, r1
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x1a6>
 8000ee4:	193c      	adds	r4, r7, r4
 8000ee6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eea:	f080 8084 	bcs.w	8000ff6 <__udivmoddi4+0x2a2>
 8000eee:	45a1      	cmp	r9, r4
 8000ef0:	f240 8081 	bls.w	8000ff6 <__udivmoddi4+0x2a2>
 8000ef4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	eba4 0409 	sub.w	r4, r4, r9
 8000efe:	fa1f f983 	uxth.w	r9, r3
 8000f02:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f06:	fb00 4413 	mls	r4, r0, r3, r4
 8000f0a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f0e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f12:	45a4      	cmp	ip, r4
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x1d2>
 8000f16:	193c      	adds	r4, r7, r4
 8000f18:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f1c:	d267      	bcs.n	8000fee <__udivmoddi4+0x29a>
 8000f1e:	45a4      	cmp	ip, r4
 8000f20:	d965      	bls.n	8000fee <__udivmoddi4+0x29a>
 8000f22:	3b02      	subs	r3, #2
 8000f24:	443c      	add	r4, r7
 8000f26:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f2a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f2e:	eba4 040c 	sub.w	r4, r4, ip
 8000f32:	429c      	cmp	r4, r3
 8000f34:	46ce      	mov	lr, r9
 8000f36:	469c      	mov	ip, r3
 8000f38:	d351      	bcc.n	8000fde <__udivmoddi4+0x28a>
 8000f3a:	d04e      	beq.n	8000fda <__udivmoddi4+0x286>
 8000f3c:	b155      	cbz	r5, 8000f54 <__udivmoddi4+0x200>
 8000f3e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f42:	eb64 040c 	sbc.w	r4, r4, ip
 8000f46:	fa04 f606 	lsl.w	r6, r4, r6
 8000f4a:	40cb      	lsrs	r3, r1
 8000f4c:	431e      	orrs	r6, r3
 8000f4e:	40cc      	lsrs	r4, r1
 8000f50:	e9c5 6400 	strd	r6, r4, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	e750      	b.n	8000dfa <__udivmoddi4+0xa6>
 8000f58:	f1c2 0320 	rsb	r3, r2, #32
 8000f5c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f60:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f64:	fa24 f303 	lsr.w	r3, r4, r3
 8000f68:	4094      	lsls	r4, r2
 8000f6a:	430c      	orrs	r4, r1
 8000f6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f70:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f74:	fa1f f78c 	uxth.w	r7, ip
 8000f78:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f7c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f86:	fb00 f107 	mul.w	r1, r0, r7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d908      	bls.n	8000fa0 <__udivmoddi4+0x24c>
 8000f8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f92:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f96:	d22c      	bcs.n	8000ff2 <__udivmoddi4+0x29e>
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d92a      	bls.n	8000ff2 <__udivmoddi4+0x29e>
 8000f9c:	3802      	subs	r0, #2
 8000f9e:	4463      	add	r3, ip
 8000fa0:	1a5b      	subs	r3, r3, r1
 8000fa2:	b2a4      	uxth	r4, r4
 8000fa4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fa8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fb0:	fb01 f307 	mul.w	r3, r1, r7
 8000fb4:	42a3      	cmp	r3, r4
 8000fb6:	d908      	bls.n	8000fca <__udivmoddi4+0x276>
 8000fb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fbc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fc0:	d213      	bcs.n	8000fea <__udivmoddi4+0x296>
 8000fc2:	42a3      	cmp	r3, r4
 8000fc4:	d911      	bls.n	8000fea <__udivmoddi4+0x296>
 8000fc6:	3902      	subs	r1, #2
 8000fc8:	4464      	add	r4, ip
 8000fca:	1ae4      	subs	r4, r4, r3
 8000fcc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fd0:	e739      	b.n	8000e46 <__udivmoddi4+0xf2>
 8000fd2:	4604      	mov	r4, r0
 8000fd4:	e6f0      	b.n	8000db8 <__udivmoddi4+0x64>
 8000fd6:	4608      	mov	r0, r1
 8000fd8:	e706      	b.n	8000de8 <__udivmoddi4+0x94>
 8000fda:	45c8      	cmp	r8, r9
 8000fdc:	d2ae      	bcs.n	8000f3c <__udivmoddi4+0x1e8>
 8000fde:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fe2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fe6:	3801      	subs	r0, #1
 8000fe8:	e7a8      	b.n	8000f3c <__udivmoddi4+0x1e8>
 8000fea:	4631      	mov	r1, r6
 8000fec:	e7ed      	b.n	8000fca <__udivmoddi4+0x276>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	e799      	b.n	8000f26 <__udivmoddi4+0x1d2>
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	e7d4      	b.n	8000fa0 <__udivmoddi4+0x24c>
 8000ff6:	46d6      	mov	lr, sl
 8000ff8:	e77f      	b.n	8000efa <__udivmoddi4+0x1a6>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	3802      	subs	r0, #2
 8000ffe:	e74d      	b.n	8000e9c <__udivmoddi4+0x148>
 8001000:	4606      	mov	r6, r0
 8001002:	4623      	mov	r3, r4
 8001004:	4608      	mov	r0, r1
 8001006:	e70f      	b.n	8000e28 <__udivmoddi4+0xd4>
 8001008:	3e02      	subs	r6, #2
 800100a:	4463      	add	r3, ip
 800100c:	e730      	b.n	8000e70 <__udivmoddi4+0x11c>
 800100e:	bf00      	nop

08001010 <__aeabi_idiv0>:
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop

08001014 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001014:	4b03      	ldr	r3, [pc, #12]	@ (8001024 <vApplicationGetIdleTaskMemory+0x10>)
 8001016:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001018:	4b03      	ldr	r3, [pc, #12]	@ (8001028 <vApplicationGetIdleTaskMemory+0x14>)
 800101a:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	200004b0 	.word	0x200004b0
 8001028:	200002b0 	.word	0x200002b0

0800102c <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void const * argument)
{
 800102c:	b580      	push	{r7, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
    button_status = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 800102e:	4e0f      	ldr	r6, [pc, #60]	@ (800106c <StartButtonTask+0x40>)
 8001030:	4d0f      	ldr	r5, [pc, #60]	@ (8001070 <StartButtonTask+0x44>)
    if (button_status ==0) {
		if (button_status ==0){
			if (sensor_number ==0){
 8001032:	4f10      	ldr	r7, [pc, #64]	@ (8001074 <StartButtonTask+0x48>)
 8001034:	e001      	b.n	800103a <StartButtonTask+0xe>
 8001036:	2301      	movs	r3, #1
				sensor_number =2;
			}
			else if (sensor_number == 2) {
				sensor_number = 3;
			} else {
				sensor_number =0;
 8001038:	603b      	str	r3, [r7, #0]
    osDelay(100);
 800103a:	2464      	movs	r4, #100	@ 0x64
 800103c:	4620      	mov	r0, r4
 800103e:	f003 ff46 	bl	8004ece <osDelay>
    button_status = HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin);
 8001042:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001046:	4630      	mov	r0, r6
 8001048:	f001 fac2 	bl	80025d0 <HAL_GPIO_ReadPin>
 800104c:	7028      	strb	r0, [r5, #0]
    if (button_status ==0) {
 800104e:	2800      	cmp	r0, #0
 8001050:	d1f4      	bne.n	800103c <StartButtonTask+0x10>
			if (sensor_number ==0){
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0ee      	beq.n	8001036 <StartButtonTask+0xa>
			else if ( sensor_number ==1 ){
 8001058:	2b01      	cmp	r3, #1
 800105a:	d004      	beq.n	8001066 <StartButtonTask+0x3a>
			else if (sensor_number == 2) {
 800105c:	2b02      	cmp	r3, #2
 800105e:	bf0c      	ite	eq
 8001060:	2303      	moveq	r3, #3
 8001062:	2300      	movne	r3, #0
 8001064:	e7e8      	b.n	8001038 <StartButtonTask+0xc>
 8001066:	2302      	movs	r3, #2
 8001068:	e7e6      	b.n	8001038 <StartButtonTask+0xc>
 800106a:	bf00      	nop
 800106c:	48000800 	.word	0x48000800
 8001070:	20000730 	.word	0x20000730
 8001074:	2000072c 	.word	0x2000072c

08001078 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800107c:	ed2d 8b02 	vpush	{d8}
    int16_t ay = xyz_accel[1];
    int16_t az = xyz_accel[2];

    float32_t square = 0.0f;

	osMutexWait(accelDataMutex, osWaitForever);
 8001080:	f8df 90c4 	ldr.w	r9, [pc, #196]	@ 8001148 <StartSensorTask+0xd0>
	if (ax != 0 || ay != 0 || az != 0) {
		arm_sqrt_f32((float32_t)((ax * ax + az * az) * 57), &square);
		roll = atan2((double)ay, (double)square) * 57;
 8001084:	2600      	movs	r6, #0
 8001086:	4f2d      	ldr	r7, [pc, #180]	@ (800113c <StartSensorTask+0xc4>)

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 8001088:	f04f 0a00 	mov.w	sl, #0
 800108c:	e036      	b.n	80010fc <StartSensorTask+0x84>
		arm_sqrt_f32((float32_t)((ax * ax + az * az) * 57), &square);
 800108e:	fb05 f505 	mul.w	r5, r5, r5
 8001092:	fb04 5404 	mla	r4, r4, r4, r5
 8001096:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800109a:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 800109e:	ee07 4a90 	vmov	s15, r4
 80010a2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    if (in >= 0.0f)
 80010a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80010aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ae:	db42      	blt.n	8001136 <StartSensorTask+0xbe>
      *pOut = sqrtf(in);
 80010b0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	d438      	bmi.n	800112c <StartSensorTask+0xb4>
 80010ba:	eef1 7ac0 	vsqrt.f32	s15, s0
		roll = atan2((double)ay, (double)square) * 57;
 80010be:	ee17 0a90 	vmov	r0, s15
 80010c2:	f7ff fa59 	bl	8000578 <__aeabi_f2d>
 80010c6:	ec41 0b18 	vmov	d8, r0, r1
 80010ca:	4640      	mov	r0, r8
 80010cc:	f7ff fa42 	bl	8000554 <__aeabi_i2d>
 80010d0:	eeb0 1a48 	vmov.f32	s2, s16
 80010d4:	eef0 1a68 	vmov.f32	s3, s17
 80010d8:	ec41 0b10 	vmov	d0, r0, r1
 80010dc:	f009 ffe2 	bl	800b0a4 <atan2>
 80010e0:	ec51 0b10 	vmov	r0, r1, d0
 80010e4:	4632      	mov	r2, r6
 80010e6:	463b      	mov	r3, r7
 80010e8:	f7ff fa9e 	bl	8000628 <__aeabi_dmul>
 80010ec:	f7ff fd94 	bl	8000c18 <__aeabi_d2f>
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <StartSensorTask+0xc8>)
 80010f2:	6018      	str	r0, [r3, #0]
	}
    osMutexRelease(accelDataMutex);
 80010f4:	f8d9 0000 	ldr.w	r0, [r9]
 80010f8:	f003 ff26 	bl	8004f48 <osMutexRelease>
    osDelay(10);
 80010fc:	200a      	movs	r0, #10
 80010fe:	f003 fee6 	bl	8004ece <osDelay>
    BSP_ACCELERO_AccGetXYZ(&xyz_accel);
 8001102:	4d10      	ldr	r5, [pc, #64]	@ (8001144 <StartSensorTask+0xcc>)
 8001104:	4628      	mov	r0, r5
 8001106:	f000 fc09 	bl	800191c <BSP_ACCELERO_AccGetXYZ>
    int16_t ax = xyz_accel[0];
 800110a:	f9b5 4000 	ldrsh.w	r4, [r5]
    int16_t ay = xyz_accel[1];
 800110e:	f9b5 8002 	ldrsh.w	r8, [r5, #2]
    int16_t az = xyz_accel[2];
 8001112:	f9b5 5004 	ldrsh.w	r5, [r5, #4]
	osMutexWait(accelDataMutex, osWaitForever);
 8001116:	f04f 31ff 	mov.w	r1, #4294967295
 800111a:	f8d9 0000 	ldr.w	r0, [r9]
 800111e:	f003 fee9 	bl	8004ef4 <osMutexWait>
	if (ax != 0 || ay != 0 || az != 0) {
 8001122:	ea44 0308 	orr.w	r3, r4, r8
 8001126:	432b      	orrs	r3, r5
 8001128:	d0e4      	beq.n	80010f4 <StartSensorTask+0x7c>
 800112a:	e7b0      	b.n	800108e <StartSensorTask+0x16>
 800112c:	f009 ffbc 	bl	800b0a8 <sqrtf>
 8001130:	eef0 7a40 	vmov.f32	s15, s0
 8001134:	e7c3      	b.n	80010be <StartSensorTask+0x46>
      *pOut = 0.0f;
 8001136:	ee07 aa90 	vmov	s15, sl
 800113a:	e7c0      	b.n	80010be <StartSensorTask+0x46>
 800113c:	404c8000 	.word	0x404c8000
 8001140:	20000718 	.word	0x20000718
 8001144:	20000724 	.word	0x20000724
 8001148:	2000071c 	.word	0x2000071c

0800114c <__io_putchar>:
{
 800114c:	b500      	push	{lr}
 800114e:	b083      	sub	sp, #12
 8001150:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	2201      	movs	r2, #1
 8001158:	a901      	add	r1, sp, #4
 800115a:	4803      	ldr	r0, [pc, #12]	@ (8001168 <__io_putchar+0x1c>)
 800115c:	f003 fceb 	bl	8004b36 <HAL_UART_Transmit>
}
 8001160:	9801      	ldr	r0, [sp, #4]
 8001162:	b003      	add	sp, #12
 8001164:	f85d fb04 	ldr.w	pc, [sp], #4
 8001168:	20000740 	.word	0x20000740

0800116c <rand>:
    seed = (1103515245 * seed + 12345) % (1 << 31);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <rand+0x18>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4905      	ldr	r1, [pc, #20]	@ (8001188 <rand+0x1c>)
 8001172:	f243 0039 	movw	r0, #12345	@ 0x3039
 8001176:	fb01 0002 	mla	r0, r1, r2, r0
 800117a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800117e:	6018      	str	r0, [r3, #0]
}
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000000c 	.word	0x2000000c
 8001188:	41c64e6d 	.word	0x41c64e6d

0800118c <getRandomNumber0to6>:
uint32_t getRandomNumber0to6(void) {
 800118c:	b508      	push	{r3, lr}
    uint32_t random_uint32 = rand();
 800118e:	f7ff ffed 	bl	800116c <rand>
    return random_uint32 % 7;
 8001192:	4b05      	ldr	r3, [pc, #20]	@ (80011a8 <getRandomNumber0to6+0x1c>)
 8001194:	fba3 2300 	umull	r2, r3, r3, r0
 8001198:	1ac2      	subs	r2, r0, r3
 800119a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800119e:	089b      	lsrs	r3, r3, #2
 80011a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
}
 80011a4:	1ac0      	subs	r0, r0, r3
 80011a6:	bd08      	pop	{r3, pc}
 80011a8:	24924925 	.word	0x24924925

080011ac <generateObstacles>:
	if (level == 1) {
 80011ac:	2801      	cmp	r0, #1
 80011ae:	d000      	beq.n	80011b2 <generateObstacles+0x6>
 80011b0:	4770      	bx	lr
void generateObstacles(int level){
 80011b2:	b510      	push	{r4, lr}
		int firstRow = getRandomNumber0to6();
 80011b4:	f7ff ffea 	bl	800118c <getRandomNumber0to6>
 80011b8:	4604      	mov	r4, r0
		int secondRow = getRandomNumber0to6();
 80011ba:	f7ff ffe7 	bl	800118c <getRandomNumber0to6>
		board[firstRow][COLS -1] = 'O';
 80011be:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <generateObstacles+0x2c>)
 80011c0:	214c      	movs	r1, #76	@ 0x4c
 80011c2:	fb01 3404 	mla	r4, r1, r4, r3
 80011c6:	224f      	movs	r2, #79	@ 0x4f
 80011c8:	f884 204b 	strb.w	r2, [r4, #75]	@ 0x4b
		board[secondRow][COLS -1] = 'O';
 80011cc:	fb01 3300 	mla	r3, r1, r0, r3
 80011d0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
}
 80011d4:	bd10      	pop	{r4, pc}
 80011d6:	bf00      	nop
 80011d8:	20000504 	.word	0x20000504

080011dc <generateBoard>:
int generateBoard() {
 80011dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (car_column >= COLS-4){
 80011e0:	4b25      	ldr	r3, [pc, #148]	@ (8001278 <generateBoard+0x9c>)
 80011e2:	681e      	ldr	r6, [r3, #0]
 80011e4:	2e47      	cmp	r6, #71	@ 0x47
 80011e6:	dc3e      	bgt.n	8001266 <generateBoard+0x8a>
					if (car_position == i && (car_column == (j - 3)|| car_column + 1 == (j-3) || car_column + 2 == (j-3) || car_column + 3 == (j-3))){
 80011e8:	4b24      	ldr	r3, [pc, #144]	@ (800127c <generateBoard+0xa0>)
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	f8df a098 	ldr.w	sl, [pc, #152]	@ 8001288 <generateBoard+0xac>
	for (int i = 0; i < ROWS; i++) {
 80011f0:	f04f 0e00 	mov.w	lr, #0
				board[i][j] = ' ';
 80011f4:	f04f 0c20 	mov.w	ip, #32
					board[i][j - 3] = 'O';
 80011f8:	254f      	movs	r5, #79	@ 0x4f
					if (car_position == i && (car_column == (j - 3)|| car_column + 1 == (j-3) || car_column + 2 == (j-3) || car_column + 3 == (j-3))){
 80011fa:	1c77      	adds	r7, r6, #1
 80011fc:	f106 0802 	add.w	r8, r6, #2
 8001200:	f106 0903 	add.w	r9, r6, #3
int generateBoard() {
 8001204:	4653      	mov	r3, sl
 8001206:	f06f 0202 	mvn.w	r2, #2
 800120a:	e00b      	b.n	8001224 <generateBoard+0x48>
				board[i][j] = ' ';
 800120c:	f883 c000 	strb.w	ip, [r3]
				if (j > 2) {
 8001210:	1cd1      	adds	r1, r2, #3
 8001212:	2902      	cmp	r1, #2
 8001214:	dd03      	ble.n	800121e <generateBoard+0x42>
					board[i][j - 3] = 'O';
 8001216:	f803 5c03 	strb.w	r5, [r3, #-3]
					if (car_position == i && (car_column == (j - 3)|| car_column + 1 == (j-3) || car_column + 2 == (j-3) || car_column + 3 == (j-3))){
 800121a:	4574      	cmp	r4, lr
 800121c:	d009      	beq.n	8001232 <generateBoard+0x56>
		for (int j = 0; j < COLS; j++) {
 800121e:	3201      	adds	r2, #1
 8001220:	2a49      	cmp	r2, #73	@ 0x49
 8001222:	d010      	beq.n	8001246 <generateBoard+0x6a>
			if (board[i][j] == 'O') {
 8001224:	3301      	adds	r3, #1
 8001226:	7819      	ldrb	r1, [r3, #0]
 8001228:	294f      	cmp	r1, #79	@ 0x4f
 800122a:	d0ef      	beq.n	800120c <generateBoard+0x30>
				board[i][j] = ' ';
 800122c:	f883 c000 	strb.w	ip, [r3]
 8001230:	e7f5      	b.n	800121e <generateBoard+0x42>
					if (car_position == i && (car_column == (j - 3)|| car_column + 1 == (j-3) || car_column + 2 == (j-3) || car_column + 3 == (j-3))){
 8001232:	4296      	cmp	r6, r2
 8001234:	d01a      	beq.n	800126c <generateBoard+0x90>
 8001236:	4297      	cmp	r7, r2
 8001238:	d01a      	beq.n	8001270 <generateBoard+0x94>
 800123a:	4590      	cmp	r8, r2
 800123c:	d01a      	beq.n	8001274 <generateBoard+0x98>
 800123e:	4591      	cmp	r9, r2
 8001240:	d1ed      	bne.n	800121e <generateBoard+0x42>
						return 1;
 8001242:	2001      	movs	r0, #1
 8001244:	e010      	b.n	8001268 <generateBoard+0x8c>
	for (int i = 0; i < ROWS; i++) {
 8001246:	f10e 0e01 	add.w	lr, lr, #1
 800124a:	f10a 0a4c 	add.w	sl, sl, #76	@ 0x4c
 800124e:	f1be 0f07 	cmp.w	lr, #7
 8001252:	d1d7      	bne.n	8001204 <generateBoard+0x28>
    strncpy(&board[car_position][car_column], "o/=\o", 4); // Put the car at column 0
 8001254:	234c      	movs	r3, #76	@ 0x4c
 8001256:	fb03 6604 	mla	r6, r3, r4, r6
 800125a:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <generateBoard+0xa4>)
 800125c:	6818      	ldr	r0, [r3, #0]
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <generateBoard+0xa8>)
 8001260:	5198      	str	r0, [r3, r6]
    return 0;
 8001262:	2000      	movs	r0, #0
 8001264:	e000      	b.n	8001268 <generateBoard+0x8c>
			return 2;
 8001266:	2002      	movs	r0, #2
}
 8001268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						return 1;
 800126c:	2001      	movs	r0, #1
 800126e:	e7fb      	b.n	8001268 <generateBoard+0x8c>
 8001270:	2001      	movs	r0, #1
 8001272:	e7f9      	b.n	8001268 <generateBoard+0x8c>
 8001274:	2001      	movs	r0, #1
 8001276:	e7f7      	b.n	8001268 <generateBoard+0x8c>
 8001278:	20000720 	.word	0x20000720
 800127c:	20000010 	.word	0x20000010
 8001280:	0800b62c 	.word	0x0800b62c
 8001284:	20000504 	.word	0x20000504
 8001288:	20000503 	.word	0x20000503

0800128c <displayBoard>:
void displayBoard() {
 800128c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    printf("+------------------------------------------------------------------------------+\n\r");
 8001290:	481e      	ldr	r0, [pc, #120]	@ (800130c <displayBoard+0x80>)
 8001292:	f006 fa7d 	bl	8007790 <iprintf>
    for (int i = 0; i < ROWS; i++) {
 8001296:	4d1e      	ldr	r5, [pc, #120]	@ (8001310 <displayBoard+0x84>)
 8001298:	2600      	movs	r6, #0
        printf("|"); // Left border
 800129a:	f04f 087c 	mov.w	r8, #124	@ 0x7c
        printf("|\n\r"); // Right border
 800129e:	4f1d      	ldr	r7, [pc, #116]	@ (8001314 <displayBoard+0x88>)
            printf("|------------------------------------------------------------------------------|\n\r");
 80012a0:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800131c <displayBoard+0x90>
        printf("|"); // Left border
 80012a4:	4640      	mov	r0, r8
 80012a6:	f006 fa85 	bl	80077b4 <putchar>
        for (int j = 0; j < COLS; j++) {
 80012aa:	f1a5 044c 	sub.w	r4, r5, #76	@ 0x4c
            printf("%c", board[i][j]);
 80012ae:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80012b2:	f006 fa7f 	bl	80077b4 <putchar>
        for (int j = 0; j < COLS; j++) {
 80012b6:	42ac      	cmp	r4, r5
 80012b8:	d1f9      	bne.n	80012ae <displayBoard+0x22>
        printf("|\n\r"); // Right border
 80012ba:	4638      	mov	r0, r7
 80012bc:	f006 fa68 	bl	8007790 <iprintf>
        if (i < ROWS - 1) {
 80012c0:	2e05      	cmp	r6, #5
 80012c2:	dc05      	bgt.n	80012d0 <displayBoard+0x44>
            printf("|------------------------------------------------------------------------------|\n\r");
 80012c4:	4648      	mov	r0, r9
 80012c6:	f006 fa63 	bl	8007790 <iprintf>
    for (int i = 0; i < ROWS; i++) {
 80012ca:	3601      	adds	r6, #1
 80012cc:	354c      	adds	r5, #76	@ 0x4c
 80012ce:	e7e9      	b.n	80012a4 <displayBoard+0x18>
 80012d0:	3601      	adds	r6, #1
 80012d2:	2e07      	cmp	r6, #7
 80012d4:	d117      	bne.n	8001306 <displayBoard+0x7a>
    printf("+------------------------------------------------------------------------------+\n\r");
 80012d6:	480d      	ldr	r0, [pc, #52]	@ (800130c <displayBoard+0x80>)
 80012d8:	f006 fa5a 	bl	8007790 <iprintf>
    printf("\n\r");
 80012dc:	4c0e      	ldr	r4, [pc, #56]	@ (8001318 <displayBoard+0x8c>)
 80012de:	4620      	mov	r0, r4
 80012e0:	f006 fa56 	bl	8007790 <iprintf>
    printf("\n\r");
 80012e4:	4620      	mov	r0, r4
 80012e6:	f006 fa53 	bl	8007790 <iprintf>
    printf("\n\r");
 80012ea:	4620      	mov	r0, r4
 80012ec:	f006 fa50 	bl	8007790 <iprintf>
    printf("\n\r");
 80012f0:	4620      	mov	r0, r4
 80012f2:	f006 fa4d 	bl	8007790 <iprintf>
	printf("\n\r");
 80012f6:	4620      	mov	r0, r4
 80012f8:	f006 fa4a 	bl	8007790 <iprintf>
	printf("\n\r");
 80012fc:	4620      	mov	r0, r4
 80012fe:	f006 fa47 	bl	8007790 <iprintf>
}
 8001302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < ROWS; i++) {
 8001306:	354c      	adds	r5, #76	@ 0x4c
 8001308:	e7cc      	b.n	80012a4 <displayBoard+0x18>
 800130a:	bf00      	nop
 800130c:	0800b634 	.word	0x0800b634
 8001310:	2000054f 	.word	0x2000054f
 8001314:	0800b688 	.word	0x0800b688
 8001318:	0800b7cc 	.word	0x0800b7cc
 800131c:	0800b68c 	.word	0x0800b68c

08001320 <printGameOver>:
void printGameOver() {
 8001320:	b510      	push	{r4, lr}
    printf("\n\r");
 8001322:	4c16      	ldr	r4, [pc, #88]	@ (800137c <printGameOver+0x5c>)
 8001324:	4620      	mov	r0, r4
 8001326:	f006 fa33 	bl	8007790 <iprintf>
    printf(" GGGGG  AAAAA  M     M  EEEEE    OOO  V   V EEEEE RRRR  \n\r");
 800132a:	4815      	ldr	r0, [pc, #84]	@ (8001380 <printGameOver+0x60>)
 800132c:	f006 fa30 	bl	8007790 <iprintf>
    printf("G       A   A  MM   MM  E       O   O V   V E     R   R \n\r");
 8001330:	4814      	ldr	r0, [pc, #80]	@ (8001384 <printGameOver+0x64>)
 8001332:	f006 fa2d 	bl	8007790 <iprintf>
    printf("G  GG   AAAAA  M M M M  EEEE    O   O V   V EEEE  RRRR  \n\r");
 8001336:	4814      	ldr	r0, [pc, #80]	@ (8001388 <printGameOver+0x68>)
 8001338:	f006 fa2a 	bl	8007790 <iprintf>
    printf("G   G   A   A  M  M  M  E       O   O V   V E     R  R  \n\r");
 800133c:	4813      	ldr	r0, [pc, #76]	@ (800138c <printGameOver+0x6c>)
 800133e:	f006 fa27 	bl	8007790 <iprintf>
    printf(" GGGG   A   A  M     M  EEEEE    OOO   VVV  EEEEE R   R \n\r");
 8001342:	4813      	ldr	r0, [pc, #76]	@ (8001390 <printGameOver+0x70>)
 8001344:	f006 fa24 	bl	8007790 <iprintf>
    printf("\n\r");
 8001348:	4620      	mov	r0, r4
 800134a:	f006 fa21 	bl	8007790 <iprintf>
    printf("\n\r");
 800134e:	4620      	mov	r0, r4
 8001350:	f006 fa1e 	bl	8007790 <iprintf>
    printf("\n\r");
 8001354:	4620      	mov	r0, r4
 8001356:	f006 fa1b 	bl	8007790 <iprintf>
    printf("\n\r");
 800135a:	4620      	mov	r0, r4
 800135c:	f006 fa18 	bl	8007790 <iprintf>
    printf("\n\r");
 8001360:	4620      	mov	r0, r4
 8001362:	f006 fa15 	bl	8007790 <iprintf>
    printf("\n\r");
 8001366:	4620      	mov	r0, r4
 8001368:	f006 fa12 	bl	8007790 <iprintf>
    printf("\n\r");
 800136c:	4620      	mov	r0, r4
 800136e:	f006 fa0f 	bl	8007790 <iprintf>
    printf("\n\r");
 8001372:	4620      	mov	r0, r4
 8001374:	f006 fa0c 	bl	8007790 <iprintf>
}
 8001378:	bd10      	pop	{r4, pc}
 800137a:	bf00      	nop
 800137c:	0800b7cc 	.word	0x0800b7cc
 8001380:	0800b6e0 	.word	0x0800b6e0
 8001384:	0800b71c 	.word	0x0800b71c
 8001388:	0800b758 	.word	0x0800b758
 800138c:	0800b794 	.word	0x0800b794
 8001390:	0800b7d0 	.word	0x0800b7d0

08001394 <printWinner>:
void printWinner() {
 8001394:	b510      	push	{r4, lr}
    printf("\n\r");
 8001396:	4c16      	ldr	r4, [pc, #88]	@ (80013f0 <printWinner+0x5c>)
 8001398:	4620      	mov	r0, r4
 800139a:	f006 f9f9 	bl	8007790 <iprintf>
    printf(" W   W  III  N   N  N   N  EEEEE  RRRR    \n\r");
 800139e:	4815      	ldr	r0, [pc, #84]	@ (80013f4 <printWinner+0x60>)
 80013a0:	f006 f9f6 	bl	8007790 <iprintf>
    printf(" W   W   I   NN  N  NN  N  E      R   R   \n\r");
 80013a4:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <printWinner+0x64>)
 80013a6:	f006 f9f3 	bl	8007790 <iprintf>
    printf(" W W W   I   N N N  N N N  EEEE   RRRR    \n\r");
 80013aa:	4814      	ldr	r0, [pc, #80]	@ (80013fc <printWinner+0x68>)
 80013ac:	f006 f9f0 	bl	8007790 <iprintf>
    printf(" WW WW   I   N  NN  N  NN  E      R  R    \n\r");
 80013b0:	4813      	ldr	r0, [pc, #76]	@ (8001400 <printWinner+0x6c>)
 80013b2:	f006 f9ed 	bl	8007790 <iprintf>
    printf(" W   W  III  N   N  N   N  EEEEE  R   R   \n\r");
 80013b6:	4813      	ldr	r0, [pc, #76]	@ (8001404 <printWinner+0x70>)
 80013b8:	f006 f9ea 	bl	8007790 <iprintf>
    printf("\n\r");
 80013bc:	4620      	mov	r0, r4
 80013be:	f006 f9e7 	bl	8007790 <iprintf>
    printf("\n\r");
 80013c2:	4620      	mov	r0, r4
 80013c4:	f006 f9e4 	bl	8007790 <iprintf>
	printf("\n\r");
 80013c8:	4620      	mov	r0, r4
 80013ca:	f006 f9e1 	bl	8007790 <iprintf>
	printf("\n\r");
 80013ce:	4620      	mov	r0, r4
 80013d0:	f006 f9de 	bl	8007790 <iprintf>
	printf("\n\r");
 80013d4:	4620      	mov	r0, r4
 80013d6:	f006 f9db 	bl	8007790 <iprintf>
	printf("\n\r");
 80013da:	4620      	mov	r0, r4
 80013dc:	f006 f9d8 	bl	8007790 <iprintf>
	printf("\n\r");
 80013e0:	4620      	mov	r0, r4
 80013e2:	f006 f9d5 	bl	8007790 <iprintf>
	printf("\n\r");
 80013e6:	4620      	mov	r0, r4
 80013e8:	f006 f9d2 	bl	8007790 <iprintf>
}
 80013ec:	bd10      	pop	{r4, pc}
 80013ee:	bf00      	nop
 80013f0:	0800b7cc 	.word	0x0800b7cc
 80013f4:	0800b80c 	.word	0x0800b80c
 80013f8:	0800b83c 	.word	0x0800b83c
 80013fc:	0800b86c 	.word	0x0800b86c
 8001400:	0800b89c 	.word	0x0800b89c
 8001404:	0800b8cc 	.word	0x0800b8cc

08001408 <StartTerminalTask>:
{
 8001408:	b570      	push	{r4, r5, r6, lr}
    if (terminalTaskCounter == obstacleGenerationFrequency){
 800140a:	4c2e      	ldr	r4, [pc, #184]	@ (80014c4 <StartTerminalTask+0xbc>)
 800140c:	4e2e      	ldr	r6, [pc, #184]	@ (80014c8 <StartTerminalTask+0xc0>)
    osMutexWait(accelDataMutex, osWaitForever);
 800140e:	4d2f      	ldr	r5, [pc, #188]	@ (80014cc <StartTerminalTask+0xc4>)
 8001410:	e029      	b.n	8001466 <StartTerminalTask+0x5e>
        	generateObstacles(1);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff feca 	bl	80011ac <generateObstacles>
 8001418:	e02d      	b.n	8001476 <StartTerminalTask+0x6e>
    	car_column = car_column + 5;
 800141a:	492d      	ldr	r1, [pc, #180]	@ (80014d0 <StartTerminalTask+0xc8>)
 800141c:	680a      	ldr	r2, [r1, #0]
 800141e:	3205      	adds	r2, #5
 8001420:	600a      	str	r2, [r1, #0]
 8001422:	e02d      	b.n	8001480 <StartTerminalTask+0x78>
    	terminalTaskCounter = terminalTaskCounter - 1;
 8001424:	3b01      	subs	r3, #1
 8001426:	e02e      	b.n	8001486 <StartTerminalTask+0x7e>
	if (roll < -20.0f && car_position >0){
 8001428:	eebb 7a04 	vmov.f32	s14, #180	@ 0xc1a00000 -20.0
 800142c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d506      	bpl.n	8001444 <StartTerminalTask+0x3c>
 8001436:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <StartTerminalTask+0xcc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dd02      	ble.n	8001444 <StartTerminalTask+0x3c>
		car_position = car_position - 1;
 800143e:	3b01      	subs	r3, #1
 8001440:	4a24      	ldr	r2, [pc, #144]	@ (80014d4 <StartTerminalTask+0xcc>)
 8001442:	6013      	str	r3, [r2, #0]
    osMutexRelease(accelDataMutex);
 8001444:	6828      	ldr	r0, [r5, #0]
 8001446:	f003 fd7f 	bl	8004f48 <osMutexRelease>
    int gameStatus = generateBoard();
 800144a:	f7ff fec7 	bl	80011dc <generateBoard>
    if (gameStatus==1){
 800144e:	2801      	cmp	r0, #1
 8001450:	d031      	beq.n	80014b6 <StartTerminalTask+0xae>
    if (gameStatus ==2){
 8001452:	2802      	cmp	r0, #2
 8001454:	d105      	bne.n	8001462 <StartTerminalTask+0x5a>
    	printWinner();
 8001456:	f7ff ff9d 	bl	8001394 <printWinner>
    	vTaskSuspend(TerminalTaskHandle); // Suspend the current task (NULL means current task)
 800145a:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <StartTerminalTask+0xd0>)
 800145c:	6818      	ldr	r0, [r3, #0]
 800145e:	f004 fd55 	bl	8005f0c <vTaskSuspend>
    displayBoard();
 8001462:	f7ff ff13 	bl	800128c <displayBoard>
    osDelay(300);
 8001466:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800146a:	f003 fd30 	bl	8004ece <osDelay>
    if (terminalTaskCounter == obstacleGenerationFrequency){
 800146e:	6822      	ldr	r2, [r4, #0]
 8001470:	6833      	ldr	r3, [r6, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d0cd      	beq.n	8001412 <StartTerminalTask+0xa>
    if (terminalTaskCounter== movingCounter){
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	4a18      	ldr	r2, [pc, #96]	@ (80014dc <StartTerminalTask+0xd4>)
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	4293      	cmp	r3, r2
 800147e:	d0cc      	beq.n	800141a <StartTerminalTask+0x12>
    if (terminalTaskCounter == 0) {
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1cf      	bne.n	8001424 <StartTerminalTask+0x1c>
    	terminalTaskCounter = obstacleGenerationFrequency;
 8001484:	6833      	ldr	r3, [r6, #0]
 8001486:	6023      	str	r3, [r4, #0]
    osMutexWait(accelDataMutex, osWaitForever);
 8001488:	f04f 31ff 	mov.w	r1, #4294967295
 800148c:	6828      	ldr	r0, [r5, #0]
 800148e:	f003 fd31 	bl	8004ef4 <osMutexWait>
    if (roll > 20.0f && car_position <6){
 8001492:	4b13      	ldr	r3, [pc, #76]	@ (80014e0 <StartTerminalTask+0xd8>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800149c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	ddc0      	ble.n	8001428 <StartTerminalTask+0x20>
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <StartTerminalTask+0xcc>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b05      	cmp	r3, #5
 80014ac:	dcbc      	bgt.n	8001428 <StartTerminalTask+0x20>
		car_position = car_position + 1;
 80014ae:	3301      	adds	r3, #1
 80014b0:	4a08      	ldr	r2, [pc, #32]	@ (80014d4 <StartTerminalTask+0xcc>)
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e7b8      	b.n	8001428 <StartTerminalTask+0x20>
    	printGameOver();
 80014b6:	f7ff ff33 	bl	8001320 <printGameOver>
    	vTaskSuspend(TerminalTaskHandle); // Suspend the current task (NULL means current task)
 80014ba:	4b07      	ldr	r3, [pc, #28]	@ (80014d8 <StartTerminalTask+0xd0>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f004 fd25 	bl	8005f0c <vTaskSuspend>
    if (gameStatus ==2){
 80014c2:	e7ce      	b.n	8001462 <StartTerminalTask+0x5a>
 80014c4:	20000004 	.word	0x20000004
 80014c8:	20000008 	.word	0x20000008
 80014cc:	2000071c 	.word	0x2000071c
 80014d0:	20000720 	.word	0x20000720
 80014d4:	20000010 	.word	0x20000010
 80014d8:	20000738 	.word	0x20000738
 80014dc:	20000000 	.word	0x20000000
 80014e0:	20000718 	.word	0x20000718

080014e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80014e6:	6802      	ldr	r2, [r0, #0]
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_TIM_PeriodElapsedCallback+0x14>)
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d000      	beq.n	80014f0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014ee:	bd08      	pop	{r3, pc}
    HAL_IncTick();
 80014f0:	f000 fe76 	bl	80021e0 <HAL_IncTick>
}
 80014f4:	e7fb      	b.n	80014ee <HAL_TIM_PeriodElapsedCallback+0xa>
 80014f6:	bf00      	nop
 80014f8:	40001000 	.word	0x40001000

080014fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Error happened");
 80014fe:	4802      	ldr	r0, [pc, #8]	@ (8001508 <Error_Handler+0xc>)
 8001500:	f006 f946 	bl	8007790 <iprintf>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001504:	b672      	cpsid	i
  __disable_irq();
  while (1)
 8001506:	e7fe      	b.n	8001506 <Error_Handler+0xa>
 8001508:	0800b8fc 	.word	0x0800b8fc

0800150c <SystemClock_Config>:
{
 800150c:	b500      	push	{lr}
 800150e:	b097      	sub	sp, #92	@ 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001510:	2244      	movs	r2, #68	@ 0x44
 8001512:	2100      	movs	r1, #0
 8001514:	a805      	add	r0, sp, #20
 8001516:	f006 f9b8 	bl	800788a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800151a:	2000      	movs	r0, #0
 800151c:	9000      	str	r0, [sp, #0]
 800151e:	9001      	str	r0, [sp, #4]
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	9003      	str	r0, [sp, #12]
 8001524:	9004      	str	r0, [sp, #16]
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001526:	f001 fc99 	bl	8002e5c <HAL_PWREx_ControlVoltageScaling>
 800152a:	bb20      	cbnz	r0, 8001576 <SystemClock_Config+0x6a>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800152c:	2310      	movs	r3, #16
 800152e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001530:	2201      	movs	r2, #1
 8001532:	920b      	str	r2, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001538:	2360      	movs	r3, #96	@ 0x60
 800153a:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153c:	2302      	movs	r3, #2
 800153e:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001540:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001542:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001544:	223c      	movs	r2, #60	@ 0x3c
 8001546:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001548:	9313      	str	r3, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800154a:	9314      	str	r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800154c:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154e:	a805      	add	r0, sp, #20
 8001550:	f001 fda4 	bl	800309c <HAL_RCC_OscConfig>
 8001554:	b988      	cbnz	r0, 800157a <SystemClock_Config+0x6e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001556:	230f      	movs	r3, #15
 8001558:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800155a:	2303      	movs	r3, #3
 800155c:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800155e:	2300      	movs	r3, #0
 8001560:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001562:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001564:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001566:	2105      	movs	r1, #5
 8001568:	4668      	mov	r0, sp
 800156a:	f002 f8df 	bl	800372c <HAL_RCC_ClockConfig>
 800156e:	b930      	cbnz	r0, 800157e <SystemClock_Config+0x72>
}
 8001570:	b017      	add	sp, #92	@ 0x5c
 8001572:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001576:	f7ff ffc1 	bl	80014fc <Error_Handler>
    Error_Handler();
 800157a:	f7ff ffbf 	bl	80014fc <Error_Handler>
    Error_Handler();
 800157e:	f7ff ffbd 	bl	80014fc <Error_Handler>
	...

08001584 <main>:
{
 8001584:	b500      	push	{lr}
 8001586:	b09f      	sub	sp, #124	@ 0x7c
  HAL_Init();
 8001588:	f000 fe1a 	bl	80021c0 <HAL_Init>
  SystemClock_Config();
 800158c:	f7ff ffbe 	bl	800150c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	2400      	movs	r4, #0
 8001592:	9402      	str	r4, [sp, #8]
 8001594:	9403      	str	r4, [sp, #12]
 8001596:	9404      	str	r4, [sp, #16]
 8001598:	9405      	str	r4, [sp, #20]
 800159a:	9406      	str	r4, [sp, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800159c:	4b65      	ldr	r3, [pc, #404]	@ (8001734 <main+0x1b0>)
 800159e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a0:	f042 0204 	orr.w	r2, r2, #4
 80015a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015a8:	f002 0204 	and.w	r2, r2, #4
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80015b2:	f042 0202 	orr.w	r2, r2, #2
 80015b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80015c2:	4e5d      	ldr	r6, [pc, #372]	@ (8001738 <main+0x1b4>)
 80015c4:	4622      	mov	r2, r4
 80015c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ca:	4630      	mov	r0, r6
 80015cc:	f001 f806 	bl	80025dc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BTN_Pin;
 80015d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d6:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d8:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 80015da:	a902      	add	r1, sp, #8
 80015dc:	4857      	ldr	r0, [pc, #348]	@ (800173c <main+0x1b8>)
 80015de:	f000 fe67 	bl	80022b0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_Pin;
 80015e2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80015e6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e8:	2501      	movs	r5, #1
 80015ea:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80015f0:	a902      	add	r1, sp, #8
 80015f2:	4630      	mov	r0, r6
 80015f4:	f000 fe5c 	bl	80022b0 <HAL_GPIO_Init>
  hi2c2.Instance = I2C2;
 80015f8:	4851      	ldr	r0, [pc, #324]	@ (8001740 <main+0x1bc>)
 80015fa:	4b52      	ldr	r3, [pc, #328]	@ (8001744 <main+0x1c0>)
 80015fc:	6003      	str	r3, [r0, #0]
  hi2c2.Init.Timing = 0x30A175AB;
 80015fe:	4b52      	ldr	r3, [pc, #328]	@ (8001748 <main+0x1c4>)
 8001600:	6043      	str	r3, [r0, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001602:	6084      	str	r4, [r0, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001604:	60c5      	str	r5, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001606:	6104      	str	r4, [r0, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001608:	6144      	str	r4, [r0, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800160a:	6184      	str	r4, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	61c4      	str	r4, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800160e:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001610:	f001 f944 	bl	800289c <HAL_I2C_Init>
 8001614:	2800      	cmp	r0, #0
 8001616:	d17a      	bne.n	800170e <main+0x18a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001618:	2100      	movs	r1, #0
 800161a:	4849      	ldr	r0, [pc, #292]	@ (8001740 <main+0x1bc>)
 800161c:	f001 fbb4 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
 8001620:	2800      	cmp	r0, #0
 8001622:	d176      	bne.n	8001712 <main+0x18e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001624:	2100      	movs	r1, #0
 8001626:	4846      	ldr	r0, [pc, #280]	@ (8001740 <main+0x1bc>)
 8001628:	f001 fbdc 	bl	8002de4 <HAL_I2CEx_ConfigDigitalFilter>
 800162c:	2800      	cmp	r0, #0
 800162e:	d172      	bne.n	8001716 <main+0x192>
  huart1.Instance = USART1;
 8001630:	4846      	ldr	r0, [pc, #280]	@ (800174c <main+0x1c8>)
 8001632:	4b47      	ldr	r3, [pc, #284]	@ (8001750 <main+0x1cc>)
 8001634:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800163a:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163c:	2300      	movs	r3, #0
 800163e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001640:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001642:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001644:	220c      	movs	r2, #12
 8001646:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001648:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800164a:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164c:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800164e:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001650:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001652:	f003 fb40 	bl	8004cd6 <HAL_UART_Init>
 8001656:	2800      	cmp	r0, #0
 8001658:	d15f      	bne.n	800171a <main+0x196>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	483b      	ldr	r0, [pc, #236]	@ (800174c <main+0x1c8>)
 800165e:	f003 fbb2 	bl	8004dc6 <HAL_UARTEx_SetTxFifoThreshold>
 8001662:	2800      	cmp	r0, #0
 8001664:	d15b      	bne.n	800171e <main+0x19a>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4838      	ldr	r0, [pc, #224]	@ (800174c <main+0x1c8>)
 800166a:	f003 fbd1 	bl	8004e10 <HAL_UARTEx_SetRxFifoThreshold>
 800166e:	2800      	cmp	r0, #0
 8001670:	d157      	bne.n	8001722 <main+0x19e>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001672:	4836      	ldr	r0, [pc, #216]	@ (800174c <main+0x1c8>)
 8001674:	f003 fb88 	bl	8004d88 <HAL_UARTEx_DisableFifoMode>
 8001678:	2800      	cmp	r0, #0
 800167a:	d154      	bne.n	8001726 <main+0x1a2>
  BSP_ACCELERO_Init();
 800167c:	f000 f938 	bl	80018f0 <BSP_ACCELERO_Init>
  BSP_GYRO_Init();
 8001680:	f000 f956 	bl	8001930 <BSP_GYRO_Init>
  BSP_PSENSOR_Init();
 8001684:	f000 f990 	bl	80019a8 <BSP_PSENSOR_Init>
  BSP_MAGNETO_Init();
 8001688:	f000 f968 	bl	800195c <BSP_MAGNETO_Init>
  osMutexDef(accelDataMutex);         // Define the mutex
 800168c:	2300      	movs	r3, #0
 800168e:	931c      	str	r3, [sp, #112]	@ 0x70
 8001690:	931d      	str	r3, [sp, #116]	@ 0x74
  accelDataMutex = osMutexCreate(osMutex(accelDataMutex)); // Create the mutex
 8001692:	a81c      	add	r0, sp, #112	@ 0x70
 8001694:	f003 fc23 	bl	8004ede <osMutexCreate>
 8001698:	4b2e      	ldr	r3, [pc, #184]	@ (8001754 <main+0x1d0>)
 800169a:	6018      	str	r0, [r3, #0]
  if (accelDataMutex == NULL) {
 800169c:	2800      	cmp	r0, #0
 800169e:	d044      	beq.n	800172a <main+0x1a6>
  osThreadDef(ButtonTask, StartButtonTask, osPriorityHigh, 0, 128);
 80016a0:	4c2d      	ldr	r4, [pc, #180]	@ (8001758 <main+0x1d4>)
 80016a2:	f10d 0c54 	add.w	ip, sp, #84	@ 0x54
 80016a6:	46a6      	mov	lr, r4
 80016a8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016ac:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016b0:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80016b4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  ButtonTaskHandle = osThreadCreate(osThread(ButtonTask), NULL);
 80016b8:	2100      	movs	r1, #0
 80016ba:	a815      	add	r0, sp, #84	@ 0x54
 80016bc:	f003 fbd2 	bl	8004e64 <osThreadCreate>
 80016c0:	4b26      	ldr	r3, [pc, #152]	@ (800175c <main+0x1d8>)
 80016c2:	6018      	str	r0, [r3, #0]
  osThreadDef(TerminalTask, StartTerminalTask, osPriorityAboveNormal, 0, 200);
 80016c4:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 80016c8:	f104 0e1c 	add.w	lr, r4, #28
 80016cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016d4:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80016d8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  TerminalTaskHandle = osThreadCreate(osThread(TerminalTask), NULL);
 80016dc:	2100      	movs	r1, #0
 80016de:	a80e      	add	r0, sp, #56	@ 0x38
 80016e0:	f003 fbc0 	bl	8004e64 <osThreadCreate>
 80016e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <main+0x1dc>)
 80016e6:	6018      	str	r0, [r3, #0]
  osThreadDef(SensorTask, StartSensorTask, osPriorityAboveNormal, 0, 200);
 80016e8:	f10d 0c1c 	add.w	ip, sp, #28
 80016ec:	3438      	adds	r4, #56	@ 0x38
 80016ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016f4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80016f8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80016fc:	2100      	movs	r1, #0
 80016fe:	a807      	add	r0, sp, #28
 8001700:	f003 fbb0 	bl	8004e64 <osThreadCreate>
 8001704:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <main+0x1e0>)
 8001706:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001708:	f003 fba7 	bl	8004e5a <osKernelStart>
  while (1)
 800170c:	e7fe      	b.n	800170c <main+0x188>
    Error_Handler();
 800170e:	f7ff fef5 	bl	80014fc <Error_Handler>
    Error_Handler();
 8001712:	f7ff fef3 	bl	80014fc <Error_Handler>
    Error_Handler();
 8001716:	f7ff fef1 	bl	80014fc <Error_Handler>
    Error_Handler();
 800171a:	f7ff feef 	bl	80014fc <Error_Handler>
    Error_Handler();
 800171e:	f7ff feed 	bl	80014fc <Error_Handler>
    Error_Handler();
 8001722:	f7ff feeb 	bl	80014fc <Error_Handler>
    Error_Handler();
 8001726:	f7ff fee9 	bl	80014fc <Error_Handler>
      printf("Failed to create accelDataMutex\n\r");
 800172a:	480f      	ldr	r0, [pc, #60]	@ (8001768 <main+0x1e4>)
 800172c:	f006 f830 	bl	8007790 <iprintf>
      Error_Handler();
 8001730:	f7ff fee4 	bl	80014fc <Error_Handler>
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400
 800173c:	48000800 	.word	0x48000800
 8001740:	200007d4 	.word	0x200007d4
 8001744:	40005800 	.word	0x40005800
 8001748:	30a175ab 	.word	0x30a175ab
 800174c:	20000740 	.word	0x20000740
 8001750:	40013800 	.word	0x40013800
 8001754:	2000071c 	.word	0x2000071c
 8001758:	0800b5d8 	.word	0x0800b5d8
 800175c:	2000073c 	.word	0x2000073c
 8001760:	20000738 	.word	0x20000738
 8001764:	20000734 	.word	0x20000734
 8001768:	0800b90c 	.word	0x0800b90c

0800176c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800176c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	4604      	mov	r4, r0
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001772:	4b29      	ldr	r3, [pc, #164]	@ (8001818 <I2Cx_Init+0xac>)
 8001774:	6003      	str	r3, [r0, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8001776:	4b29      	ldr	r3, [pc, #164]	@ (800181c <I2Cx_Init+0xb0>)
 8001778:	6043      	str	r3, [r0, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800177a:	2600      	movs	r6, #0
 800177c:	6086      	str	r6, [r0, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800177e:	2201      	movs	r2, #1
 8001780:	60c2      	str	r2, [r0, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001782:	6106      	str	r6, [r0, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001784:	6146      	str	r6, [r0, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001786:	61c6      	str	r6, [r0, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001788:	6206      	str	r6, [r0, #32]
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800178a:	4d25      	ldr	r5, [pc, #148]	@ (8001820 <I2Cx_Init+0xb4>)
 800178c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800178e:	f043 0302 	orr.w	r3, r3, #2
 8001792:	64eb      	str	r3, [r5, #76]	@ 0x4c
 8001794:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	9301      	str	r3, [sp, #4]
 800179c:	9b01      	ldr	r3, [sp, #4]
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800179e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017a2:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80017a4:	2312      	movs	r3, #18
 80017a6:	9304      	str	r3, [sp, #16]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80017a8:	9205      	str	r2, [sp, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017aa:	2303      	movs	r3, #3
 80017ac:	9306      	str	r3, [sp, #24]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80017ae:	2304      	movs	r3, #4
 80017b0:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017b2:	4f1c      	ldr	r7, [pc, #112]	@ (8001824 <I2Cx_Init+0xb8>)
 80017b4:	a903      	add	r1, sp, #12
 80017b6:	4638      	mov	r0, r7
 80017b8:	f000 fd7a 	bl	80022b0 <HAL_GPIO_Init>
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80017bc:	a903      	add	r1, sp, #12
 80017be:	4638      	mov	r0, r7
 80017c0:	f000 fd76 	bl	80022b0 <HAL_GPIO_Init>
  DISCOVERY_I2Cx_CLK_ENABLE();
 80017c4:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80017c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017ca:	65ab      	str	r3, [r5, #88]	@ 0x58
 80017cc:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80017ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	9b02      	ldr	r3, [sp, #8]
  DISCOVERY_I2Cx_FORCE_RESET();
 80017d6:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80017d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017dc:	63ab      	str	r3, [r5, #56]	@ 0x38
  DISCOVERY_I2Cx_RELEASE_RESET();
 80017de:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 80017e0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80017e4:	63ab      	str	r3, [r5, #56]	@ 0x38
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80017e6:	4632      	mov	r2, r6
 80017e8:	210f      	movs	r1, #15
 80017ea:	2021      	movs	r0, #33	@ 0x21
 80017ec:	f000 fd1c 	bl	8002228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80017f0:	2021      	movs	r0, #33	@ 0x21
 80017f2:	f000 fd4f 	bl	8002294 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80017f6:	4632      	mov	r2, r6
 80017f8:	210f      	movs	r1, #15
 80017fa:	2022      	movs	r0, #34	@ 0x22
 80017fc:	f000 fd14 	bl	8002228 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001800:	2022      	movs	r0, #34	@ 0x22
 8001802:	f000 fd47 	bl	8002294 <HAL_NVIC_EnableIRQ>

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
  HAL_I2C_Init(i2c_handler);
 8001806:	4620      	mov	r0, r4
 8001808:	f001 f848 	bl	800289c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800180c:	4631      	mov	r1, r6
 800180e:	4620      	mov	r0, r4
 8001810:	f001 faba 	bl	8002d88 <HAL_I2CEx_ConfigAnalogFilter>
}
 8001814:	b009      	add	sp, #36	@ 0x24
 8001816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001818:	40005800 	.word	0x40005800
 800181c:	00702681 	.word	0x00702681
 8001820:	40021000 	.word	0x40021000
 8001824:	48000400 	.word	0x48000400

08001828 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001828:	b508      	push	{r3, lr}
  I2Cx_Init(&hI2cHandler);
 800182a:	4802      	ldr	r0, [pc, #8]	@ (8001834 <SENSOR_IO_Init+0xc>)
 800182c:	f7ff ff9e 	bl	800176c <I2Cx_Init>
}
 8001830:	bd08      	pop	{r3, pc}
 8001832:	bf00      	nop
 8001834:	20000828 	.word	0x20000828

08001838 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001838:	b510      	push	{r4, lr}
 800183a:	b086      	sub	sp, #24
 800183c:	f88d 2017 	strb.w	r2, [sp, #23]
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001840:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001844:	9302      	str	r3, [sp, #8]
 8001846:	2301      	movs	r3, #1
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	f10d 0217 	add.w	r2, sp, #23
 800184e:	9200      	str	r2, [sp, #0]
 8001850:	460a      	mov	r2, r1
 8001852:	4601      	mov	r1, r0
 8001854:	4806      	ldr	r0, [pc, #24]	@ (8001870 <SENSOR_IO_Write+0x38>)
 8001856:	f001 f897 	bl	8002988 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800185a:	b908      	cbnz	r0, 8001860 <SENSOR_IO_Write+0x28>
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
}
 800185c:	b006      	add	sp, #24
 800185e:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(i2c_handler);
 8001860:	4c03      	ldr	r4, [pc, #12]	@ (8001870 <SENSOR_IO_Write+0x38>)
 8001862:	4620      	mov	r0, r4
 8001864:	f001 f876 	bl	8002954 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff ff7f 	bl	800176c <I2Cx_Init>
}
 800186e:	e7f5      	b.n	800185c <SENSOR_IO_Write+0x24>
 8001870:	20000828 	.word	0x20000828

08001874 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001874:	b510      	push	{r4, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	460a      	mov	r2, r1
  uint8_t read_value = 0;
 800187a:	2300      	movs	r3, #0
 800187c:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001884:	9302      	str	r3, [sp, #8]
 8001886:	2301      	movs	r3, #1
 8001888:	9301      	str	r3, [sp, #4]
 800188a:	f10d 0117 	add.w	r1, sp, #23
 800188e:	9100      	str	r1, [sp, #0]
 8001890:	4601      	mov	r1, r0
 8001892:	4808      	ldr	r0, [pc, #32]	@ (80018b4 <SENSOR_IO_Read+0x40>)
 8001894:	f001 f976 	bl	8002b84 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001898:	b918      	cbnz	r0, 80018a2 <SENSOR_IO_Read+0x2e>

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);

  return read_value;
}
 800189a:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800189e:	b006      	add	sp, #24
 80018a0:	bd10      	pop	{r4, pc}
  HAL_I2C_DeInit(i2c_handler);
 80018a2:	4c04      	ldr	r4, [pc, #16]	@ (80018b4 <SENSOR_IO_Read+0x40>)
 80018a4:	4620      	mov	r0, r4
 80018a6:	f001 f855 	bl	8002954 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff ff5e 	bl	800176c <I2Cx_Init>
}
 80018b0:	e7f3      	b.n	800189a <SENSOR_IO_Read+0x26>
 80018b2:	bf00      	nop
 80018b4:	20000828 	.word	0x20000828

080018b8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80018b8:	b530      	push	{r4, r5, lr}
 80018ba:	b085      	sub	sp, #20
  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80018bc:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80018c0:	9402      	str	r4, [sp, #8]
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	9200      	str	r2, [sp, #0]
 80018c6:	2301      	movs	r3, #1
 80018c8:	460a      	mov	r2, r1
 80018ca:	4601      	mov	r1, r0
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <SENSOR_IO_ReadMultiple+0x34>)
 80018ce:	f001 f959 	bl	8002b84 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 80018d2:	4604      	mov	r4, r0
 80018d4:	b910      	cbnz	r0, 80018dc <SENSOR_IO_ReadMultiple+0x24>
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
}
 80018d6:	4620      	mov	r0, r4
 80018d8:	b005      	add	sp, #20
 80018da:	bd30      	pop	{r4, r5, pc}
  HAL_I2C_DeInit(i2c_handler);
 80018dc:	4d03      	ldr	r5, [pc, #12]	@ (80018ec <SENSOR_IO_ReadMultiple+0x34>)
 80018de:	4628      	mov	r0, r5
 80018e0:	f001 f838 	bl	8002954 <HAL_I2C_DeInit>
  I2Cx_Init(i2c_handler);
 80018e4:	4628      	mov	r0, r5
 80018e6:	f7ff ff41 	bl	800176c <I2Cx_Init>
}
 80018ea:	e7f4      	b.n	80018d6 <SENSOR_IO_ReadMultiple+0x1e>
 80018ec:	20000828 	.word	0x20000828

080018f0 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80018f0:	b508      	push	{r3, lr}
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80018f2:	4b08      	ldr	r3, [pc, #32]	@ (8001914 <BSP_ACCELERO_Init+0x24>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	4798      	blx	r3
 80018f8:	286a      	cmp	r0, #106	@ 0x6a
 80018fa:	d001      	beq.n	8001900 <BSP_ACCELERO_Init+0x10>
  {
    ret = ACCELERO_ERROR;
 80018fc:	2001      	movs	r0, #1
    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
  }  

  return ret;
}
 80018fe:	bd08      	pop	{r3, pc}
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <BSP_ACCELERO_Init+0x24>)
 8001902:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <BSP_ACCELERO_Init+0x28>)
 8001904:	6013      	str	r3, [r2, #0]
    AccelerometerDrv->Init(ctrl);
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f244 4030 	movw	r0, #17456	@ 0x4430
 800190c:	4798      	blx	r3
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800190e:	2000      	movs	r0, #0
 8001910:	e7f5      	b.n	80018fe <BSP_ACCELERO_Init+0xe>
 8001912:	bf00      	nop
 8001914:	2000008c 	.word	0x2000008c
 8001918:	2000087c 	.word	0x2000087c

0800191c <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800191c:	b508      	push	{r3, lr}
  if(AccelerometerDrv != NULL)
 800191e:	4b03      	ldr	r3, [pc, #12]	@ (800192c <BSP_ACCELERO_AccGetXYZ+0x10>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b113      	cbz	r3, 800192a <BSP_ACCELERO_AccGetXYZ+0xe>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	b103      	cbz	r3, 800192a <BSP_ACCELERO_AccGetXYZ+0xe>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001928:	4798      	blx	r3
    }
  }
}
 800192a:	bd08      	pop	{r3, pc}
 800192c:	2000087c 	.word	0x2000087c

08001930 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001930:	b508      	push	{r3, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <BSP_GYRO_Init+0x24>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	4798      	blx	r3
 8001938:	286a      	cmp	r0, #106	@ 0x6a
 800193a:	d001      	beq.n	8001940 <BSP_GYRO_Init+0x10>
  {
    ret = GYRO_ERROR;
 800193c:	2001      	movs	r0, #1
    
    ret = GYRO_OK;
  }
  
  return ret;
}
 800193e:	bd08      	pop	{r3, pc}
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8001940:	4b04      	ldr	r3, [pc, #16]	@ (8001954 <BSP_GYRO_Init+0x24>)
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <BSP_GYRO_Init+0x28>)
 8001944:	6013      	str	r3, [r2, #0]
    GyroscopeDrv->Init(ctrl);
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f244 403c 	movw	r0, #17468	@ 0x443c
 800194c:	4798      	blx	r3
    ret = GYRO_OK;
 800194e:	2000      	movs	r0, #0
 8001950:	e7f5      	b.n	800193e <BSP_GYRO_Init+0xe>
 8001952:	bf00      	nop
 8001954:	20000058 	.word	0x20000058
 8001958:	20000880 	.word	0x20000880

0800195c <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	b082      	sub	sp, #8
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8001960:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <BSP_MAGNETO_Init+0x44>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	4798      	blx	r3
 8001966:	283d      	cmp	r0, #61	@ 0x3d
 8001968:	d002      	beq.n	8001970 <BSP_MAGNETO_Init+0x14>
  {
    ret = MAGNETO_ERROR;
 800196a:	2001      	movs	r0, #1
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
  } 

  return ret;  
}
 800196c:	b002      	add	sp, #8
 800196e:	bd10      	pop	{r4, pc}
    MagnetoDrv = &Lis3mdlMagDrv;
 8001970:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <BSP_MAGNETO_Init+0x44>)
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <BSP_MAGNETO_Init+0x48>)
 8001974:	6013      	str	r3, [r2, #0]
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8001976:	2258      	movs	r2, #88	@ 0x58
 8001978:	f88d 2000 	strb.w	r2, [sp]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 800197c:	2400      	movs	r4, #0
 800197e:	f88d 4001 	strb.w	r4, [sp, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8001982:	f88d 4002 	strb.w	r4, [sp, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8001986:	2208      	movs	r2, #8
 8001988:	f88d 2003 	strb.w	r2, [sp, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 800198c:	2240      	movs	r2, #64	@ 0x40
 800198e:	f88d 2004 	strb.w	r2, [sp, #4]
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	aa02      	add	r2, sp, #8
 8001996:	e912 0003 	ldmdb	r2, {r0, r1}
 800199a:	4798      	blx	r3
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 800199c:	4620      	mov	r0, r4
 800199e:	e7e5      	b.n	800196c <BSP_MAGNETO_Init+0x10>
 80019a0:	20000018 	.word	0x20000018
 80019a4:	20000884 	.word	0x20000884

080019a8 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 80019a8:	b508      	push	{r3, lr}
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <BSP_PSENSOR_Init+0x24>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	20ba      	movs	r0, #186	@ 0xba
 80019b0:	4798      	blx	r3
 80019b2:	28b1      	cmp	r0, #177	@ 0xb1
 80019b4:	d001      	beq.n	80019ba <BSP_PSENSOR_Init+0x12>
  {
    ret = PSENSOR_ERROR;
 80019b6:	2001      	movs	r0, #1
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
    ret = PSENSOR_OK;
  }
  
  return ret;
}
 80019b8:	bd08      	pop	{r3, pc}
     Psensor_drv = &LPS22HB_P_Drv;
 80019ba:	4b04      	ldr	r3, [pc, #16]	@ (80019cc <BSP_PSENSOR_Init+0x24>)
 80019bc:	4a04      	ldr	r2, [pc, #16]	@ (80019d0 <BSP_PSENSOR_Init+0x28>)
 80019be:	6013      	str	r3, [r2, #0]
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	20ba      	movs	r0, #186	@ 0xba
 80019c4:	4798      	blx	r3
    ret = PSENSOR_OK;
 80019c6:	2000      	movs	r0, #0
 80019c8:	e7f6      	b.n	80019b8 <BSP_PSENSOR_Init+0x10>
 80019ca:	bf00      	nop
 80019cc:	2000004c 	.word	0x2000004c
 80019d0:	20000888 	.word	0x20000888

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b500      	push	{lr}
 80019d6:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_MspInit+0x3c>)
 80019da:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	661a      	str	r2, [r3, #96]	@ 0x60
 80019e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e4:	f002 0201 	and.w	r2, r2, #1
 80019e8:	9200      	str	r2, [sp, #0]
 80019ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80019f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80019f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	210f      	movs	r1, #15
 8001a02:	f06f 0001 	mvn.w	r0, #1
 8001a06:	f000 fc0f 	bl	8002228 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	b003      	add	sp, #12
 8001a0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a10:	40021000 	.word	0x40021000

08001a14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a14:	b510      	push	{r4, lr}
 8001a16:	b0ac      	sub	sp, #176	@ 0xb0
 8001a18:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001a1e:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001a20:	9129      	str	r1, [sp, #164]	@ 0xa4
 8001a22:	912a      	str	r1, [sp, #168]	@ 0xa8
 8001a24:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a26:	2294      	movs	r2, #148	@ 0x94
 8001a28:	a802      	add	r0, sp, #8
 8001a2a:	f005 ff2e 	bl	800788a <memset>
  if(hi2c->Instance==I2C2)
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	4b18      	ldr	r3, [pc, #96]	@ (8001a94 <HAL_I2C_MspInit+0x80>)
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_MspInit+0x26>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001a36:	b02c      	add	sp, #176	@ 0xb0
 8001a38:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a3e:	a802      	add	r0, sp, #8
 8001a40:	f002 f962 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8001a44:	bb10      	cbnz	r0, 8001a8c <HAL_I2C_MspInit+0x78>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4c14      	ldr	r4, [pc, #80]	@ (8001a98 <HAL_I2C_MspInit+0x84>)
 8001a48:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001a4a:	f043 0302 	orr.w	r3, r3, #2
 8001a4e:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8001a50:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001a5e:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	a927      	add	r1, sp, #156	@ 0x9c
 8001a72:	480a      	ldr	r0, [pc, #40]	@ (8001a9c <HAL_I2C_MspInit+0x88>)
 8001a74:	f000 fc1c 	bl	80022b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001a7e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001a80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	9b01      	ldr	r3, [sp, #4]
}
 8001a8a:	e7d4      	b.n	8001a36 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 8001a8c:	f7ff fd36 	bl	80014fc <Error_Handler>
 8001a90:	e7d9      	b.n	8001a46 <HAL_I2C_MspInit+0x32>
 8001a92:	bf00      	nop
 8001a94:	40005800 	.word	0x40005800
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400

08001aa0 <HAL_I2C_MspDeInit>:
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
  if(hi2c->Instance==I2C2)
 8001aa0:	6802      	ldr	r2, [r0, #0]
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <HAL_I2C_MspDeInit+0x30>)
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d000      	beq.n	8001aaa <HAL_I2C_MspDeInit+0xa>
 8001aa8:	4770      	bx	lr
{
 8001aaa:	b510      	push	{r4, lr}
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001aac:	4a09      	ldr	r2, [pc, #36]	@ (8001ad4 <HAL_I2C_MspDeInit+0x34>)
 8001aae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8001ab0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8001ab6:	4c08      	ldr	r4, [pc, #32]	@ (8001ad8 <HAL_I2C_MspDeInit+0x38>)
 8001ab8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001abc:	4620      	mov	r0, r4
 8001abe:	f000 fce5 	bl	800248c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8001ac2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001ac6:	4620      	mov	r0, r4
 8001ac8:	f000 fce0 	bl	800248c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001acc:	bd10      	pop	{r4, pc}
 8001ace:	bf00      	nop
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400

08001adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001adc:	b510      	push	{r4, lr}
 8001ade:	b0ac      	sub	sp, #176	@ 0xb0
 8001ae0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	9127      	str	r1, [sp, #156]	@ 0x9c
 8001ae6:	9128      	str	r1, [sp, #160]	@ 0xa0
 8001ae8:	9129      	str	r1, [sp, #164]	@ 0xa4
 8001aea:	912a      	str	r1, [sp, #168]	@ 0xa8
 8001aec:	912b      	str	r1, [sp, #172]	@ 0xac
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aee:	2294      	movs	r2, #148	@ 0x94
 8001af0:	a802      	add	r0, sp, #8
 8001af2:	f005 feca 	bl	800788a <memset>
  if(huart->Instance==USART1)
 8001af6:	6822      	ldr	r2, [r4, #0]
 8001af8:	4b17      	ldr	r3, [pc, #92]	@ (8001b58 <HAL_UART_MspInit+0x7c>)
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d001      	beq.n	8001b02 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001afe:	b02c      	add	sp, #176	@ 0xb0
 8001b00:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b06:	a802      	add	r0, sp, #8
 8001b08:	f002 f8fe 	bl	8003d08 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	bb08      	cbnz	r0, 8001b52 <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_UART_MspInit+0x80>)
 8001b10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b16:	661a      	str	r2, [r3, #96]	@ 0x60
 8001b18:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b1a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001b1e:	9200      	str	r2, [sp, #0]
 8001b20:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001b24:	f042 0202 	orr.w	r2, r2, #2
 8001b28:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b34:	23c0      	movs	r3, #192	@ 0xc0
 8001b36:	9327      	str	r3, [sp, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9328      	str	r3, [sp, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9329      	str	r3, [sp, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b40:	2303      	movs	r3, #3
 8001b42:	932a      	str	r3, [sp, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b44:	2307      	movs	r3, #7
 8001b46:	932b      	str	r3, [sp, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b48:	a927      	add	r1, sp, #156	@ 0x9c
 8001b4a:	4805      	ldr	r0, [pc, #20]	@ (8001b60 <HAL_UART_MspInit+0x84>)
 8001b4c:	f000 fbb0 	bl	80022b0 <HAL_GPIO_Init>
}
 8001b50:	e7d5      	b.n	8001afe <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001b52:	f7ff fcd3 	bl	80014fc <Error_Handler>
 8001b56:	e7da      	b.n	8001b0e <HAL_UART_MspInit+0x32>
 8001b58:	40013800 	.word	0x40013800
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48000400 	.word	0x48000400

08001b64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b64:	b530      	push	{r4, r5, lr}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	4604      	mov	r4, r0
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_InitTick+0x8c>)
 8001b6c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b6e:	f042 0210 	orr.w	r2, r2, #16
 8001b72:	659a      	str	r2, [r3, #88]	@ 0x58
 8001b74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b76:	f003 0310 	and.w	r3, r3, #16
 8001b7a:	9301      	str	r3, [sp, #4]
 8001b7c:	9b01      	ldr	r3, [sp, #4]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b7e:	a902      	add	r1, sp, #8
 8001b80:	a803      	add	r0, sp, #12
 8001b82:	f001 ff4b 	bl	8003a1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b86:	9b06      	ldr	r3, [sp, #24]
 8001b88:	b9cb      	cbnz	r3, 8001bbe <HAL_InitTick+0x5a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b8a:	f001 ff23 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8001b8e:	4603      	mov	r3, r0

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b90:	4818      	ldr	r0, [pc, #96]	@ (8001bf4 <HAL_InitTick+0x90>)
 8001b92:	4a19      	ldr	r2, [pc, #100]	@ (8001bf8 <HAL_InitTick+0x94>)
 8001b94:	6002      	str	r2, [r0, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b96:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b9a:	60c2      	str	r2, [r0, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b9c:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <HAL_InitTick+0x98>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0c9b      	lsrs	r3, r3, #18
 8001ba4:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ba6:	6043      	str	r3, [r0, #4]
  htim6.Init.ClockDivision = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	6103      	str	r3, [r0, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bac:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bae:	6183      	str	r3, [r0, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001bb0:	f002 fcd8 	bl	8004564 <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001bb4:	4605      	mov	r5, r0
 8001bb6:	b130      	cbz	r0, 8001bc6 <HAL_InitTick+0x62>
    }
  }

 /* Return function status */
  return status;
}
 8001bb8:	4628      	mov	r0, r5
 8001bba:	b009      	add	sp, #36	@ 0x24
 8001bbc:	bd30      	pop	{r4, r5, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001bbe:	f001 ff09 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
 8001bc2:	0043      	lsls	r3, r0, #1
 8001bc4:	e7e4      	b.n	8001b90 <HAL_InitTick+0x2c>
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001bc6:	480b      	ldr	r0, [pc, #44]	@ (8001bf4 <HAL_InitTick+0x90>)
 8001bc8:	f002 fb14 	bl	80041f4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 8001bcc:	4605      	mov	r5, r0
 8001bce:	2800      	cmp	r0, #0
 8001bd0:	d1f2      	bne.n	8001bb8 <HAL_InitTick+0x54>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001bd2:	2036      	movs	r0, #54	@ 0x36
 8001bd4:	f000 fb5e 	bl	8002294 <HAL_NVIC_EnableIRQ>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	2c0f      	cmp	r4, #15
 8001bda:	d901      	bls.n	8001be0 <HAL_InitTick+0x7c>
        status = HAL_ERROR;
 8001bdc:	2501      	movs	r5, #1
 8001bde:	e7eb      	b.n	8001bb8 <HAL_InitTick+0x54>
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	4621      	mov	r1, r4
 8001be4:	2036      	movs	r0, #54	@ 0x36
 8001be6:	f000 fb1f 	bl	8002228 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bea:	4b05      	ldr	r3, [pc, #20]	@ (8001c00 <HAL_InitTick+0x9c>)
 8001bec:	601c      	str	r4, [r3, #0]
 8001bee:	e7e3      	b.n	8001bb8 <HAL_InitTick+0x54>
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	2000088c 	.word	0x2000088c
 8001bf8:	40001000 	.word	0x40001000
 8001bfc:	431bde83 	.word	0x431bde83
 8001c00:	200000c4 	.word	0x200000c4

08001c04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c04:	e7fe      	b.n	8001c04 <NMI_Handler>

08001c06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler>

08001c08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler>

08001c0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0a:	e7fe      	b.n	8001c0a <BusFault_Handler>

08001c0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <UsageFault_Handler>

08001c0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	4770      	bx	lr

08001c10 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c12:	4802      	ldr	r0, [pc, #8]	@ (8001c1c <TIM6_DAC_IRQHandler+0xc>)
 8001c14:	f002 fb38 	bl	8004288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c18:	bd08      	pop	{r3, pc}
 8001c1a:	bf00      	nop
 8001c1c:	2000088c 	.word	0x2000088c

08001c20 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001c20:	2001      	movs	r0, #1
 8001c22:	4770      	bx	lr

08001c24 <_kill>:

int _kill(int pid, int sig)
{
 8001c24:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c26:	f005 fe83 	bl	8007930 <__errno>
 8001c2a:	2316      	movs	r3, #22
 8001c2c:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001c2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c32:	bd08      	pop	{r3, pc}

08001c34 <_exit>:

void _exit (int status)
{
 8001c34:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001c36:	f005 fe7b 	bl	8007930 <__errno>
 8001c3a:	2316      	movs	r3, #22
 8001c3c:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0xa>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	1e16      	subs	r6, r2, #0
 8001c44:	dd07      	ble.n	8001c56 <_read+0x16>
 8001c46:	460c      	mov	r4, r1
 8001c48:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8001c4a:	f3af 8000 	nop.w
 8001c4e:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c52:	42a5      	cmp	r5, r4
 8001c54:	d1f9      	bne.n	8001c4a <_read+0xa>
  }

  return len;
}
 8001c56:	4630      	mov	r0, r6
 8001c58:	bd70      	pop	{r4, r5, r6, pc}

08001c5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c5a:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5c:	1e16      	subs	r6, r2, #0
 8001c5e:	dd07      	ble.n	8001c70 <_write+0x16>
 8001c60:	460c      	mov	r4, r1
 8001c62:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8001c64:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001c68:	f7ff fa70 	bl	800114c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	42a5      	cmp	r5, r4
 8001c6e:	d1f9      	bne.n	8001c64 <_write+0xa>
  }
  return len;
}
 8001c70:	4630      	mov	r0, r6
 8001c72:	bd70      	pop	{r4, r5, r6, pc}

08001c74 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	4770      	bx	lr

08001c7a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001c7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c7e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001c80:	2000      	movs	r0, #0
 8001c82:	4770      	bx	lr

08001c84 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001c84:	2001      	movs	r0, #1
 8001c86:	4770      	bx	lr

08001c88 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001c88:	2000      	movs	r0, #0
 8001c8a:	4770      	bx	lr

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b508      	push	{r3, lr}
 8001c8e:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c90:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc4 <_sbrk+0x38>)
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	b152      	cbz	r2, 8001cac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c96:	4a0b      	ldr	r2, [pc, #44]	@ (8001cc4 <_sbrk+0x38>)
 8001c98:	6810      	ldr	r0, [r2, #0]
 8001c9a:	4403      	add	r3, r0
 8001c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <_sbrk+0x3c>)
 8001c9e:	490b      	ldr	r1, [pc, #44]	@ (8001ccc <_sbrk+0x40>)
 8001ca0:	1a52      	subs	r2, r2, r1
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d806      	bhi.n	8001cb4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001ca6:	4a07      	ldr	r2, [pc, #28]	@ (8001cc4 <_sbrk+0x38>)
 8001ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001caa:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001cac:	4a05      	ldr	r2, [pc, #20]	@ (8001cc4 <_sbrk+0x38>)
 8001cae:	4908      	ldr	r1, [pc, #32]	@ (8001cd0 <_sbrk+0x44>)
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	e7f0      	b.n	8001c96 <_sbrk+0xa>
    errno = ENOMEM;
 8001cb4:	f005 fe3c 	bl	8007930 <__errno>
 8001cb8:	230c      	movs	r3, #12
 8001cba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	e7f3      	b.n	8001caa <_sbrk+0x1e>
 8001cc2:	bf00      	nop
 8001cc4:	200008d8 	.word	0x200008d8
 8001cc8:	200a0000 	.word	0x200a0000
 8001ccc:	00000400 	.word	0x00000400
 8001cd0:	20001738 	.word	0x20001738

08001cd4 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cd4:	4a03      	ldr	r2, [pc, #12]	@ (8001ce4 <SystemInit+0x10>)
 8001cd6:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001cda:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cde:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ce8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cec:	f7ff fff2 	bl	8001cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	@ (8001d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	@ (8001d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	@ (8001d2c <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	@ (8001d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	@ (8001d34 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d16:	f005 fe11 	bl	800793c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d1a:	f7ff fc33 	bl	8001584 <main>

08001d1e <LoopForever>:

LoopForever:
    b LoopForever
 8001d1e:	e7fe      	b.n	8001d1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	20000294 	.word	0x20000294
  ldr r2, =_sidata
 8001d2c:	0800be78 	.word	0x0800be78
  ldr r2, =_sbss
 8001d30:	20000294 	.word	0x20000294
  ldr r4, =_ebss
 8001d34:	20001734 	.word	0x20001734

08001d38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC1_IRQHandler>

08001d3a <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8001d3a:	b500      	push	{lr}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	ab02      	add	r3, sp, #8
 8001d40:	e903 0003 	stmdb	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8001d44:	f89d 2000 	ldrb.w	r2, [sp]
 8001d48:	2120      	movs	r1, #32
 8001d4a:	203c      	movs	r0, #60	@ 0x3c
 8001d4c:	f7ff fd74 	bl	8001838 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8001d50:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001d54:	2121      	movs	r1, #33	@ 0x21
 8001d56:	203c      	movs	r0, #60	@ 0x3c
 8001d58:	f7ff fd6e 	bl	8001838 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8001d5c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8001d60:	2122      	movs	r1, #34	@ 0x22
 8001d62:	203c      	movs	r0, #60	@ 0x3c
 8001d64:	f7ff fd68 	bl	8001838 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8001d68:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001d6c:	2123      	movs	r1, #35	@ 0x23
 8001d6e:	203c      	movs	r0, #60	@ 0x3c
 8001d70:	f7ff fd62 	bl	8001838 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8001d74:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8001d78:	2124      	movs	r1, #36	@ 0x24
 8001d7a:	203c      	movs	r0, #60	@ 0x3c
 8001d7c:	f7ff fd5c 	bl	8001838 <SENSOR_IO_Write>
}
 8001d80:	b003      	add	sp, #12
 8001d82:	f85d fb04 	ldr.w	pc, [sp], #4

08001d86 <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8001d86:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001d88:	2122      	movs	r1, #34	@ 0x22
 8001d8a:	203c      	movs	r0, #60	@ 0x3c
 8001d8c:	f7ff fd72 	bl	8001874 <SENSOR_IO_Read>

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8001d90:	f000 02fc 	and.w	r2, r0, #252	@ 0xfc

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001d94:	f042 0203 	orr.w	r2, r2, #3
 8001d98:	2122      	movs	r1, #34	@ 0x22
 8001d9a:	203c      	movs	r0, #60	@ 0x3c
 8001d9c:	f7ff fd4c 	bl	8001838 <SENSOR_IO_Write>
}
 8001da0:	bd08      	pop	{r3, pc}

08001da2 <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8001da2:	b510      	push	{r4, lr}
 8001da4:	4604      	mov	r4, r0
  uint8_t ctrl = 0;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8001da6:	2122      	movs	r1, #34	@ 0x22
 8001da8:	203c      	movs	r0, #60	@ 0x3c
 8001daa:	f7ff fd63 	bl	8001874 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8001dae:	f000 02df 	and.w	r2, r0, #223	@ 0xdf

  /* Set Low Power Mode */
  if(status)
 8001db2:	b10c      	cbz	r4, 8001db8 <LIS3MDL_MagLowPower+0x16>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8001db4:	f042 0220 	orr.w	r2, r2, #32
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8001db8:	2122      	movs	r1, #34	@ 0x22
 8001dba:	203c      	movs	r0, #60	@ 0x3c
 8001dbc:	f7ff fd3c 	bl	8001838 <SENSOR_IO_Write>
}
 8001dc0:	bd10      	pop	{r4, pc}

08001dc2 <LIS3MDL_MagReadID>:
{
 8001dc2:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 8001dc4:	f7ff fd30 	bl	8001828 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8001dc8:	210f      	movs	r1, #15
 8001dca:	203c      	movs	r0, #60	@ 0x3c
 8001dcc:	f7ff fd52 	bl	8001874 <SENSOR_IO_Read>
}
 8001dd0:	bd08      	pop	{r3, pc}
	...

08001dd4 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8001dd4:	b530      	push	{r4, r5, lr}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	4605      	mov	r5, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8001dda:	2121      	movs	r1, #33	@ 0x21
 8001ddc:	203c      	movs	r0, #60	@ 0x3c
 8001dde:	f7ff fd49 	bl	8001874 <SENSOR_IO_Read>
 8001de2:	4604      	mov	r4, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8001de4:	2306      	movs	r3, #6
 8001de6:	466a      	mov	r2, sp
 8001de8:	21a8      	movs	r1, #168	@ 0xa8
 8001dea:	203c      	movs	r0, #60	@ 0x3c
 8001dec:	f7ff fd64 	bl	80018b8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8001df0:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001df4:	f89d 3000 	ldrb.w	r3, [sp]
 8001df8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001dfc:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001e00:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001e04:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8001e08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e0c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8001e10:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8001e14:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001e18:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001e1c:	f8ad 300c 	strh.w	r3, [sp, #12]
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8001e20:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8001e24:	2c40      	cmp	r4, #64	@ 0x40
 8001e26:	d027      	beq.n	8001e78 <LIS3MDL_MagReadXYZ+0xa4>
 8001e28:	d81d      	bhi.n	8001e66 <LIS3MDL_MagReadXYZ+0x92>
 8001e2a:	b344      	cbz	r4, 8001e7e <LIS3MDL_MagReadXYZ+0xaa>
  float sensitivity = 0;
 8001e2c:	2c20      	cmp	r4, #32
 8001e2e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001e84 <LIS3MDL_MagReadXYZ+0xb0>
 8001e32:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8001e88 <LIS3MDL_MagReadXYZ+0xb4>
 8001e36:	bf18      	it	ne
 8001e38:	eeb0 7a67 	vmovne.f32	s14, s15
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
    break;    
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8001e3c:	aa02      	add	r2, sp, #8
 8001e3e:	1eab      	subs	r3, r5, #2
 8001e40:	1d28      	adds	r0, r5, #4
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8001e42:	f932 1b02 	ldrsh.w	r1, [r2], #2
 8001e46:	ee07 1a90 	vmov	s15, r1
 8001e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e56:	ee17 1a90 	vmov	r1, s15
 8001e5a:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 8001e5e:	4283      	cmp	r3, r0
 8001e60:	d1ef      	bne.n	8001e42 <LIS3MDL_MagReadXYZ+0x6e>
  }
}
 8001e62:	b005      	add	sp, #20
 8001e64:	bd30      	pop	{r4, r5, pc}
  float sensitivity = 0;
 8001e66:	2c60      	cmp	r4, #96	@ 0x60
 8001e68:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001e8c <LIS3MDL_MagReadXYZ+0xb8>
 8001e6c:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001e88 <LIS3MDL_MagReadXYZ+0xb4>
 8001e70:	bf18      	it	ne
 8001e72:	eeb0 7a67 	vmovne.f32	s14, s15
 8001e76:	e7e1      	b.n	8001e3c <LIS3MDL_MagReadXYZ+0x68>
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8001e78:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001e90 <LIS3MDL_MagReadXYZ+0xbc>
 8001e7c:	e7de      	b.n	8001e3c <LIS3MDL_MagReadXYZ+0x68>
  switch(ctrlm & 0x60)
 8001e7e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001e94 <LIS3MDL_MagReadXYZ+0xc0>
 8001e82:	e7db      	b.n	8001e3c <LIS3MDL_MagReadXYZ+0x68>
 8001e84:	3e947ae1 	.word	0x3e947ae1
 8001e88:	00000000 	.word	0x00000000
 8001e8c:	3f147ae1 	.word	0x3f147ae1
 8001e90:	3edc28f6 	.word	0x3edc28f6
 8001e94:	3e0f5c29 	.word	0x3e0f5c29

08001e98 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp = 0;
  uint8_t i;

  for(i = 0; i < 3; i++)
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8001e9a:	b2c5      	uxtb	r5, r0
 8001e9c:	2128      	movs	r1, #40	@ 0x28
 8001e9e:	4628      	mov	r0, r5
 8001ea0:	f7ff fce8 	bl	8001874 <SENSOR_IO_Read>
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	2129      	movs	r1, #41	@ 0x29
 8001ea8:	4628      	mov	r0, r5
 8001eaa:	f7ff fce3 	bl	8001874 <SENSOR_IO_Read>
 8001eae:	4606      	mov	r6, r0
 8001eb0:	212a      	movs	r1, #42	@ 0x2a
 8001eb2:	4628      	mov	r0, r5
 8001eb4:	f7ff fcde 	bl	8001874 <SENSOR_IO_Read>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8001eb8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8001ebc:	ea44 4000 	orr.w	r0, r4, r0, lsl #16

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8001ec0:	f410 0f00 	tst.w	r0, #8388608	@ 0x800000
    tmp |= 0xFF000000;
 8001ec4:	bf18      	it	ne
 8001ec6:	f040 407f 	orrne.w	r0, r0, #4278190080	@ 0xff000000

  raw_press = ((int32_t)tmp);

  raw_press = (raw_press * 100) / 4096;
 8001eca:	2364      	movs	r3, #100	@ 0x64
 8001ecc:	fb03 f000 	mul.w	r0, r3, r0
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	bfb8      	it	lt
 8001ed4:	f600 70ff 	addwlt	r0, r0, #4095	@ 0xfff
 8001ed8:	1300      	asrs	r0, r0, #12

  return (float)((float)raw_press / 100.0f);
 8001eda:	ee07 0a90 	vmov	s15, r0
 8001ede:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8001ee2:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8001eec <LPS22HB_P_ReadPressure+0x54>
 8001ee6:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8001eea:	bd70      	pop	{r4, r5, r6, pc}
 8001eec:	42c80000 	.word	0x42c80000

08001ef0 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8001ef0:	b510      	push	{r4, lr}
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8001ef2:	b2c4      	uxtb	r4, r0
 8001ef4:	211a      	movs	r1, #26
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff fcbc 	bl	8001874 <SENSOR_IO_Read>

  tmp &= ~LPS22HB_LCEN_MASK;
 8001efc:	f000 02fe 	and.w	r2, r0, #254	@ 0xfe
  tmp |= (uint8_t)0x01; /* Set low current mode */

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8001f00:	f042 0201 	orr.w	r2, r2, #1
 8001f04:	211a      	movs	r1, #26
 8001f06:	4620      	mov	r0, r4
 8001f08:	f7ff fc96 	bl	8001838 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8001f0c:	2110      	movs	r1, #16
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff fcb0 	bl	8001874 <SENSOR_IO_Read>
  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8001f14:	f000 028d 	and.w	r2, r0, #141	@ 0x8d
  tmp |= ((uint8_t)0x02);

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8001f18:	f042 0232 	orr.w	r2, r2, #50	@ 0x32
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	4620      	mov	r0, r4
 8001f20:	f7ff fc8a 	bl	8001838 <SENSOR_IO_Write>
}  
 8001f24:	bd10      	pop	{r4, pc}

08001f26 <LPS22HB_P_Init>:
{
 8001f26:	b508      	push	{r3, lr}
  LPS22HB_Init(DeviceAddr);
 8001f28:	f7ff ffe2 	bl	8001ef0 <LPS22HB_Init>
}
 8001f2c:	bd08      	pop	{r3, pc}

08001f2e <LPS22HB_P_ReadID>:
{  
 8001f2e:	b510      	push	{r4, lr}
 8001f30:	4604      	mov	r4, r0
  SENSOR_IO_Init();  
 8001f32:	f7ff fc79 	bl	8001828 <SENSOR_IO_Init>
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8001f36:	210f      	movs	r1, #15
 8001f38:	b2e0      	uxtb	r0, r4
 8001f3a:	f7ff fc9b 	bl	8001874 <SENSOR_IO_Read>
}
 8001f3e:	bd10      	pop	{r4, pc}

08001f40 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f44:	2110      	movs	r1, #16
 8001f46:	20d4      	movs	r0, #212	@ 0xd4
 8001f48:	f7ff fc94 	bl	8001874 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001f4c:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001f50:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8001f52:	b2d2      	uxtb	r2, r2
 8001f54:	2110      	movs	r1, #16
 8001f56:	20d4      	movs	r0, #212	@ 0xd4
 8001f58:	f7ff fc6e 	bl	8001838 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001f5c:	2112      	movs	r1, #18
 8001f5e:	20d4      	movs	r0, #212	@ 0xd4
 8001f60:	f7ff fc88 	bl	8001874 <SENSOR_IO_Read>

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001f64:	f000 02bb 	and.w	r2, r0, #187	@ 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001f68:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001f6c:	2112      	movs	r1, #18
 8001f6e:	20d4      	movs	r0, #212	@ 0xd4
 8001f70:	f7ff fc62 	bl	8001838 <SENSOR_IO_Write>
}
 8001f74:	bd10      	pop	{r4, pc}

08001f76 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8001f76:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8001f78:	2110      	movs	r1, #16
 8001f7a:	20d4      	movs	r0, #212	@ 0xd4
 8001f7c:	f7ff fc7a 	bl	8001874 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8001f80:	f000 020f 	and.w	r2, r0, #15
 8001f84:	2110      	movs	r1, #16
 8001f86:	20d4      	movs	r0, #212	@ 0xd4
 8001f88:	f7ff fc56 	bl	8001838 <SENSOR_IO_Write>
}
 8001f8c:	bd08      	pop	{r3, pc}

08001f8e <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8001f8e:	b510      	push	{r4, lr}
 8001f90:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8001f92:	2115      	movs	r1, #21
 8001f94:	20d4      	movs	r0, #212	@ 0xd4
 8001f96:	f7ff fc6d 	bl	8001874 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8001f9a:	f000 02ef 	and.w	r2, r0, #239	@ 0xef

  /* Set Low Power Mode */
  if(status)
 8001f9e:	b10c      	cbz	r4, 8001fa4 <LSM6DSL_AccLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8001fa0:	f042 0210 	orr.w	r2, r2, #16
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8001fa4:	2115      	movs	r1, #21
 8001fa6:	20d4      	movs	r0, #212	@ 0xd4
 8001fa8:	f7ff fc46 	bl	8001838 <SENSOR_IO_Write>
}
 8001fac:	bd10      	pop	{r4, pc}

08001fae <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8001fae:	b510      	push	{r4, lr}
 8001fb0:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001fb2:	2111      	movs	r1, #17
 8001fb4:	20d4      	movs	r0, #212	@ 0xd4
 8001fb6:	f7ff fc5d 	bl	8001874 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
  tmp &= ~(0xFC);
 8001fba:	f000 0203 	and.w	r2, r0, #3
  tmp |= ctrl;
 8001fbe:	4322      	orrs	r2, r4
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 8001fc0:	b2d2      	uxtb	r2, r2
 8001fc2:	2111      	movs	r1, #17
 8001fc4:	20d4      	movs	r0, #212	@ 0xd4
 8001fc6:	f7ff fc37 	bl	8001838 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8001fca:	2112      	movs	r1, #18
 8001fcc:	20d4      	movs	r0, #212	@ 0xd4
 8001fce:	f7ff fc51 	bl	8001874 <SENSOR_IO_Read>

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
  tmp &= ~(0x44);
 8001fd2:	f000 02bb 	and.w	r2, r0, #187	@ 0xbb
  tmp |= ctrl; 
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8001fd6:	ea42 2214 	orr.w	r2, r2, r4, lsr #8
 8001fda:	2112      	movs	r1, #18
 8001fdc:	20d4      	movs	r0, #212	@ 0xd4
 8001fde:	f7ff fc2b 	bl	8001838 <SENSOR_IO_Write>
}
 8001fe2:	bd10      	pop	{r4, pc}

08001fe4 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8001fe4:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8001fe6:	2111      	movs	r1, #17
 8001fe8:	20d4      	movs	r0, #212	@ 0xd4
 8001fea:	f7ff fc43 	bl	8001874 <SENSOR_IO_Read>

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8001fee:	f000 020f 	and.w	r2, r0, #15
 8001ff2:	2111      	movs	r1, #17
 8001ff4:	20d4      	movs	r0, #212	@ 0xd4
 8001ff6:	f7ff fc1f 	bl	8001838 <SENSOR_IO_Write>
}
 8001ffa:	bd08      	pop	{r3, pc}

08001ffc <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 8001ffc:	b510      	push	{r4, lr}
 8001ffe:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8002000:	2116      	movs	r1, #22
 8002002:	20d4      	movs	r0, #212	@ 0xd4
 8002004:	f7ff fc36 	bl	8001874 <SENSOR_IO_Read>

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8002008:	f000 027f 	and.w	r2, r0, #127	@ 0x7f

  /* Set Low Power Mode */
  if(status)
 800200c:	b10c      	cbz	r4, 8002012 <LSM6DSL_GyroLowPower+0x16>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800200e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 8002012:	2116      	movs	r1, #22
 8002014:	20d4      	movs	r0, #212	@ 0xd4
 8002016:	f7ff fc0f 	bl	8001838 <SENSOR_IO_Write>
}
 800201a:	bd10      	pop	{r4, pc}

0800201c <LSM6DSL_AccReadID>:
{  
 800201c:	b508      	push	{r3, lr}
  SENSOR_IO_Init();
 800201e:	f7ff fc03 	bl	8001828 <SENSOR_IO_Init>
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002022:	210f      	movs	r1, #15
 8002024:	20d4      	movs	r0, #212	@ 0xd4
 8002026:	f7ff fc25 	bl	8001874 <SENSOR_IO_Read>
}
 800202a:	bd08      	pop	{r3, pc}

0800202c <LSM6DSL_GyroReadID>:
{
 800202c:	b508      	push	{r3, lr}
  SENSOR_IO_Init();  
 800202e:	f7ff fbfb 	bl	8001828 <SENSOR_IO_Init>
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 8002032:	210f      	movs	r1, #15
 8002034:	20d4      	movs	r0, #212	@ 0xd4
 8002036:	f7ff fc1d 	bl	8001874 <SENSOR_IO_Read>
}
 800203a:	bd08      	pop	{r3, pc}

0800203c <LSM6DSL_AccReadXYZ>:
{
 800203c:	b530      	push	{r4, r5, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	4604      	mov	r4, r0
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002042:	2110      	movs	r1, #16
 8002044:	20d4      	movs	r0, #212	@ 0xd4
 8002046:	f7ff fc15 	bl	8001874 <SENSOR_IO_Read>
 800204a:	4605      	mov	r5, r0
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800204c:	2306      	movs	r3, #6
 800204e:	466a      	mov	r2, sp
 8002050:	2128      	movs	r1, #40	@ 0x28
 8002052:	20d4      	movs	r0, #212	@ 0xd4
 8002054:	f7ff fc30 	bl	80018b8 <SENSOR_IO_ReadMultiple>
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002058:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800205c:	f89d 3000 	ldrb.w	r3, [sp]
 8002060:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002064:	f8ad 3008 	strh.w	r3, [sp, #8]
 8002068:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800206c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002070:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002074:	f8ad 300a 	strh.w	r3, [sp, #10]
 8002078:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800207c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002080:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002084:	f8ad 300c 	strh.w	r3, [sp, #12]
  switch(ctrlx & 0x0C)
 8002088:	f005 000c 	and.w	r0, r5, #12
 800208c:	280c      	cmp	r0, #12
 800208e:	d808      	bhi.n	80020a2 <LSM6DSL_AccReadXYZ+0x66>
 8002090:	e8df f000 	tbb	[pc, r0]
 8002094:	07070727 	.word	0x07070727
 8002098:	07070724 	.word	0x07070724
 800209c:	0707071e 	.word	0x0707071e
 80020a0:	21          	.byte	0x21
 80020a1:	00          	.byte	0x00
  float sensitivity = 0;
 80020a2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80020e8 <LSM6DSL_AccReadXYZ+0xac>
  for(i=0; i<3; i++)
 80020a6:	aa02      	add	r2, sp, #8
 80020a8:	1ea3      	subs	r3, r4, #2
 80020aa:	1d20      	adds	r0, r4, #4
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80020ac:	f932 1b02 	ldrsh.w	r1, [r2], #2
 80020b0:	ee07 1a90 	vmov	s15, r1
 80020b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020c0:	ee17 1a90 	vmov	r1, s15
 80020c4:	f823 1f02 	strh.w	r1, [r3, #2]!
  for(i=0; i<3; i++)
 80020c8:	4283      	cmp	r3, r0
 80020ca:	d1ef      	bne.n	80020ac <LSM6DSL_AccReadXYZ+0x70>
}
 80020cc:	b005      	add	sp, #20
 80020ce:	bd30      	pop	{r4, r5, pc}
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80020d0:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80020ec <LSM6DSL_AccReadXYZ+0xb0>
    break;
 80020d4:	e7e7      	b.n	80020a6 <LSM6DSL_AccReadXYZ+0x6a>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80020d6:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 80020f0 <LSM6DSL_AccReadXYZ+0xb4>
    break;
 80020da:	e7e4      	b.n	80020a6 <LSM6DSL_AccReadXYZ+0x6a>
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80020dc:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80020f4 <LSM6DSL_AccReadXYZ+0xb8>
    break;    
 80020e0:	e7e1      	b.n	80020a6 <LSM6DSL_AccReadXYZ+0x6a>
  switch(ctrlx & 0x0C)
 80020e2:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80020f8 <LSM6DSL_AccReadXYZ+0xbc>
 80020e6:	e7de      	b.n	80020a6 <LSM6DSL_AccReadXYZ+0x6a>
 80020e8:	00000000 	.word	0x00000000
 80020ec:	3df9db23 	.word	0x3df9db23
 80020f0:	3e79db23 	.word	0x3e79db23
 80020f4:	3ef9db23 	.word	0x3ef9db23
 80020f8:	3d79db23 	.word	0x3d79db23

080020fc <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80020fc:	b530      	push	{r4, r5, lr}
 80020fe:	b083      	sub	sp, #12
 8002100:	4605      	mov	r5, r0
  uint8_t buffer[6];
  uint8_t i = 0;
  float sensitivity = 0;
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8002102:	2111      	movs	r1, #17
 8002104:	20d4      	movs	r0, #212	@ 0xd4
 8002106:	f7ff fbb5 	bl	8001874 <SENSOR_IO_Read>
 800210a:	4604      	mov	r4, r0
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800210c:	2306      	movs	r3, #6
 800210e:	466a      	mov	r2, sp
 8002110:	2122      	movs	r1, #34	@ 0x22
 8002112:	20d4      	movs	r0, #212	@ 0xd4
 8002114:	f7ff fbd0 	bl	80018b8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002118:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800211c:	f89d 3000 	ldrb.w	r3, [sp]
 8002120:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002124:	b21b      	sxth	r3, r3
 8002126:	ee06 3a90 	vmov	s13, r3
 800212a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800212e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8002132:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002136:	b21b      	sxth	r3, r3
 8002138:	ee07 3a10 	vmov	s14, r3
 800213c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8002140:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002144:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8002148:	b21b      	sxth	r3, r3
 800214a:	ee07 3a90 	vmov	s15, r3
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800214e:	f004 040c 	and.w	r4, r4, #12
 8002152:	2c0c      	cmp	r4, #12
 8002154:	d808      	bhi.n	8002168 <LSM6DSL_GyroReadXYZAngRate+0x6c>
 8002156:	e8df f004 	tbb	[pc, r4]
 800215a:	0726      	.short	0x0726
 800215c:	071d0707 	.word	0x071d0707
 8002160:	07200707 	.word	0x07200707
 8002164:	0707      	.short	0x0707
 8002166:	23          	.byte	0x23
 8002167:	00          	.byte	0x00
  float sensitivity = 0;
 8002168:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 80021ac <LSM6DSL_GyroReadXYZAngRate+0xb0>
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800216c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002170:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002174:	edc5 6a00 	vstr	s13, [r5]
 8002178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800217c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8002180:	ed85 7a01 	vstr	s14, [r5, #4]
 8002184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002188:	ee67 7a86 	vmul.f32	s15, s15, s12
 800218c:	edc5 7a02 	vstr	s15, [r5, #8]
  }
}
 8002190:	b003      	add	sp, #12
 8002192:	bd30      	pop	{r4, r5, pc}
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8002194:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80021b0 <LSM6DSL_GyroReadXYZAngRate+0xb4>
    break;
 8002198:	e7e8      	b.n	800216c <LSM6DSL_GyroReadXYZAngRate+0x70>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800219a:	ed9f 6a06 	vldr	s12, [pc, #24]	@ 80021b4 <LSM6DSL_GyroReadXYZAngRate+0xb8>
    break;
 800219e:	e7e5      	b.n	800216c <LSM6DSL_GyroReadXYZAngRate+0x70>
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80021a0:	ed9f 6a05 	vldr	s12, [pc, #20]	@ 80021b8 <LSM6DSL_GyroReadXYZAngRate+0xbc>
    break;    
 80021a4:	e7e2      	b.n	800216c <LSM6DSL_GyroReadXYZAngRate+0x70>
  switch(ctrlg & 0x0C)
 80021a6:	ed9f 6a05 	vldr	s12, [pc, #20]	@ 80021bc <LSM6DSL_GyroReadXYZAngRate+0xc0>
 80021aa:	e7df      	b.n	800216c <LSM6DSL_GyroReadXYZAngRate+0x70>
 80021ac:	00000000 	.word	0x00000000
 80021b0:	418c0000 	.word	0x418c0000
 80021b4:	420c0000 	.word	0x420c0000
 80021b8:	428c0000 	.word	0x428c0000
 80021bc:	410c0000 	.word	0x410c0000

080021c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c0:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c2:	2003      	movs	r0, #3
 80021c4:	f000 f81e 	bl	8002204 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c8:	200f      	movs	r0, #15
 80021ca:	f7ff fccb 	bl	8001b64 <HAL_InitTick>
 80021ce:	b110      	cbz	r0, 80021d6 <HAL_Init+0x16>
  {
    status = HAL_ERROR;
 80021d0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80021d2:	4620      	mov	r0, r4
 80021d4:	bd10      	pop	{r4, pc}
 80021d6:	4604      	mov	r4, r0
    HAL_MspInit();
 80021d8:	f7ff fbfc 	bl	80019d4 <HAL_MspInit>
 80021dc:	e7f9      	b.n	80021d2 <HAL_Init+0x12>
	...

080021e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80021e0:	4a03      	ldr	r2, [pc, #12]	@ (80021f0 <HAL_IncTick+0x10>)
 80021e2:	6811      	ldr	r1, [r2, #0]
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_IncTick+0x14>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	440b      	add	r3, r1
 80021ea:	6013      	str	r3, [r2, #0]
}
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	200008dc 	.word	0x200008dc
 80021f4:	200000c0 	.word	0x200000c0

080021f8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80021f8:	4b01      	ldr	r3, [pc, #4]	@ (8002200 <HAL_GetTick+0x8>)
 80021fa:	6818      	ldr	r0, [r3, #0]
}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200008dc 	.word	0x200008dc

08002204 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4907      	ldr	r1, [pc, #28]	@ (8002224 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002206:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002208:	0203      	lsls	r3, r0, #8
 800220a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8002212:	0412      	lsls	r2, r2, #16
 8002214:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8002220:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002228:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800222a:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_NVIC_SetPriority+0x64>)
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002232:	f1c3 0c07 	rsb	ip, r3, #7
 8002236:	f1bc 0f04 	cmp.w	ip, #4
 800223a:	bf28      	it	cs
 800223c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002240:	f103 0e04 	add.w	lr, r3, #4
 8002244:	f1be 0f06 	cmp.w	lr, #6
 8002248:	bf8c      	ite	hi
 800224a:	3b03      	subhi	r3, #3
 800224c:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800224e:	f04f 3eff 	mov.w	lr, #4294967295
 8002252:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002256:	ea21 010c 	bic.w	r1, r1, ip
 800225a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800225c:	fa0e fe03 	lsl.w	lr, lr, r3
 8002260:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002264:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002266:	2800      	cmp	r0, #0
 8002268:	db09      	blt.n	800227e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	0109      	lsls	r1, r1, #4
 800226c:	b2c9      	uxtb	r1, r1
 800226e:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8002272:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8002276:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800227a:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800227e:	f000 000f 	and.w	r0, r0, #15
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	b2c9      	uxtb	r1, r1
 8002286:	4b02      	ldr	r3, [pc, #8]	@ (8002290 <HAL_NVIC_SetPriority+0x68>)
 8002288:	5419      	strb	r1, [r3, r0]
 800228a:	e7f6      	b.n	800227a <HAL_NVIC_SetPriority+0x52>
 800228c:	e000ed00 	.word	0xe000ed00
 8002290:	e000ed14 	.word	0xe000ed14

08002294 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002294:	2800      	cmp	r0, #0
 8002296:	db07      	blt.n	80022a8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002298:	0941      	lsrs	r1, r0, #5
 800229a:	f000 001f 	and.w	r0, r0, #31
 800229e:	2301      	movs	r3, #1
 80022a0:	4083      	lsls	r3, r0
 80022a2:	4a02      	ldr	r2, [pc, #8]	@ (80022ac <HAL_NVIC_EnableIRQ+0x18>)
 80022a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022b0:	680b      	ldr	r3, [r1, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 80e0 	beq.w	8002478 <HAL_GPIO_Init+0x1c8>
{
 80022b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022bc:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022be:	f04f 0c00 	mov.w	ip, #0
  uint32_t position = 0x00u;
 80022c2:	4662      	mov	r2, ip
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022c4:	2501      	movs	r5, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022c6:	f04f 0e03 	mov.w	lr, #3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ca:	f04f 080f 	mov.w	r8, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022ce:	4c6b      	ldr	r4, [pc, #428]	@ (800247c <HAL_GPIO_Init+0x1cc>)
 80022d0:	e048      	b.n	8002364 <HAL_GPIO_Init+0xb4>
        temp = GPIOx->OSPEEDR;
 80022d2:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d4:	fa0e fa0c 	lsl.w	sl, lr, ip
 80022d8:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022dc:	68cb      	ldr	r3, [r1, #12]
 80022de:	fa03 f30c 	lsl.w	r3, r3, ip
 80022e2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 80022e6:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 80022e8:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	ea23 0707 	bic.w	r7, r3, r7
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ee:	684b      	ldr	r3, [r1, #4]
 80022f0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80022f4:	4093      	lsls	r3, r2
 80022f6:	433b      	orrs	r3, r7
        GPIOx->OTYPER = temp;
 80022f8:	6043      	str	r3, [r0, #4]
 80022fa:	e03e      	b.n	800237a <HAL_GPIO_Init+0xca>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022fc:	2700      	movs	r7, #0
 80022fe:	fa07 f70b 	lsl.w	r7, r7, fp
 8002302:	ea47 070a 	orr.w	r7, r7, sl
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002306:	609f      	str	r7, [r3, #8]
        temp = EXTI->RTSR1;
 8002308:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(iocurrent);
 800230a:	ea6f 0709 	mvn.w	r7, r9
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800230e:	684e      	ldr	r6, [r1, #4]
 8002310:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp &= ~(iocurrent);
 8002314:	bf0c      	ite	eq
 8002316:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 8002318:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 800231c:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR1;
 800231e:	68e3      	ldr	r3, [r4, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002320:	684e      	ldr	r6, [r1, #4]
 8002322:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        temp &= ~(iocurrent);
 8002326:	bf0c      	ite	eq
 8002328:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800232a:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->FTSR1 = temp;
 800232e:	60e3      	str	r3, [r4, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002330:	6863      	ldr	r3, [r4, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002332:	684e      	ldr	r6, [r1, #4]
 8002334:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        temp &= ~(iocurrent);
 8002338:	bf0c      	ite	eq
 800233a:	403b      	andeq	r3, r7
        {
          temp |= iocurrent;
 800233c:	ea49 0303 	orrne.w	r3, r9, r3
        }
        EXTI->EMR1 = temp;
 8002340:	6063      	str	r3, [r4, #4]

        temp = EXTI->IMR1;
 8002342:	6823      	ldr	r3, [r4, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002344:	684e      	ldr	r6, [r1, #4]
 8002346:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
        temp &= ~(iocurrent);
 800234a:	bf0c      	ite	eq
 800234c:	401f      	andeq	r7, r3
        {
          temp |= iocurrent;
 800234e:	ea49 0703 	orrne.w	r7, r9, r3
        }
        EXTI->IMR1 = temp;
 8002352:	6027      	str	r7, [r4, #0]
      }
    }

    position++;
 8002354:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	680b      	ldr	r3, [r1, #0]
 8002358:	f10c 0c02 	add.w	ip, ip, #2
 800235c:	fa33 f702 	lsrs.w	r7, r3, r2
 8002360:	f000 8087 	beq.w	8002472 <HAL_GPIO_Init+0x1c2>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002364:	fa05 f702 	lsl.w	r7, r5, r2
    if (iocurrent != 0x00u)
 8002368:	ea17 0903 	ands.w	r9, r7, r3
 800236c:	d0f2      	beq.n	8002354 <HAL_GPIO_Init+0xa4>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800236e:	684b      	ldr	r3, [r1, #4]
 8002370:	f003 0303 	and.w	r3, r3, #3
 8002374:	3b01      	subs	r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d9ab      	bls.n	80022d2 <HAL_GPIO_Init+0x22>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800237a:	684b      	ldr	r3, [r1, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d020      	beq.n	80023c6 <HAL_GPIO_Init+0x116>
        temp = GPIOx->PUPDR;
 8002384:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002386:	fa0e f30c 	lsl.w	r3, lr, ip
 800238a:	ea27 0703 	bic.w	r7, r7, r3
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238e:	688b      	ldr	r3, [r1, #8]
 8002390:	fa03 f30c 	lsl.w	r3, r3, ip
 8002394:	433b      	orrs	r3, r7
        GPIOx->PUPDR = temp;
 8002396:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002398:	684b      	ldr	r3, [r1, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d111      	bne.n	80023c6 <HAL_GPIO_Init+0x116>
        temp = GPIOx->AFR[position >> 3u];
 80023a2:	08d7      	lsrs	r7, r2, #3
 80023a4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80023a8:	6a3b      	ldr	r3, [r7, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	f002 0b07 	and.w	fp, r2, #7
 80023ae:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023b2:	fa08 fa0b 	lsl.w	sl, r8, fp
 80023b6:	ea23 0a0a 	bic.w	sl, r3, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023ba:	690b      	ldr	r3, [r1, #16]
 80023bc:	fa03 f30b 	lsl.w	r3, r3, fp
 80023c0:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3u] = temp;
 80023c4:	623b      	str	r3, [r7, #32]
      temp = GPIOx->MODER;
 80023c6:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c8:	fa0e f30c 	lsl.w	r3, lr, ip
 80023cc:	ea27 0703 	bic.w	r7, r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023d0:	684b      	ldr	r3, [r1, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	fa03 f30c 	lsl.w	r3, r3, ip
 80023da:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 80023dc:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023de:	684b      	ldr	r3, [r1, #4]
 80023e0:	f413 3f40 	tst.w	r3, #196608	@ 0x30000
 80023e4:	d0b6      	beq.n	8002354 <HAL_GPIO_Init+0xa4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023e6:	4e26      	ldr	r6, [pc, #152]	@ (8002480 <HAL_GPIO_Init+0x1d0>)
 80023e8:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6633      	str	r3, [r6, #96]	@ 0x60
 80023f0:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	9301      	str	r3, [sp, #4]
 80023f8:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80023fa:	f022 0303 	bic.w	r3, r2, #3
 80023fe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002402:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8002406:	689f      	ldr	r7, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002408:	f002 0b03 	and.w	fp, r2, #3
 800240c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002410:	fa08 fa0b 	lsl.w	sl, r8, fp
 8002414:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002418:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800241c:	f43f af6e 	beq.w	80022fc <HAL_GPIO_Init+0x4c>
 8002420:	4e18      	ldr	r6, [pc, #96]	@ (8002484 <HAL_GPIO_Init+0x1d4>)
 8002422:	42b0      	cmp	r0, r6
 8002424:	d019      	beq.n	800245a <HAL_GPIO_Init+0x1aa>
 8002426:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800242a:	42b0      	cmp	r0, r6
 800242c:	d017      	beq.n	800245e <HAL_GPIO_Init+0x1ae>
 800242e:	4f16      	ldr	r7, [pc, #88]	@ (8002488 <HAL_GPIO_Init+0x1d8>)
 8002430:	42b8      	cmp	r0, r7
 8002432:	d016      	beq.n	8002462 <HAL_GPIO_Init+0x1b2>
 8002434:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002438:	42b8      	cmp	r0, r7
 800243a:	d014      	beq.n	8002466 <HAL_GPIO_Init+0x1b6>
 800243c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002440:	42b8      	cmp	r0, r7
 8002442:	d012      	beq.n	800246a <HAL_GPIO_Init+0x1ba>
 8002444:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002448:	42b8      	cmp	r0, r7
 800244a:	d010      	beq.n	800246e <HAL_GPIO_Init+0x1be>
 800244c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002450:	42b8      	cmp	r0, r7
 8002452:	bf14      	ite	ne
 8002454:	2708      	movne	r7, #8
 8002456:	2707      	moveq	r7, #7
 8002458:	e751      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 800245a:	2701      	movs	r7, #1
 800245c:	e74f      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 800245e:	2702      	movs	r7, #2
 8002460:	e74d      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 8002462:	2703      	movs	r7, #3
 8002464:	e74b      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 8002466:	2704      	movs	r7, #4
 8002468:	e749      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 800246a:	2705      	movs	r7, #5
 800246c:	e747      	b.n	80022fe <HAL_GPIO_Init+0x4e>
 800246e:	2706      	movs	r7, #6
 8002470:	e745      	b.n	80022fe <HAL_GPIO_Init+0x4e>
  }
}
 8002472:	b003      	add	sp, #12
 8002474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010400 	.word	0x40010400
 8002480:	40021000 	.word	0x40021000
 8002484:	48000400 	.word	0x48000400
 8002488:	48000c00 	.word	0x48000c00

0800248c <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800248c:	2900      	cmp	r1, #0
 800248e:	f000 8097 	beq.w	80025c0 <HAL_GPIO_DeInit+0x134>
{
 8002492:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002496:	b083      	sub	sp, #12
 8002498:	468c      	mov	ip, r1
  uint32_t position = 0x00u;
 800249a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800249c:	f04f 0a01 	mov.w	sl, #1
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80024a0:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024a4:	f04f 0b03 	mov.w	fp, #3
        EXTI->IMR1 &= ~(iocurrent);
 80024a8:	4f46      	ldr	r7, [pc, #280]	@ (80025c4 <HAL_GPIO_DeInit+0x138>)
 80024aa:	e028      	b.n	80024fe <HAL_GPIO_DeInit+0x72>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80024ac:	f04f 0800 	mov.w	r8, #0
 80024b0:	fa08 f404 	lsl.w	r4, r8, r4
 80024b4:	9d01      	ldr	r5, [sp, #4]
 80024b6:	42ac      	cmp	r4, r5
 80024b8:	d06a      	beq.n	8002590 <HAL_GPIO_DeInit+0x104>
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80024ba:	6804      	ldr	r4, [r0, #0]
 80024bc:	0059      	lsls	r1, r3, #1
 80024be:	fa0b f101 	lsl.w	r1, fp, r1
 80024c2:	430c      	orrs	r4, r1
 80024c4:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80024c6:	08dd      	lsrs	r5, r3, #3
 80024c8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80024cc:	6a2e      	ldr	r6, [r5, #32]
 80024ce:	f003 0407 	and.w	r4, r3, #7
 80024d2:	00a4      	lsls	r4, r4, #2
 80024d4:	fa09 f404 	lsl.w	r4, r9, r4
 80024d8:	ea26 0404 	bic.w	r4, r6, r4
 80024dc:	622c      	str	r4, [r5, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024de:	6884      	ldr	r4, [r0, #8]
 80024e0:	ea24 0401 	bic.w	r4, r4, r1
 80024e4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80024e6:	6844      	ldr	r4, [r0, #4]
 80024e8:	ea24 0202 	bic.w	r2, r4, r2
 80024ec:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80024ee:	68c2      	ldr	r2, [r0, #12]
 80024f0:	ea22 0201 	bic.w	r2, r2, r1
 80024f4:	60c2      	str	r2, [r0, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80024f6:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 80024f8:	fa3c f203 	lsrs.w	r2, ip, r3
 80024fc:	d05d      	beq.n	80025ba <HAL_GPIO_DeInit+0x12e>
    iocurrent = (GPIO_Pin) & (1uL << position);
 80024fe:	fa0a f203 	lsl.w	r2, sl, r3
    if (iocurrent != 0x00u)
 8002502:	ea12 060c 	ands.w	r6, r2, ip
 8002506:	d0f6      	beq.n	80024f6 <HAL_GPIO_DeInit+0x6a>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002508:	f023 0103 	bic.w	r1, r3, #3
 800250c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8002510:	f501 3180 	add.w	r1, r1, #65536	@ 0x10000
 8002514:	688d      	ldr	r5, [r1, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002516:	f003 0403 	and.w	r4, r3, #3
 800251a:	00a4      	lsls	r4, r4, #2
 800251c:	fa09 fe04 	lsl.w	lr, r9, r4
 8002520:	ea0e 0505 	and.w	r5, lr, r5
 8002524:	9501      	str	r5, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002526:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800252a:	d0bf      	beq.n	80024ac <HAL_GPIO_DeInit+0x20>
 800252c:	4d26      	ldr	r5, [pc, #152]	@ (80025c8 <HAL_GPIO_DeInit+0x13c>)
 800252e:	42a8      	cmp	r0, r5
 8002530:	d01c      	beq.n	800256c <HAL_GPIO_DeInit+0xe0>
 8002532:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002536:	42a8      	cmp	r0, r5
 8002538:	d01b      	beq.n	8002572 <HAL_GPIO_DeInit+0xe6>
 800253a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800253e:	42a8      	cmp	r0, r5
 8002540:	d01a      	beq.n	8002578 <HAL_GPIO_DeInit+0xec>
 8002542:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8002546:	42a8      	cmp	r0, r5
 8002548:	d019      	beq.n	800257e <HAL_GPIO_DeInit+0xf2>
 800254a:	f8df 8080 	ldr.w	r8, [pc, #128]	@ 80025cc <HAL_GPIO_DeInit+0x140>
 800254e:	4540      	cmp	r0, r8
 8002550:	d018      	beq.n	8002584 <HAL_GPIO_DeInit+0xf8>
 8002552:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 8002556:	4540      	cmp	r0, r8
 8002558:	d017      	beq.n	800258a <HAL_GPIO_DeInit+0xfe>
 800255a:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 800255e:	4540      	cmp	r0, r8
 8002560:	bf14      	ite	ne
 8002562:	f04f 0808 	movne.w	r8, #8
 8002566:	f04f 0807 	moveq.w	r8, #7
 800256a:	e7a1      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 800256c:	f04f 0801 	mov.w	r8, #1
 8002570:	e79e      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 8002572:	f04f 0802 	mov.w	r8, #2
 8002576:	e79b      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 8002578:	f04f 0803 	mov.w	r8, #3
 800257c:	e798      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 800257e:	f04f 0804 	mov.w	r8, #4
 8002582:	e795      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 8002584:	f04f 0805 	mov.w	r8, #5
 8002588:	e792      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
 800258a:	f04f 0806 	mov.w	r8, #6
 800258e:	e78f      	b.n	80024b0 <HAL_GPIO_DeInit+0x24>
        EXTI->IMR1 &= ~(iocurrent);
 8002590:	683c      	ldr	r4, [r7, #0]
 8002592:	ea24 0406 	bic.w	r4, r4, r6
 8002596:	603c      	str	r4, [r7, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002598:	687c      	ldr	r4, [r7, #4]
 800259a:	ea24 0406 	bic.w	r4, r4, r6
 800259e:	607c      	str	r4, [r7, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80025a0:	68fc      	ldr	r4, [r7, #12]
 80025a2:	ea24 0406 	bic.w	r4, r4, r6
 80025a6:	60fc      	str	r4, [r7, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80025a8:	68bc      	ldr	r4, [r7, #8]
 80025aa:	ea24 0406 	bic.w	r4, r4, r6
 80025ae:	60bc      	str	r4, [r7, #8]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80025b0:	688c      	ldr	r4, [r1, #8]
 80025b2:	ea24 040e 	bic.w	r4, r4, lr
 80025b6:	608c      	str	r4, [r1, #8]
 80025b8:	e77f      	b.n	80024ba <HAL_GPIO_DeInit+0x2e>
  }
}
 80025ba:	b003      	add	sp, #12
 80025bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010400 	.word	0x40010400
 80025c8:	48000400 	.word	0x48000400
 80025cc:	48001400 	.word	0x48001400

080025d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80025d0:	6903      	ldr	r3, [r0, #16]
 80025d2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80025d4:	bf14      	ite	ne
 80025d6:	2001      	movne	r0, #1
 80025d8:	2000      	moveq	r0, #0
 80025da:	4770      	bx	lr

080025dc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025dc:	b10a      	cbz	r2, 80025e2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	6181      	str	r1, [r0, #24]
 80025e0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e2:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 80025e4:	4770      	bx	lr

080025e6 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025e6:	6803      	ldr	r3, [r0, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	f012 0f02 	tst.w	r2, #2
  {
    hi2c->Instance->TXDR = 0x00U;
 80025ee:	bf1c      	itt	ne
 80025f0:	2200      	movne	r2, #0
 80025f2:	629a      	strne	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f4:	6803      	ldr	r3, [r0, #0]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	f012 0f01 	tst.w	r2, #1
 80025fc:	d103      	bne.n	8002606 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025fe:	699a      	ldr	r2, [r3, #24]
 8002600:	f042 0201 	orr.w	r2, r2, #1
 8002604:	619a      	str	r2, [r3, #24]
  }
}
 8002606:	4770      	bx	lr

08002608 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002608:	b430      	push	{r4, r5}
 800260a:	9c02      	ldr	r4, [sp, #8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800260c:	6805      	ldr	r5, [r0, #0]
 800260e:	6868      	ldr	r0, [r5, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002610:	4323      	orrs	r3, r4
 8002612:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002616:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800261a:	430b      	orrs	r3, r1
 800261c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8002620:	0d64      	lsrs	r4, r4, #21
 8002622:	f404 6480 	and.w	r4, r4, #1024	@ 0x400
 8002626:	f044 747f 	orr.w	r4, r4, #66846720	@ 0x3fc0000
 800262a:	f444 3458 	orr.w	r4, r4, #221184	@ 0x36000
 800262e:	f444 747f 	orr.w	r4, r4, #1020	@ 0x3fc
 8002632:	f044 0403 	orr.w	r4, r4, #3
 8002636:	ea20 0004 	bic.w	r0, r0, r4
 800263a:	4303      	orrs	r3, r0
 800263c:	606b      	str	r3, [r5, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800263e:	bc30      	pop	{r4, r5}
 8002640:	4770      	bx	lr

08002642 <I2C_IsErrorOccurred>:
{
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800264c:	f016 0610 	ands.w	r6, r6, #16
 8002650:	d079      	beq.n	8002746 <I2C_IsErrorOccurred+0x104>
 8002652:	460d      	mov	r5, r1
 8002654:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002656:	2210      	movs	r2, #16
 8002658:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 800265a:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 800265c:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265e:	6821      	ldr	r1, [r4, #0]
 8002660:	698b      	ldr	r3, [r1, #24]
 8002662:	f013 0f20 	tst.w	r3, #32
 8002666:	d12f      	bne.n	80026c8 <I2C_IsErrorOccurred+0x86>
 8002668:	bb8f      	cbnz	r7, 80026ce <I2C_IsErrorOccurred+0x8c>
      if (Timeout != HAL_MAX_DELAY)
 800266a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800266e:	d0f7      	beq.n	8002660 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002670:	f7ff fdc2 	bl	80021f8 <HAL_GetTick>
 8002674:	eba0 0008 	sub.w	r0, r0, r8
 8002678:	42a8      	cmp	r0, r5
 800267a:	d801      	bhi.n	8002680 <I2C_IsErrorOccurred+0x3e>
 800267c:	2d00      	cmp	r5, #0
 800267e:	d1ee      	bne.n	800265e <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002680:	6822      	ldr	r2, [r4, #0]
 8002682:	6850      	ldr	r0, [r2, #4]
          tmp2 = hi2c->Mode;
 8002684:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002688:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800268a:	6991      	ldr	r1, [r2, #24]
 800268c:	f411 4f00 	tst.w	r1, #32768	@ 0x8000
 8002690:	d004      	beq.n	800269c <I2C_IsErrorOccurred+0x5a>
 8002692:	f410 4f80 	tst.w	r0, #16384	@ 0x4000
 8002696:	d101      	bne.n	800269c <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 8002698:	2b20      	cmp	r3, #32
 800269a:	d10d      	bne.n	80026b8 <I2C_IsErrorOccurred+0x76>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f013 0f20 	tst.w	r3, #32
 80026a4:	d1db      	bne.n	800265e <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026a6:	f7ff fda7 	bl	80021f8 <HAL_GetTick>
 80026aa:	eba0 0008 	sub.w	r0, r0, r8
 80026ae:	2819      	cmp	r0, #25
 80026b0:	d9f4      	bls.n	800269c <I2C_IsErrorOccurred+0x5a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026b2:	2620      	movs	r6, #32
              status = HAL_ERROR;
 80026b4:	2701      	movs	r7, #1
 80026b6:	e7d2      	b.n	800265e <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026b8:	6853      	ldr	r3, [r2, #4]
 80026ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026be:	6053      	str	r3, [r2, #4]
            tickstart = HAL_GetTick();
 80026c0:	f7ff fd9a 	bl	80021f8 <HAL_GetTick>
 80026c4:	4680      	mov	r8, r0
 80026c6:	e7e9      	b.n	800269c <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80026c8:	b90f      	cbnz	r7, 80026ce <I2C_IsErrorOccurred+0x8c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026ca:	2320      	movs	r3, #32
 80026cc:	61cb      	str	r3, [r1, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80026ce:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80026d2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80026d4:	6822      	ldr	r2, [r4, #0]
 80026d6:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026d8:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80026dc:	d005      	beq.n	80026ea <I2C_IsErrorOccurred+0xa8>
    error_code |= HAL_I2C_ERROR_BERR;
 80026de:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80026e6:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80026e8:	2001      	movs	r0, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026ea:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80026ee:	d02c      	beq.n	800274a <I2C_IsErrorOccurred+0x108>
    error_code |= HAL_I2C_ERROR_OVR;
 80026f0:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80026f4:	6822      	ldr	r2, [r4, #0]
 80026f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80026fa:	61d1      	str	r1, [r2, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80026fc:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8002700:	d005      	beq.n	800270e <I2C_IsErrorOccurred+0xcc>
    error_code |= HAL_I2C_ERROR_ARLO;
 8002702:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002706:	6823      	ldr	r3, [r4, #0]
 8002708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800270c:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 800270e:	4620      	mov	r0, r4
 8002710:	f7ff ff69 	bl	80025e6 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8002714:	6822      	ldr	r2, [r4, #0]
 8002716:	6853      	ldr	r3, [r2, #4]
 8002718:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 800271c:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002720:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002724:	f023 0301 	bic.w	r3, r3, #1
 8002728:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 800272a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800272c:	4333      	orrs	r3, r6
 800272e:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	2320      	movs	r3, #32
 8002732:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002736:	2300      	movs	r3, #0
 8002738:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 800273c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8002740:	2001      	movs	r0, #1
}
 8002742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8002746:	2000      	movs	r0, #0
 8002748:	e7c4      	b.n	80026d4 <I2C_IsErrorOccurred+0x92>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800274a:	f413 7f00 	tst.w	r3, #512	@ 0x200
 800274e:	d1d8      	bne.n	8002702 <I2C_IsErrorOccurred+0xc0>
  if (status != HAL_OK)
 8002750:	2800      	cmp	r0, #0
 8002752:	d0f6      	beq.n	8002742 <I2C_IsErrorOccurred+0x100>
 8002754:	e7db      	b.n	800270e <I2C_IsErrorOccurred+0xcc>

08002756 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8002756:	b570      	push	{r4, r5, r6, lr}
 8002758:	4604      	mov	r4, r0
 800275a:	460d      	mov	r5, r1
 800275c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800275e:	6823      	ldr	r3, [r4, #0]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	f013 0f02 	tst.w	r3, #2
 8002766:	d122      	bne.n	80027ae <I2C_WaitOnTXISFlagUntilTimeout+0x58>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002768:	4632      	mov	r2, r6
 800276a:	4629      	mov	r1, r5
 800276c:	4620      	mov	r0, r4
 800276e:	f7ff ff68 	bl	8002642 <I2C_IsErrorOccurred>
 8002772:	b9f0      	cbnz	r0, 80027b2 <I2C_WaitOnTXISFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8002774:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002778:	d0f1      	beq.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800277a:	f7ff fd3d 	bl	80021f8 <HAL_GetTick>
 800277e:	1b80      	subs	r0, r0, r6
 8002780:	42a8      	cmp	r0, r5
 8002782:	d801      	bhi.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8002784:	2d00      	cmp	r5, #0
 8002786:	d1ea      	bne.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f013 0f02 	tst.w	r3, #2
 8002790:	d1e5      	bne.n	800275e <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002792:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002794:	f043 0320 	orr.w	r3, r3, #32
 8002798:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800279a:	2320      	movs	r3, #32
 800279c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80027a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          return HAL_ERROR;
 80027aa:	2001      	movs	r0, #1
 80027ac:	e000      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>
  return HAL_OK;
 80027ae:	2000      	movs	r0, #0
}
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80027b2:	2001      	movs	r0, #1
 80027b4:	e7fc      	b.n	80027b0 <I2C_WaitOnTXISFlagUntilTimeout+0x5a>

080027b6 <I2C_WaitOnFlagUntilTimeout>:
{
 80027b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027ba:	4605      	mov	r5, r0
 80027bc:	4688      	mov	r8, r1
 80027be:	4617      	mov	r7, r2
 80027c0:	461e      	mov	r6, r3
 80027c2:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027c6:	682b      	ldr	r3, [r5, #0]
 80027c8:	699c      	ldr	r4, [r3, #24]
 80027ca:	ea38 0404 	bics.w	r4, r8, r4
 80027ce:	bf0c      	ite	eq
 80027d0:	2301      	moveq	r3, #1
 80027d2:	2300      	movne	r3, #0
 80027d4:	42bb      	cmp	r3, r7
 80027d6:	d127      	bne.n	8002828 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027d8:	464a      	mov	r2, r9
 80027da:	4631      	mov	r1, r6
 80027dc:	4628      	mov	r0, r5
 80027de:	f7ff ff30 	bl	8002642 <I2C_IsErrorOccurred>
 80027e2:	bb20      	cbnz	r0, 800282e <I2C_WaitOnFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
 80027e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80027e8:	d0ed      	beq.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ea:	f7ff fd05 	bl	80021f8 <HAL_GetTick>
 80027ee:	eba0 0009 	sub.w	r0, r0, r9
 80027f2:	42b0      	cmp	r0, r6
 80027f4:	d801      	bhi.n	80027fa <I2C_WaitOnFlagUntilTimeout+0x44>
 80027f6:	2e00      	cmp	r6, #0
 80027f8:	d1e5      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027fa:	682b      	ldr	r3, [r5, #0]
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	ea38 0303 	bics.w	r3, r8, r3
 8002802:	bf0c      	ite	eq
 8002804:	2301      	moveq	r3, #1
 8002806:	2300      	movne	r3, #0
 8002808:	42bb      	cmp	r3, r7
 800280a:	d1dc      	bne.n	80027c6 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800280c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 800280e:	f043 0320 	orr.w	r3, r3, #32
 8002812:	646b      	str	r3, [r5, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002814:	2320      	movs	r3, #32
 8002816:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800281a:	2300      	movs	r3, #0
 800281c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8002820:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
          return HAL_ERROR;
 8002824:	2001      	movs	r0, #1
 8002826:	e000      	b.n	800282a <I2C_WaitOnFlagUntilTimeout+0x74>
  return HAL_OK;
 8002828:	2000      	movs	r0, #0
}
 800282a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return HAL_ERROR;
 800282e:	2001      	movs	r0, #1
 8002830:	e7fb      	b.n	800282a <I2C_WaitOnFlagUntilTimeout+0x74>

08002832 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002832:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800283a:	6803      	ldr	r3, [r0, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	f013 0f20 	tst.w	r3, #32
 8002842:	d00b      	beq.n	800285c <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
  return HAL_OK;
 8002844:	2700      	movs	r7, #0
 8002846:	e027      	b.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	f013 0f20 	tst.w	r3, #32
 8002850:	d013      	beq.n	800287a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	f013 0f20 	tst.w	r3, #32
 800285a:	d11d      	bne.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800285c:	4632      	mov	r2, r6
 800285e:	4629      	mov	r1, r5
 8002860:	4620      	mov	r0, r4
 8002862:	f7ff feee 	bl	8002642 <I2C_IsErrorOccurred>
 8002866:	4607      	mov	r7, r0
 8002868:	b9a8      	cbnz	r0, 8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286a:	f7ff fcc5 	bl	80021f8 <HAL_GetTick>
 800286e:	1b80      	subs	r0, r0, r6
 8002870:	42a8      	cmp	r0, r5
 8002872:	d8e9      	bhi.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
 8002874:	2d00      	cmp	r5, #0
 8002876:	d1ec      	bne.n	8002852 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
 8002878:	e7e6      	b.n	8002848 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800287a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800287c:	f043 0320 	orr.w	r3, r3, #32
 8002880:	6463      	str	r3, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002882:	2320      	movs	r3, #32
 8002884:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	2300      	movs	r3, #0
 800288a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        __HAL_UNLOCK(hi2c);
 800288e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return HAL_ERROR;
 8002892:	2701      	movs	r7, #1
 8002894:	e000      	b.n	8002898 <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
      return HAL_ERROR;
 8002896:	2701      	movs	r7, #1
}
 8002898:	4638      	mov	r0, r7
 800289a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800289c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800289c:	2800      	cmp	r0, #0
 800289e:	d057      	beq.n	8002950 <HAL_I2C_Init+0xb4>
{
 80028a0:	b510      	push	{r4, lr}
 80028a2:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a4:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d04c      	beq.n	8002946 <HAL_I2C_Init+0xaa>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	2324      	movs	r3, #36	@ 0x24
 80028ae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80028b2:	6822      	ldr	r2, [r4, #0]
 80028b4:	6813      	ldr	r3, [r2, #0]
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028bc:	6822      	ldr	r2, [r4, #0]
 80028be:	6863      	ldr	r3, [r4, #4]
 80028c0:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80028c4:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028c6:	6822      	ldr	r2, [r4, #0]
 80028c8:	6893      	ldr	r3, [r2, #8]
 80028ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80028ce:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028d0:	68e3      	ldr	r3, [r4, #12]
 80028d2:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028d4:	6822      	ldr	r2, [r4, #0]
 80028d6:	68a3      	ldr	r3, [r4, #8]
 80028d8:	bf0c      	ite	eq
 80028da:	f443 4300 	orreq.w	r3, r3, #32768	@ 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028de:	f443 4304 	orrne.w	r3, r3, #33792	@ 0x8400
 80028e2:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e4:	68e3      	ldr	r3, [r4, #12]
 80028e6:	2b02      	cmp	r3, #2
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028e8:	6822      	ldr	r2, [r4, #0]
 80028ea:	6853      	ldr	r3, [r2, #4]
 80028ec:	bf0c      	ite	eq
 80028ee:	f443 6300 	orreq.w	r3, r3, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028f2:	f423 6300 	bicne.w	r3, r3, #2048	@ 0x800
 80028f6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	6853      	ldr	r3, [r2, #4]
 80028fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002900:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002904:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002906:	6822      	ldr	r2, [r4, #0]
 8002908:	68d3      	ldr	r3, [r2, #12]
 800290a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800290e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002910:	6822      	ldr	r2, [r4, #0]
 8002912:	6923      	ldr	r3, [r4, #16]
 8002914:	6961      	ldr	r1, [r4, #20]
 8002916:	430b      	orrs	r3, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002918:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800291e:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002920:	6822      	ldr	r2, [r4, #0]
 8002922:	69e3      	ldr	r3, [r4, #28]
 8002924:	6a21      	ldr	r1, [r4, #32]
 8002926:	430b      	orrs	r3, r1
 8002928:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 800292a:	6822      	ldr	r2, [r4, #0]
 800292c:	6813      	ldr	r3, [r2, #0]
 800292e:	f043 0301 	orr.w	r3, r3, #1
 8002932:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002934:	2000      	movs	r0, #0
 8002936:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002938:	2320      	movs	r3, #32
 800293a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800293e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002940:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8002944:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002946:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800294a:	f7ff f863 	bl	8001a14 <HAL_I2C_MspInit>
 800294e:	e7ad      	b.n	80028ac <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8002950:	2001      	movs	r0, #1
}
 8002952:	4770      	bx	lr

08002954 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
 8002954:	b1a8      	cbz	r0, 8002982 <HAL_I2C_DeInit+0x2e>
{
 8002956:	b510      	push	{r4, lr}
 8002958:	4604      	mov	r4, r0
  hi2c->State = HAL_I2C_STATE_BUSY;
 800295a:	2324      	movs	r3, #36	@ 0x24
 800295c:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002960:	6802      	ldr	r2, [r0, #0]
 8002962:	6813      	ldr	r3, [r2, #0]
 8002964:	f023 0301 	bic.w	r3, r3, #1
 8002968:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 800296a:	f7ff f899 	bl	8001aa0 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296e:	2000      	movs	r0, #0
 8002970:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002972:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
  __HAL_UNLOCK(hi2c);
 800297c:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
}
 8002980:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002982:	2001      	movs	r0, #1
}
 8002984:	4770      	bx	lr
	...

08002988 <HAL_I2C_Mem_Write>:
{
 8002988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800298c:	b083      	sub	sp, #12
 800298e:	460d      	mov	r5, r1
 8002990:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8002994:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002996:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 800299a:	b2c9      	uxtb	r1, r1
 800299c:	2920      	cmp	r1, #32
 800299e:	f040 80e2 	bne.w	8002b66 <HAL_I2C_Mem_Write+0x1de>
 80029a2:	4604      	mov	r4, r0
 80029a4:	4690      	mov	r8, r2
 80029a6:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80029a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80029aa:	b1cb      	cbz	r3, 80029e0 <HAL_I2C_Mem_Write+0x58>
 80029ac:	f1ba 0f00 	cmp.w	sl, #0
 80029b0:	d016      	beq.n	80029e0 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 80029b2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	f000 80d9 	beq.w	8002b6e <HAL_I2C_Mem_Write+0x1e6>
 80029bc:	f04f 0b01 	mov.w	fp, #1
 80029c0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80029c4:	f7ff fc18 	bl	80021f8 <HAL_GetTick>
 80029c8:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ca:	9000      	str	r0, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	465a      	mov	r2, fp
 80029d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80029d4:	4620      	mov	r0, r4
 80029d6:	f7ff feee 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
 80029da:	b130      	cbz	r0, 80029ea <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	e0c3      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80029e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029e4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80029e6:	2001      	movs	r0, #1
 80029e8:	e0be      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ea:	2321      	movs	r3, #33	@ 0x21
 80029ec:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029f0:	2340      	movs	r3, #64	@ 0x40
 80029f2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f6:	2300      	movs	r3, #0
 80029f8:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 80029fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80029fc:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 80029fe:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002a02:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002a04:	4b5e      	ldr	r3, [pc, #376]	@ (8002b80 <HAL_I2C_Mem_Write+0x1f8>)
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a0c:	fa5f f289 	uxtb.w	r2, r9
 8002a10:	4629      	mov	r1, r5
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff fdf8 	bl	8002608 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a18:	4632      	mov	r2, r6
 8002a1a:	4639      	mov	r1, r7
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f7ff fe9a 	bl	8002756 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a22:	bb78      	cbnz	r0, 8002a84 <HAL_I2C_Mem_Write+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a24:	45d9      	cmp	r9, fp
 8002a26:	d11e      	bne.n	8002a66 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	fa5f f288 	uxtb.w	r2, r8
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002a30:	9600      	str	r6, [sp, #0]
 8002a32:	463b      	mov	r3, r7
 8002a34:	2200      	movs	r2, #0
 8002a36:	2180      	movs	r1, #128	@ 0x80
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f7ff febc 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a3e:	bb08      	cbnz	r0, 8002a84 <HAL_I2C_Mem_Write+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a40:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	2bff      	cmp	r3, #255	@ 0xff
 8002a46:	d922      	bls.n	8002a8e <HAL_I2C_Mem_Write+0x106>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a48:	22ff      	movs	r2, #255	@ 0xff
 8002a4a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002a54:	4629      	mov	r1, r5
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff fdd6 	bl	8002608 <I2C_TransferConfig>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a5c:	f04f 0900 	mov.w	r9, #0
 8002a60:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002a64:	e030      	b.n	8002ac8 <HAL_I2C_Mem_Write+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002a66:	6823      	ldr	r3, [r4, #0]
 8002a68:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8002a6c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a6e:	4632      	mov	r2, r6
 8002a70:	4639      	mov	r1, r7
 8002a72:	4620      	mov	r0, r4
 8002a74:	f7ff fe6f 	bl	8002756 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a78:	b920      	cbnz	r0, 8002a84 <HAL_I2C_Mem_Write+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	fa5f f388 	uxtb.w	r3, r8
 8002a80:	6293      	str	r3, [r2, #40]	@ 0x28
 8002a82:	e7d5      	b.n	8002a30 <HAL_I2C_Mem_Write+0xa8>
      __HAL_UNLOCK(hi2c);
 8002a84:	2300      	movs	r3, #0
 8002a86:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002a8a:	2001      	movs	r0, #1
 8002a8c:	e06c      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
      hi2c->XferSize = hi2c->XferCount;
 8002a8e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002a90:	b292      	uxth	r2, r2
 8002a92:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002a94:	2300      	movs	r3, #0
 8002a96:	9300      	str	r3, [sp, #0]
 8002a98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4620      	mov	r0, r4
 8002aa2:	f7ff fdb1 	bl	8002608 <I2C_TransferConfig>
 8002aa6:	e7d9      	b.n	8002a5c <HAL_I2C_Mem_Write+0xd4>
          hi2c->XferSize = hi2c->XferCount;
 8002aa8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002aaa:	b292      	uxth	r2, r2
 8002aac:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aae:	2300      	movs	r3, #0
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	4629      	mov	r1, r5
 8002aba:	4620      	mov	r0, r4
 8002abc:	f7ff fda4 	bl	8002608 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002ac0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d032      	beq.n	8002b2e <HAL_I2C_Mem_Write+0x1a6>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ac8:	4632      	mov	r2, r6
 8002aca:	4639      	mov	r1, r7
 8002acc:	4620      	mov	r0, r4
 8002ace:	f7ff fe42 	bl	8002756 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d14d      	bne.n	8002b72 <HAL_I2C_Mem_Write+0x1ea>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad6:	6823      	ldr	r3, [r4, #0]
 8002ad8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8002ada:	7812      	ldrb	r2, [r2, #0]
 8002adc:	629a      	str	r2, [r3, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8002ade:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8002ae4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	8563      	strh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8002aec:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	8523      	strh	r3, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002af4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002af6:	b292      	uxth	r2, r2
 8002af8:	2a00      	cmp	r2, #0
 8002afa:	d0e1      	beq.n	8002ac0 <HAL_I2C_Mem_Write+0x138>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1df      	bne.n	8002ac0 <HAL_I2C_Mem_Write+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b00:	9600      	str	r6, [sp, #0]
 8002b02:	463b      	mov	r3, r7
 8002b04:	464a      	mov	r2, r9
 8002b06:	4641      	mov	r1, r8
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f7ff fe54 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
 8002b0e:	bb90      	cbnz	r0, 8002b76 <HAL_I2C_Mem_Write+0x1ee>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2bff      	cmp	r3, #255	@ 0xff
 8002b16:	d9c7      	bls.n	8002aa8 <HAL_I2C_Mem_Write+0x120>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b18:	22ff      	movs	r2, #255	@ 0xff
 8002b1a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b24:	4629      	mov	r1, r5
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7ff fd6e 	bl	8002608 <I2C_TransferConfig>
 8002b2c:	e7c8      	b.n	8002ac0 <HAL_I2C_Mem_Write+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	4632      	mov	r2, r6
 8002b30:	4639      	mov	r1, r7
 8002b32:	4620      	mov	r0, r4
 8002b34:	f7ff fe7d 	bl	8002832 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b38:	b9f8      	cbnz	r0, 8002b7a <HAL_I2C_Mem_Write+0x1f2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002b40:	6821      	ldr	r1, [r4, #0]
 8002b42:	684b      	ldr	r3, [r1, #4]
 8002b44:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002b48:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002b4c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002b50:	f023 0301 	bic.w	r3, r3, #1
 8002b54:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002b56:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002b60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002b64:	e000      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
    return HAL_BUSY;
 8002b66:	2002      	movs	r0, #2
}
 8002b68:	b003      	add	sp, #12
 8002b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002b6e:	2002      	movs	r0, #2
 8002b70:	e7fa      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
        return HAL_ERROR;
 8002b72:	2001      	movs	r0, #1
 8002b74:	e7f8      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
          return HAL_ERROR;
 8002b76:	2001      	movs	r0, #1
 8002b78:	e7f6      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
      return HAL_ERROR;
 8002b7a:	2001      	movs	r0, #1
 8002b7c:	e7f4      	b.n	8002b68 <HAL_I2C_Mem_Write+0x1e0>
 8002b7e:	bf00      	nop
 8002b80:	80002000 	.word	0x80002000

08002b84 <HAL_I2C_Mem_Read>:
{
 8002b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b88:	b083      	sub	sp, #12
 8002b8a:	460d      	mov	r5, r1
 8002b8c:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8002b90:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b92:	f890 1041 	ldrb.w	r1, [r0, #65]	@ 0x41
 8002b96:	b2c9      	uxtb	r1, r1
 8002b98:	2920      	cmp	r1, #32
 8002b9a:	f040 80e4 	bne.w	8002d66 <HAL_I2C_Mem_Read+0x1e2>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	4690      	mov	r8, r2
 8002ba2:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8002ba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002ba6:	b1cb      	cbz	r3, 8002bdc <HAL_I2C_Mem_Read+0x58>
 8002ba8:	f1ba 0f00 	cmp.w	sl, #0
 8002bac:	d016      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 8002bae:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	f000 80db 	beq.w	8002d6e <HAL_I2C_Mem_Read+0x1ea>
 8002bb8:	f04f 0b01 	mov.w	fp, #1
 8002bbc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8002bc0:	f7ff fb1a 	bl	80021f8 <HAL_GetTick>
 8002bc4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bc6:	9000      	str	r0, [sp, #0]
 8002bc8:	2319      	movs	r3, #25
 8002bca:	465a      	mov	r2, fp
 8002bcc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	f7ff fdf0 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	b130      	cbz	r0, 8002be6 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8002bd8:	2001      	movs	r0, #1
 8002bda:	e0c5      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002bdc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002be0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
 8002be4:	e0c0      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002be6:	2322      	movs	r3, #34	@ 0x22
 8002be8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bec:	2340      	movs	r3, #64	@ 0x40
 8002bee:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	6463      	str	r3, [r4, #68]	@ 0x44
    hi2c->pBuffPtr  = pData;
 8002bf6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002bf8:	6262      	str	r2, [r4, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002bfa:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002bfe:	6363      	str	r3, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002c00:	4a5f      	ldr	r2, [pc, #380]	@ (8002d80 <HAL_I2C_Mem_Read+0x1fc>)
 8002c02:	9200      	str	r2, [sp, #0]
 8002c04:	fa5f f289 	uxtb.w	r2, r9
 8002c08:	4629      	mov	r1, r5
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	f7ff fcfc 	bl	8002608 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c10:	4632      	mov	r2, r6
 8002c12:	4639      	mov	r1, r7
 8002c14:	4620      	mov	r0, r4
 8002c16:	f7ff fd9e 	bl	8002756 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c1a:	bb88      	cbnz	r0, 8002c80 <HAL_I2C_Mem_Read+0xfc>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c1c:	45d9      	cmp	r9, fp
 8002c1e:	d120      	bne.n	8002c62 <HAL_I2C_Mem_Read+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c20:	6823      	ldr	r3, [r4, #0]
 8002c22:	fa5f f288 	uxtb.w	r2, r8
 8002c26:	629a      	str	r2, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002c28:	9600      	str	r6, [sp, #0]
 8002c2a:	463b      	mov	r3, r7
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	2140      	movs	r1, #64	@ 0x40
 8002c30:	4620      	mov	r0, r4
 8002c32:	f7ff fdc0 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c36:	bb18      	cbnz	r0, 8002c80 <HAL_I2C_Mem_Read+0xfc>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c38:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	2bff      	cmp	r3, #255	@ 0xff
 8002c3e:	d924      	bls.n	8002c8a <HAL_I2C_Mem_Read+0x106>
      hi2c->XferSize = 1U;
 8002c40:	2201      	movs	r2, #1
 8002c42:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c44:	4b4f      	ldr	r3, [pc, #316]	@ (8002d84 <HAL_I2C_Mem_Read+0x200>)
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	4620      	mov	r0, r4
 8002c50:	f7ff fcda 	bl	8002608 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002c54:	f04f 0800 	mov.w	r8, #0
 8002c58:	f04f 0904 	mov.w	r9, #4
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c5c:	f04f 0a80 	mov.w	sl, #128	@ 0x80
 8002c60:	e030      	b.n	8002cc4 <HAL_I2C_Mem_Read+0x140>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002c62:	6823      	ldr	r3, [r4, #0]
 8002c64:	ea4f 2218 	mov.w	r2, r8, lsr #8
 8002c68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c6a:	4632      	mov	r2, r6
 8002c6c:	4639      	mov	r1, r7
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f7ff fd71 	bl	8002756 <I2C_WaitOnTXISFlagUntilTimeout>
 8002c74:	b920      	cbnz	r0, 8002c80 <HAL_I2C_Mem_Read+0xfc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002c76:	6822      	ldr	r2, [r4, #0]
 8002c78:	fa5f f388 	uxtb.w	r3, r8
 8002c7c:	6293      	str	r3, [r2, #40]	@ 0x28
 8002c7e:	e7d3      	b.n	8002c28 <HAL_I2C_Mem_Read+0xa4>
      __HAL_UNLOCK(hi2c);
 8002c80:	2300      	movs	r3, #0
 8002c82:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8002c86:	2001      	movs	r0, #1
 8002c88:	e06e      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
      hi2c->XferSize = hi2c->XferCount;
 8002c8a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c90:	4b3c      	ldr	r3, [pc, #240]	@ (8002d84 <HAL_I2C_Mem_Read+0x200>)
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	4629      	mov	r1, r5
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	f7ff fcb3 	bl	8002608 <I2C_TransferConfig>
 8002ca2:	e7d7      	b.n	8002c54 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = hi2c->XferCount;
 8002ca4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002ca6:	b292      	uxth	r2, r2
 8002ca8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	4629      	mov	r1, r5
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	f7ff fca6 	bl	8002608 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8002cbc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d034      	beq.n	8002d2e <HAL_I2C_Mem_Read+0x1aa>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002cc4:	9600      	str	r6, [sp, #0]
 8002cc6:	463b      	mov	r3, r7
 8002cc8:	4642      	mov	r2, r8
 8002cca:	4649      	mov	r1, r9
 8002ccc:	4620      	mov	r0, r4
 8002cce:	f7ff fd72 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
 8002cd2:	2800      	cmp	r0, #0
 8002cd4:	d14d      	bne.n	8002d72 <HAL_I2C_Mem_Read+0x1ee>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cd6:	6823      	ldr	r3, [r4, #0]
 8002cd8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cda:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cdc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8002cde:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8002ce4:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	8523      	strh	r3, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8002cec:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002cee:	3a01      	subs	r2, #1
 8002cf0:	b292      	uxth	r2, r2
 8002cf2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cf4:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8002cf6:	b292      	uxth	r2, r2
 8002cf8:	2a00      	cmp	r2, #0
 8002cfa:	d0df      	beq.n	8002cbc <HAL_I2C_Mem_Read+0x138>
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1dd      	bne.n	8002cbc <HAL_I2C_Mem_Read+0x138>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d00:	9600      	str	r6, [sp, #0]
 8002d02:	463b      	mov	r3, r7
 8002d04:	4642      	mov	r2, r8
 8002d06:	4651      	mov	r1, sl
 8002d08:	4620      	mov	r0, r4
 8002d0a:	f7ff fd54 	bl	80027b6 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	bb90      	cbnz	r0, 8002d76 <HAL_I2C_Mem_Read+0x1f2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d10:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2bff      	cmp	r3, #255	@ 0xff
 8002d16:	d9c5      	bls.n	8002ca4 <HAL_I2C_Mem_Read+0x120>
          hi2c->XferSize = 1U;
 8002d18:	2201      	movs	r2, #1
 8002d1a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d24:	4629      	mov	r1, r5
 8002d26:	4620      	mov	r0, r4
 8002d28:	f7ff fc6e 	bl	8002608 <I2C_TransferConfig>
 8002d2c:	e7c6      	b.n	8002cbc <HAL_I2C_Mem_Read+0x138>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	4632      	mov	r2, r6
 8002d30:	4639      	mov	r1, r7
 8002d32:	4620      	mov	r0, r4
 8002d34:	f7ff fd7d 	bl	8002832 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d38:	b9f8      	cbnz	r0, 8002d7a <HAL_I2C_Mem_Read+0x1f6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002d40:	6821      	ldr	r1, [r4, #0]
 8002d42:	684b      	ldr	r3, [r1, #4]
 8002d44:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8002d48:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8002d4c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002d50:	f023 0301 	bic.w	r3, r3, #1
 8002d54:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8002d60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    return HAL_OK;
 8002d64:	e000      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
    return HAL_BUSY;
 8002d66:	2002      	movs	r0, #2
}
 8002d68:	b003      	add	sp, #12
 8002d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8002d6e:	2002      	movs	r0, #2
 8002d70:	e7fa      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
        return HAL_ERROR;
 8002d72:	2001      	movs	r0, #1
 8002d74:	e7f8      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
          return HAL_ERROR;
 8002d76:	2001      	movs	r0, #1
 8002d78:	e7f6      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
      return HAL_ERROR;
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	e7f4      	b.n	8002d68 <HAL_I2C_Mem_Read+0x1e4>
 8002d7e:	bf00      	nop
 8002d80:	80002000 	.word	0x80002000
 8002d84:	80002400 	.word	0x80002400

08002d88 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d88:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	2a20      	cmp	r2, #32
 8002d92:	d123      	bne.n	8002ddc <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d94:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002d98:	2a01      	cmp	r2, #1
 8002d9a:	d021      	beq.n	8002de0 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002da2:	2224      	movs	r2, #36	@ 0x24
 8002da4:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002da8:	6800      	ldr	r0, [r0, #0]
 8002daa:	6802      	ldr	r2, [r0, #0]
 8002dac:	f022 0201 	bic.w	r2, r2, #1
 8002db0:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002db2:	6818      	ldr	r0, [r3, #0]
 8002db4:	6802      	ldr	r2, [r0, #0]
 8002db6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002dba:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	6802      	ldr	r2, [r0, #0]
 8002dc0:	4311      	orrs	r1, r2
 8002dc2:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dc4:	6819      	ldr	r1, [r3, #0]
 8002dc6:	680a      	ldr	r2, [r1, #0]
 8002dc8:	f042 0201 	orr.w	r2, r2, #1
 8002dcc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8002dda:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002ddc:	2002      	movs	r0, #2
 8002dde:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002de0:	2002      	movs	r0, #2
  }
}
 8002de2:	4770      	bx	lr

08002de4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002de4:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de6:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	2a20      	cmp	r2, #32
 8002dee:	d121      	bne.n	8002e34 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002df0:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8002df4:	2a01      	cmp	r2, #1
 8002df6:	d01f      	beq.n	8002e38 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfe:	2224      	movs	r2, #36	@ 0x24
 8002e00:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e04:	6800      	ldr	r0, [r0, #0]
 8002e06:	6802      	ldr	r2, [r0, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e0e:	6818      	ldr	r0, [r3, #0]
 8002e10:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e12:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e16:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e1a:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	680a      	ldr	r2, [r1, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2c:	2000      	movs	r0, #0
 8002e2e:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e32:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002e34:	2002      	movs	r0, #2
 8002e36:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002e38:	2002      	movs	r0, #2
  }
}
 8002e3a:	4770      	bx	lr

08002e3c <HAL_PWREx_GetVoltageRange>:
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_PWREx_GetVoltageRange+0x1c>)
 8002e3e:	6818      	ldr	r0, [r3, #0]
 8002e40:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002e44:	f5b0 6f80 	cmp.w	r0, #1024	@ 0x400
 8002e48:	d004      	beq.n	8002e54 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002e4a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8002e4e:	f3c0 2000 	ubfx	r0, r0, #8, #1
 8002e52:	0240      	lsls	r0, r0, #9
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40007000 	.word	0x40007000

08002e5c <HAL_PWREx_ControlVoltageScaling>:
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	d13a      	bne.n	8002ed6 <HAL_PWREx_ControlVoltageScaling+0x7a>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e60:	4b40      	ldr	r3, [pc, #256]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6c:	d008      	beq.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e70:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e7c:	2000      	movs	r0, #0
 8002e7e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e80:	4a38      	ldr	r2, [pc, #224]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e82:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002e86:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e8a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e8e:	6813      	ldr	r3, [r2, #0]
 8002e90:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002e94:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e98:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e9a:	4b33      	ldr	r3, [pc, #204]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2132      	movs	r1, #50	@ 0x32
 8002ea0:	fb01 f303 	mul.w	r3, r1, r3
 8002ea4:	4931      	ldr	r1, [pc, #196]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x110>)
 8002ea6:	fba1 1303 	umull	r1, r3, r1, r3
 8002eaa:	0c9b      	lsrs	r3, r3, #18
 8002eac:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eae:	6952      	ldr	r2, [r2, #20]
 8002eb0:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002eb4:	d007      	beq.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8002eb6:	492b      	ldr	r1, [pc, #172]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8002eb8:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002eba:	694a      	ldr	r2, [r1, #20]
 8002ebc:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002ec0:	d001      	beq.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x6a>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f8      	bne.n	8002eb8 <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ec6:	4b27      	ldr	r3, [pc, #156]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002ec8:	695b      	ldr	r3, [r3, #20]
  return HAL_OK;
 8002eca:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002ece:	bf14      	ite	ne
 8002ed0:	2003      	movne	r0, #3
 8002ed2:	2000      	moveq	r0, #0
 8002ed4:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ed6:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002eda:	d008      	beq.n	8002eee <HAL_PWREx_ControlVoltageScaling+0x92>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002edc:	4a21      	ldr	r2, [pc, #132]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002ede:	6813      	ldr	r3, [r2, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee8:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002eea:	2000      	movs	r0, #0
}
 8002eec:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002eee:	4b1d      	ldr	r3, [pc, #116]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002efa:	d008      	beq.n	8002f0e <HAL_PWREx_ControlVoltageScaling+0xb2>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002efc:	4a19      	ldr	r2, [pc, #100]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002efe:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
  return HAL_OK;
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f0e:	4a15      	ldr	r2, [pc, #84]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002f10:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
 8002f14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f26:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_PWREx_ControlVoltageScaling+0x10c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2132      	movs	r1, #50	@ 0x32
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	490e      	ldr	r1, [pc, #56]	@ (8002f6c <HAL_PWREx_ControlVoltageScaling+0x110>)
 8002f34:	fba1 1303 	umull	r1, r3, r1, r3
 8002f38:	0c9b      	lsrs	r3, r3, #18
 8002f3a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f3c:	6952      	ldr	r2, [r2, #20]
 8002f3e:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002f42:	d007      	beq.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8002f44:	4907      	ldr	r1, [pc, #28]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
        wait_loop_index--;
 8002f46:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f48:	694a      	ldr	r2, [r1, #20]
 8002f4a:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002f4e:	d001      	beq.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0xf8>
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1f8      	bne.n	8002f46 <HAL_PWREx_ControlVoltageScaling+0xea>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f54:	4b03      	ldr	r3, [pc, #12]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002f56:	695b      	ldr	r3, [r3, #20]
  return HAL_OK;
 8002f58:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8002f5c:	bf14      	ite	ne
 8002f5e:	2003      	movne	r0, #3
 8002f60:	2000      	moveq	r0, #0
 8002f62:	4770      	bx	lr
 8002f64:	40007000 	.word	0x40007000
 8002f68:	20000014 	.word	0x20000014
 8002f6c:	431bde83 	.word	0x431bde83

08002f70 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f70:	b530      	push	{r4, r5, lr}
 8002f72:	b083      	sub	sp, #12
 8002f74:	4604      	mov	r4, r0
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f76:	4b1d      	ldr	r3, [pc, #116]	@ (8002fec <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7a:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002f7e:	d00b      	beq.n	8002f98 <RCC_SetFlashLatencyFromMSIRange+0x28>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f80:	f7ff ff5c 	bl	8002e3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f84:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002f88:	d017      	beq.n	8002fba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002f8a:	2c7f      	cmp	r4, #127	@ 0x7f
 8002f8c:	d81e      	bhi.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x5c>
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002f8e:	2c70      	cmp	r4, #112	@ 0x70
 8002f90:	bf14      	ite	ne
 8002f92:	2400      	movne	r4, #0
 8002f94:	2401      	moveq	r4, #1
 8002f96:	e01a      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4d14      	ldr	r5, [pc, #80]	@ (8002fec <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002f9a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa0:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002fa2:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	9301      	str	r3, [sp, #4]
 8002faa:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002fac:	f7ff ff46 	bl	8002e3c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fb0:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002fb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fb6:	65ab      	str	r3, [r5, #88]	@ 0x58
 8002fb8:	e7e4      	b.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0x14>
    if(msirange > RCC_MSIRANGE_8)
 8002fba:	2c80      	cmp	r4, #128	@ 0x80
 8002fbc:	d904      	bls.n	8002fc8 <RCC_SetFlashLatencyFromMSIRange+0x58>
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbe:	2ca1      	cmp	r4, #161	@ 0xa1
 8002fc0:	bf34      	ite	cc
 8002fc2:	2401      	movcc	r4, #1
 8002fc4:	2402      	movcs	r4, #2
 8002fc6:	e002      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x5e>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002fc8:	2400      	movs	r4, #0
 8002fca:	e000      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x5e>
      latency = FLASH_LATENCY_2; /* 2WS */
 8002fcc:	2402      	movs	r4, #2
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fce:	4908      	ldr	r1, [pc, #32]	@ (8002ff0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002fd0:	680b      	ldr	r3, [r1, #0]
 8002fd2:	f023 030f 	bic.w	r3, r3, #15
 8002fd6:	4323      	orrs	r3, r4
 8002fd8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fda:	6808      	ldr	r0, [r1, #0]
 8002fdc:	f000 000f 	and.w	r0, r0, #15
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002fe0:	1b00      	subs	r0, r0, r4
 8002fe2:	bf18      	it	ne
 8002fe4:	2001      	movne	r0, #1
 8002fe6:	b003      	add	sp, #12
 8002fe8:	bd30      	pop	{r4, r5, pc}
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40022000 	.word	0x40022000

08002ff4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ff4:	4a25      	ldr	r2, [pc, #148]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ff6:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff8:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ffa:	f013 030c 	ands.w	r3, r3, #12
 8002ffe:	d00e      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x2a>
 8003000:	2b0c      	cmp	r3, #12
 8003002:	d006      	beq.n	8003012 <HAL_RCC_GetSysClockFreq+0x1e>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003004:	2b04      	cmp	r3, #4
 8003006:	d03f      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x94>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003008:	2b08      	cmp	r3, #8
 800300a:	4821      	ldr	r0, [pc, #132]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x9c>)
 800300c:	bf18      	it	ne
 800300e:	2000      	movne	r0, #0
 8003010:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003012:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003016:	2a01      	cmp	r2, #1
 8003018:	d001      	beq.n	800301e <HAL_RCC_GetSysClockFreq+0x2a>
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800301a:	2000      	movs	r0, #0
 800301c:	e012      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x50>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800301e:	4a1b      	ldr	r2, [pc, #108]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003020:	6812      	ldr	r2, [r2, #0]
 8003022:	f012 0f08 	tst.w	r2, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003026:	4a19      	ldr	r2, [pc, #100]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003028:	bf07      	ittee	eq
 800302a:	f8d2 2094 	ldreq.w	r2, [r2, #148]	@ 0x94
 800302e:	f3c2 2203 	ubfxeq	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003032:	6812      	ldrne	r2, [r2, #0]
 8003034:	f3c2 1203 	ubfxne	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8003038:	4916      	ldr	r1, [pc, #88]	@ (8003094 <HAL_RCC_GetSysClockFreq+0xa0>)
 800303a:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303e:	b323      	cbz	r3, 800308a <HAL_RCC_GetSysClockFreq+0x96>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003040:	2b0c      	cmp	r3, #12
 8003042:	d11f      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0x90>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003044:	4b11      	ldr	r3, [pc, #68]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 800304c:	2b02      	cmp	r3, #2
 800304e:	d017      	beq.n	8003080 <HAL_RCC_GetSysClockFreq+0x8c>
 8003050:	4a0f      	ldr	r2, [pc, #60]	@ (8003090 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003052:	2b03      	cmp	r3, #3
 8003054:	bf08      	it	eq
 8003056:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003058:	490c      	ldr	r1, [pc, #48]	@ (800308c <HAL_RCC_GetSysClockFreq+0x98>)
 800305a:	68ca      	ldr	r2, [r1, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800305c:	68cb      	ldr	r3, [r1, #12]
 800305e:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003062:	fb00 f303 	mul.w	r3, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003066:	68c8      	ldr	r0, [r1, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003068:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800306c:	3201      	adds	r2, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306e:	fbb3 f3f2 	udiv	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003072:	f3c0 6041 	ubfx	r0, r0, #25, #2
 8003076:	3001      	adds	r0, #1
 8003078:	0040      	lsls	r0, r0, #1
    sysclockfreq = pllvco / pllr;
 800307a:	fbb3 f0f0 	udiv	r0, r3, r0
 800307e:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8003080:	4805      	ldr	r0, [pc, #20]	@ (8003098 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003082:	e7e9      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x64>
 8003084:	2000      	movs	r0, #0
  return sysclockfreq;
 8003086:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003088:	4803      	ldr	r0, [pc, #12]	@ (8003098 <HAL_RCC_GetSysClockFreq+0xa4>)
}
 800308a:	4770      	bx	lr
 800308c:	40021000 	.word	0x40021000
 8003090:	007a1200 	.word	0x007a1200
 8003094:	0800b958 	.word	0x0800b958
 8003098:	00f42400 	.word	0x00f42400

0800309c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 800309c:	2800      	cmp	r0, #0
 800309e:	f000 832a 	beq.w	80036f6 <HAL_RCC_OscConfig+0x65a>
{
 80030a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80030a6:	b083      	sub	sp, #12
 80030a8:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030aa:	4b98      	ldr	r3, [pc, #608]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80030ac:	689d      	ldr	r5, [r3, #8]
 80030ae:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030b2:	68de      	ldr	r6, [r3, #12]
 80030b4:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	f013 0f10 	tst.w	r3, #16
 80030be:	d05f      	beq.n	8003180 <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030c0:	b1f5      	cbz	r5, 8003100 <HAL_RCC_OscConfig+0x64>
 80030c2:	2d0c      	cmp	r5, #12
 80030c4:	d01a      	beq.n	80030fc <HAL_RCC_OscConfig+0x60>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c6:	69a3      	ldr	r3, [r4, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	f000 80ba 	beq.w	8003242 <HAL_RCC_OscConfig+0x1a6>
        __HAL_RCC_MSI_ENABLE();
 80030ce:	4a8f      	ldr	r2, [pc, #572]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80030d0:	6813      	ldr	r3, [r2, #0]
 80030d2:	f043 0301 	orr.w	r3, r3, #1
 80030d6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030d8:	f7ff f88e 	bl	80021f8 <HAL_GetTick>
 80030dc:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030de:	f8df 822c 	ldr.w	r8, [pc, #556]	@ 800330c <HAL_RCC_OscConfig+0x270>
 80030e2:	f8d8 3000 	ldr.w	r3, [r8]
 80030e6:	f013 0f02 	tst.w	r3, #2
 80030ea:	f040 8097 	bne.w	800321c <HAL_RCC_OscConfig+0x180>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030ee:	f7ff f883 	bl	80021f8 <HAL_GetTick>
 80030f2:	1bc0      	subs	r0, r0, r7
 80030f4:	2802      	cmp	r0, #2
 80030f6:	d9f4      	bls.n	80030e2 <HAL_RCC_OscConfig+0x46>
            return HAL_TIMEOUT;
 80030f8:	2003      	movs	r0, #3
 80030fa:	e307      	b.n	800370c <HAL_RCC_OscConfig+0x670>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80030fc:	2e01      	cmp	r6, #1
 80030fe:	d1e2      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2a>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003100:	4b82      	ldr	r3, [pc, #520]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f013 0f02 	tst.w	r3, #2
 8003108:	d003      	beq.n	8003112 <HAL_RCC_OscConfig+0x76>
 800310a:	69a3      	ldr	r3, [r4, #24]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 82f4 	beq.w	80036fa <HAL_RCC_OscConfig+0x65e>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003112:	6a20      	ldr	r0, [r4, #32]
 8003114:	4b7d      	ldr	r3, [pc, #500]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f013 0f08 	tst.w	r3, #8
 800311c:	4b7b      	ldr	r3, [pc, #492]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 800311e:	bf12      	itee	ne
 8003120:	681b      	ldrne	r3, [r3, #0]
 8003122:	f8d3 3094 	ldreq.w	r3, [r3, #148]	@ 0x94
 8003126:	091b      	lsreq	r3, r3, #4
 8003128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800312c:	4298      	cmp	r0, r3
 800312e:	d856      	bhi.n	80031de <HAL_RCC_OscConfig+0x142>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003130:	4b76      	ldr	r3, [pc, #472]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f042 0208 	orr.w	r2, r2, #8
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8003140:	6a21      	ldr	r1, [r4, #32]
 8003142:	430a      	orrs	r2, r1
 8003144:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003146:	685a      	ldr	r2, [r3, #4]
 8003148:	69e1      	ldr	r1, [r4, #28]
 800314a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800314e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003152:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003154:	2d00      	cmp	r5, #0
 8003156:	d05a      	beq.n	800320e <HAL_RCC_OscConfig+0x172>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003158:	f7ff ff4c 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 800315c:	4b6b      	ldr	r3, [pc, #428]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003164:	4a6a      	ldr	r2, [pc, #424]	@ (8003310 <HAL_RCC_OscConfig+0x274>)
 8003166:	5cd3      	ldrb	r3, [r2, r3]
 8003168:	f003 031f 	and.w	r3, r3, #31
 800316c:	40d8      	lsrs	r0, r3
 800316e:	4b69      	ldr	r3, [pc, #420]	@ (8003314 <HAL_RCC_OscConfig+0x278>)
 8003170:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8003172:	4b69      	ldr	r3, [pc, #420]	@ (8003318 <HAL_RCC_OscConfig+0x27c>)
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f7fe fcf5 	bl	8001b64 <HAL_InitTick>
        if(status != HAL_OK)
 800317a:	2800      	cmp	r0, #0
 800317c:	f040 82c6 	bne.w	800370c <HAL_RCC_OscConfig+0x670>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003180:	6823      	ldr	r3, [r4, #0]
 8003182:	f013 0f01 	tst.w	r3, #1
 8003186:	d07d      	beq.n	8003284 <HAL_RCC_OscConfig+0x1e8>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003188:	2d08      	cmp	r5, #8
 800318a:	d072      	beq.n	8003272 <HAL_RCC_OscConfig+0x1d6>
 800318c:	2d0c      	cmp	r5, #12
 800318e:	d06e      	beq.n	800326e <HAL_RCC_OscConfig+0x1d2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003190:	6863      	ldr	r3, [r4, #4]
 8003192:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003196:	f000 8094 	beq.w	80032c2 <HAL_RCC_OscConfig+0x226>
 800319a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800319e:	f000 8096 	beq.w	80032ce <HAL_RCC_OscConfig+0x232>
 80031a2:	4b5a      	ldr	r3, [pc, #360]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80031b2:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 8096 	beq.w	80032e8 <HAL_RCC_OscConfig+0x24c>
        tickstart = HAL_GetTick();
 80031bc:	f7ff f81c 	bl	80021f8 <HAL_GetTick>
 80031c0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031c2:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 800330c <HAL_RCC_OscConfig+0x270>
 80031c6:	f8d8 3000 	ldr.w	r3, [r8]
 80031ca:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80031ce:	d159      	bne.n	8003284 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031d0:	f7ff f812 	bl	80021f8 <HAL_GetTick>
 80031d4:	1bc0      	subs	r0, r0, r7
 80031d6:	2864      	cmp	r0, #100	@ 0x64
 80031d8:	d9f5      	bls.n	80031c6 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 80031da:	2003      	movs	r0, #3
 80031dc:	e296      	b.n	800370c <HAL_RCC_OscConfig+0x670>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031de:	f7ff fec7 	bl	8002f70 <RCC_SetFlashLatencyFromMSIRange>
 80031e2:	2800      	cmp	r0, #0
 80031e4:	f040 828b 	bne.w	80036fe <HAL_RCC_OscConfig+0x662>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031e8:	4b48      	ldr	r3, [pc, #288]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	f042 0208 	orr.w	r2, r2, #8
 80031f0:	601a      	str	r2, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80031f8:	6a21      	ldr	r1, [r4, #32]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	69e1      	ldr	r1, [r4, #28]
 8003202:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003206:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	e7a4      	b.n	8003158 <HAL_RCC_OscConfig+0xbc>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800320e:	6a20      	ldr	r0, [r4, #32]
 8003210:	f7ff feae 	bl	8002f70 <RCC_SetFlashLatencyFromMSIRange>
 8003214:	2800      	cmp	r0, #0
 8003216:	d09f      	beq.n	8003158 <HAL_RCC_OscConfig+0xbc>
              return HAL_ERROR;
 8003218:	2001      	movs	r0, #1
 800321a:	e277      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800321c:	4b3b      	ldr	r3, [pc, #236]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	f042 0208 	orr.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800322c:	6a21      	ldr	r1, [r4, #32]
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	69e1      	ldr	r1, [r4, #28]
 8003236:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800323a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800323e:	605a      	str	r2, [r3, #4]
 8003240:	e79e      	b.n	8003180 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_MSI_DISABLE();
 8003242:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003244:	6813      	ldr	r3, [r2, #0]
 8003246:	f023 0301 	bic.w	r3, r3, #1
 800324a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800324c:	f7fe ffd4 	bl	80021f8 <HAL_GetTick>
 8003250:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003252:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800330c <HAL_RCC_OscConfig+0x270>
 8003256:	f8d8 3000 	ldr.w	r3, [r8]
 800325a:	f013 0f02 	tst.w	r3, #2
 800325e:	d08f      	beq.n	8003180 <HAL_RCC_OscConfig+0xe4>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003260:	f7fe ffca 	bl	80021f8 <HAL_GetTick>
 8003264:	1bc0      	subs	r0, r0, r7
 8003266:	2802      	cmp	r0, #2
 8003268:	d9f5      	bls.n	8003256 <HAL_RCC_OscConfig+0x1ba>
            return HAL_TIMEOUT;
 800326a:	2003      	movs	r0, #3
 800326c:	e24e      	b.n	800370c <HAL_RCC_OscConfig+0x670>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800326e:	2e03      	cmp	r6, #3
 8003270:	d18e      	bne.n	8003190 <HAL_RCC_OscConfig+0xf4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003272:	4b26      	ldr	r3, [pc, #152]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800327a:	d003      	beq.n	8003284 <HAL_RCC_OscConfig+0x1e8>
 800327c:	6863      	ldr	r3, [r4, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 823f 	beq.w	8003702 <HAL_RCC_OscConfig+0x666>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003284:	6823      	ldr	r3, [r4, #0]
 8003286:	f013 0f02 	tst.w	r3, #2
 800328a:	d05a      	beq.n	8003342 <HAL_RCC_OscConfig+0x2a6>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800328c:	2d04      	cmp	r5, #4
 800328e:	d047      	beq.n	8003320 <HAL_RCC_OscConfig+0x284>
 8003290:	2d0c      	cmp	r5, #12
 8003292:	d043      	beq.n	800331c <HAL_RCC_OscConfig+0x280>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003294:	68e3      	ldr	r3, [r4, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d079      	beq.n	800338e <HAL_RCC_OscConfig+0x2f2>
        __HAL_RCC_HSI_ENABLE();
 800329a:	4a1c      	ldr	r2, [pc, #112]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80032a4:	f7fe ffa8 	bl	80021f8 <HAL_GetTick>
 80032a8:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032aa:	4f18      	ldr	r7, [pc, #96]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80032b2:	d163      	bne.n	800337c <HAL_RCC_OscConfig+0x2e0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032b4:	f7fe ffa0 	bl	80021f8 <HAL_GetTick>
 80032b8:	1b80      	subs	r0, r0, r6
 80032ba:	2802      	cmp	r0, #2
 80032bc:	d9f6      	bls.n	80032ac <HAL_RCC_OscConfig+0x210>
            return HAL_TIMEOUT;
 80032be:	2003      	movs	r0, #3
 80032c0:	e224      	b.n	800370c <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c2:	4a12      	ldr	r2, [pc, #72]	@ (800330c <HAL_RCC_OscConfig+0x270>)
 80032c4:	6813      	ldr	r3, [r2, #0]
 80032c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e772      	b.n	80031b4 <HAL_RCC_OscConfig+0x118>
 80032ce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80032d2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80032dc:	601a      	str	r2, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	e765      	b.n	80031b4 <HAL_RCC_OscConfig+0x118>
        tickstart = HAL_GetTick();
 80032e8:	f7fe ff86 	bl	80021f8 <HAL_GetTick>
 80032ec:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ee:	f8df 801c 	ldr.w	r8, [pc, #28]	@ 800330c <HAL_RCC_OscConfig+0x270>
 80032f2:	f8d8 3000 	ldr.w	r3, [r8]
 80032f6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80032fa:	d0c3      	beq.n	8003284 <HAL_RCC_OscConfig+0x1e8>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032fc:	f7fe ff7c 	bl	80021f8 <HAL_GetTick>
 8003300:	1bc0      	subs	r0, r0, r7
 8003302:	2864      	cmp	r0, #100	@ 0x64
 8003304:	d9f5      	bls.n	80032f2 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8003306:	2003      	movs	r0, #3
 8003308:	e200      	b.n	800370c <HAL_RCC_OscConfig+0x670>
 800330a:	bf00      	nop
 800330c:	40021000 	.word	0x40021000
 8003310:	0800b990 	.word	0x0800b990
 8003314:	20000014 	.word	0x20000014
 8003318:	200000c4 	.word	0x200000c4
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800331c:	2e02      	cmp	r6, #2
 800331e:	d1b9      	bne.n	8003294 <HAL_RCC_OscConfig+0x1f8>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003320:	4ba9      	ldr	r3, [pc, #676]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003328:	d003      	beq.n	8003332 <HAL_RCC_OscConfig+0x296>
 800332a:	68e3      	ldr	r3, [r4, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	f000 81ea 	beq.w	8003706 <HAL_RCC_OscConfig+0x66a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003332:	4aa5      	ldr	r2, [pc, #660]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003334:	6853      	ldr	r3, [r2, #4]
 8003336:	6921      	ldr	r1, [r4, #16]
 8003338:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800333c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003340:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	f013 0f08 	tst.w	r3, #8
 8003348:	d04c      	beq.n	80033e4 <HAL_RCC_OscConfig+0x348>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800334a:	6963      	ldr	r3, [r4, #20]
 800334c:	b39b      	cbz	r3, 80033b6 <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_LSI_ENABLE();
 800334e:	4a9e      	ldr	r2, [pc, #632]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003350:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800335c:	f7fe ff4c 	bl	80021f8 <HAL_GetTick>
 8003360:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003362:	4f99      	ldr	r7, [pc, #612]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003364:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003368:	f013 0f02 	tst.w	r3, #2
 800336c:	d13a      	bne.n	80033e4 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800336e:	f7fe ff43 	bl	80021f8 <HAL_GetTick>
 8003372:	1b80      	subs	r0, r0, r6
 8003374:	2802      	cmp	r0, #2
 8003376:	d9f5      	bls.n	8003364 <HAL_RCC_OscConfig+0x2c8>
          return HAL_TIMEOUT;
 8003378:	2003      	movs	r0, #3
 800337a:	e1c7      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800337c:	4a92      	ldr	r2, [pc, #584]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 800337e:	6853      	ldr	r3, [r2, #4]
 8003380:	6921      	ldr	r1, [r4, #16]
 8003382:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003386:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800338a:	6053      	str	r3, [r2, #4]
 800338c:	e7d9      	b.n	8003342 <HAL_RCC_OscConfig+0x2a6>
        __HAL_RCC_HSI_DISABLE();
 800338e:	4a8e      	ldr	r2, [pc, #568]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003390:	6813      	ldr	r3, [r2, #0]
 8003392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003396:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003398:	f7fe ff2e 	bl	80021f8 <HAL_GetTick>
 800339c:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800339e:	4f8a      	ldr	r7, [pc, #552]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 80033a6:	d0cc      	beq.n	8003342 <HAL_RCC_OscConfig+0x2a6>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033a8:	f7fe ff26 	bl	80021f8 <HAL_GetTick>
 80033ac:	1b80      	subs	r0, r0, r6
 80033ae:	2802      	cmp	r0, #2
 80033b0:	d9f6      	bls.n	80033a0 <HAL_RCC_OscConfig+0x304>
            return HAL_TIMEOUT;
 80033b2:	2003      	movs	r0, #3
 80033b4:	e1aa      	b.n	800370c <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_LSI_DISABLE();
 80033b6:	4a84      	ldr	r2, [pc, #528]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80033b8:	f8d2 3094 	ldr.w	r3, [r2, #148]	@ 0x94
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80033c4:	f7fe ff18 	bl	80021f8 <HAL_GetTick>
 80033c8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033ca:	4f7f      	ldr	r7, [pc, #508]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80033cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033d0:	f013 0f02 	tst.w	r3, #2
 80033d4:	d006      	beq.n	80033e4 <HAL_RCC_OscConfig+0x348>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d6:	f7fe ff0f 	bl	80021f8 <HAL_GetTick>
 80033da:	1b80      	subs	r0, r0, r6
 80033dc:	2802      	cmp	r0, #2
 80033de:	d9f5      	bls.n	80033cc <HAL_RCC_OscConfig+0x330>
          return HAL_TIMEOUT;
 80033e0:	2003      	movs	r0, #3
 80033e2:	e193      	b.n	800370c <HAL_RCC_OscConfig+0x670>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f013 0f04 	tst.w	r3, #4
 80033ea:	d07e      	beq.n	80034ea <HAL_RCC_OscConfig+0x44e>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033ec:	4b76      	ldr	r3, [pc, #472]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80033ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f0:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80033f4:	d137      	bne.n	8003466 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_PWR_CLK_ENABLE();
 80033f6:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80033f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033fa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80033fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800340a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800340c:	4b6f      	ldr	r3, [pc, #444]	@ (80035cc <HAL_RCC_OscConfig+0x530>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003414:	d029      	beq.n	800346a <HAL_RCC_OscConfig+0x3ce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003416:	68a3      	ldr	r3, [r4, #8]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d03c      	beq.n	8003496 <HAL_RCC_OscConfig+0x3fa>
 800341c:	2b05      	cmp	r3, #5
 800341e:	d042      	beq.n	80034a6 <HAL_RCC_OscConfig+0x40a>
 8003420:	4b69      	ldr	r3, [pc, #420]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003422:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800342e:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8003432:	f022 0204 	bic.w	r2, r2, #4
 8003436:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800343a:	68a3      	ldr	r3, [r4, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d040      	beq.n	80034c2 <HAL_RCC_OscConfig+0x426>
      tickstart = HAL_GetTick();
 8003440:	f7fe feda 	bl	80021f8 <HAL_GetTick>
 8003444:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003446:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80035c8 <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800344a:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800344e:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 8003452:	f013 0f02 	tst.w	r3, #2
 8003456:	d147      	bne.n	80034e8 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003458:	f7fe fece 	bl	80021f8 <HAL_GetTick>
 800345c:	1bc0      	subs	r0, r0, r7
 800345e:	4548      	cmp	r0, r9
 8003460:	d9f5      	bls.n	800344e <HAL_RCC_OscConfig+0x3b2>
          return HAL_TIMEOUT;
 8003462:	2003      	movs	r0, #3
 8003464:	e152      	b.n	800370c <HAL_RCC_OscConfig+0x670>
    FlagStatus       pwrclkchanged = RESET;
 8003466:	2600      	movs	r6, #0
 8003468:	e7d0      	b.n	800340c <HAL_RCC_OscConfig+0x370>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800346a:	4a58      	ldr	r2, [pc, #352]	@ (80035cc <HAL_RCC_OscConfig+0x530>)
 800346c:	6813      	ldr	r3, [r2, #0]
 800346e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003472:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003474:	f7fe fec0 	bl	80021f8 <HAL_GetTick>
 8003478:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800347a:	f8df 8150 	ldr.w	r8, [pc, #336]	@ 80035cc <HAL_RCC_OscConfig+0x530>
 800347e:	f8d8 3000 	ldr.w	r3, [r8]
 8003482:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003486:	d1c6      	bne.n	8003416 <HAL_RCC_OscConfig+0x37a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003488:	f7fe feb6 	bl	80021f8 <HAL_GetTick>
 800348c:	1bc0      	subs	r0, r0, r7
 800348e:	2802      	cmp	r0, #2
 8003490:	d9f5      	bls.n	800347e <HAL_RCC_OscConfig+0x3e2>
          return HAL_TIMEOUT;
 8003492:	2003      	movs	r0, #3
 8003494:	e13a      	b.n	800370c <HAL_RCC_OscConfig+0x670>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003496:	4a4c      	ldr	r2, [pc, #304]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003498:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80034a4:	e7c9      	b.n	800343a <HAL_RCC_OscConfig+0x39e>
 80034a6:	4b48      	ldr	r3, [pc, #288]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80034a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80034ac:	f042 0204 	orr.w	r2, r2, #4
 80034b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80034b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80034c0:	e7bb      	b.n	800343a <HAL_RCC_OscConfig+0x39e>
      tickstart = HAL_GetTick();
 80034c2:	f7fe fe99 	bl	80021f8 <HAL_GetTick>
 80034c6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034c8:	f8df 80fc 	ldr.w	r8, [pc, #252]	@ 80035c8 <HAL_RCC_OscConfig+0x52c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034cc:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 80034d4:	f013 0f02 	tst.w	r3, #2
 80034d8:	d006      	beq.n	80034e8 <HAL_RCC_OscConfig+0x44c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034da:	f7fe fe8d 	bl	80021f8 <HAL_GetTick>
 80034de:	1bc0      	subs	r0, r0, r7
 80034e0:	4548      	cmp	r0, r9
 80034e2:	d9f5      	bls.n	80034d0 <HAL_RCC_OscConfig+0x434>
          return HAL_TIMEOUT;
 80034e4:	2003      	movs	r0, #3
 80034e6:	e111      	b.n	800370c <HAL_RCC_OscConfig+0x670>
    if(pwrclkchanged == SET)
 80034e8:	b9e6      	cbnz	r6, 8003524 <HAL_RCC_OscConfig+0x488>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034ea:	6823      	ldr	r3, [r4, #0]
 80034ec:	f013 0f20 	tst.w	r3, #32
 80034f0:	d035      	beq.n	800355e <HAL_RCC_OscConfig+0x4c2>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034f2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034f4:	b1e3      	cbz	r3, 8003530 <HAL_RCC_OscConfig+0x494>
      __HAL_RCC_HSI48_ENABLE();
 80034f6:	4a34      	ldr	r2, [pc, #208]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80034f8:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8003504:	f7fe fe78 	bl	80021f8 <HAL_GetTick>
 8003508:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800350a:	4f2f      	ldr	r7, [pc, #188]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 800350c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003510:	f013 0f02 	tst.w	r3, #2
 8003514:	d123      	bne.n	800355e <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003516:	f7fe fe6f 	bl	80021f8 <HAL_GetTick>
 800351a:	1b80      	subs	r0, r0, r6
 800351c:	2802      	cmp	r0, #2
 800351e:	d9f5      	bls.n	800350c <HAL_RCC_OscConfig+0x470>
          return HAL_TIMEOUT;
 8003520:	2003      	movs	r0, #3
 8003522:	e0f3      	b.n	800370c <HAL_RCC_OscConfig+0x670>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003524:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003526:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003528:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800352c:	6593      	str	r3, [r2, #88]	@ 0x58
 800352e:	e7dc      	b.n	80034ea <HAL_RCC_OscConfig+0x44e>
      __HAL_RCC_HSI48_DISABLE();
 8003530:	4a25      	ldr	r2, [pc, #148]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003532:	f8d2 3098 	ldr.w	r3, [r2, #152]	@ 0x98
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800353e:	f7fe fe5b 	bl	80021f8 <HAL_GetTick>
 8003542:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003544:	4f20      	ldr	r7, [pc, #128]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800354a:	f013 0f02 	tst.w	r3, #2
 800354e:	d006      	beq.n	800355e <HAL_RCC_OscConfig+0x4c2>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003550:	f7fe fe52 	bl	80021f8 <HAL_GetTick>
 8003554:	1b80      	subs	r0, r0, r6
 8003556:	2802      	cmp	r0, #2
 8003558:	d9f5      	bls.n	8003546 <HAL_RCC_OscConfig+0x4aa>
          return HAL_TIMEOUT;
 800355a:	2003      	movs	r0, #3
 800355c:	e0d6      	b.n	800370c <HAL_RCC_OscConfig+0x670>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800355e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80d2 	beq.w	800370a <HAL_RCC_OscConfig+0x66e>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003566:	2b02      	cmp	r3, #2
 8003568:	d017      	beq.n	800359a <HAL_RCC_OscConfig+0x4fe>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800356a:	2d0c      	cmp	r5, #12
 800356c:	f000 80d5 	beq.w	800371a <HAL_RCC_OscConfig+0x67e>
        __HAL_RCC_PLL_DISABLE();
 8003570:	4a15      	ldr	r2, [pc, #84]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003572:	6813      	ldr	r3, [r2, #0]
 8003574:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003578:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800357a:	f7fe fe3d 	bl	80021f8 <HAL_GetTick>
 800357e:	4604      	mov	r4, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003580:	4d11      	ldr	r5, [pc, #68]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 8003582:	682b      	ldr	r3, [r5, #0]
 8003584:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003588:	f000 80ae 	beq.w	80036e8 <HAL_RCC_OscConfig+0x64c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800358c:	f7fe fe34 	bl	80021f8 <HAL_GetTick>
 8003590:	1b00      	subs	r0, r0, r4
 8003592:	2802      	cmp	r0, #2
 8003594:	d9f5      	bls.n	8003582 <HAL_RCC_OscConfig+0x4e6>
            return HAL_TIMEOUT;
 8003596:	2003      	movs	r0, #3
 8003598:	e0b8      	b.n	800370c <HAL_RCC_OscConfig+0x670>
      pll_config = RCC->PLLCFGR;
 800359a:	4b0b      	ldr	r3, [pc, #44]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 800359c:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800359e:	f003 0103 	and.w	r1, r3, #3
 80035a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80035a4:	4291      	cmp	r1, r2
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0x534>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80035a8:	2d0c      	cmp	r5, #12
 80035aa:	f000 80b2 	beq.w	8003712 <HAL_RCC_OscConfig+0x676>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80035ae:	4b06      	ldr	r3, [pc, #24]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f013 6f80 	tst.w	r3, #67108864	@ 0x4000000
 80035b6:	f040 80ae 	bne.w	8003716 <HAL_RCC_OscConfig+0x67a>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80035ba:	4b03      	ldr	r3, [pc, #12]	@ (80035c8 <HAL_RCC_OscConfig+0x52c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80035c2:	d02f      	beq.n	8003624 <HAL_RCC_OscConfig+0x588>
            return HAL_ERROR;
 80035c4:	2001      	movs	r0, #1
 80035c6:	e0a1      	b.n	800370c <HAL_RCC_OscConfig+0x670>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035d4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80035d6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80035dc:	d1e4      	bne.n	80035a8 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035de:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035e4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80035e8:	d1de      	bne.n	80035a8 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035ee:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035f0:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80035f4:	d1d8      	bne.n	80035a8 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035f6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80035fa:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80035fc:	0852      	lsrs	r2, r2, #1
 80035fe:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003600:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8003604:	d1d0      	bne.n	80035a8 <HAL_RCC_OscConfig+0x50c>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003606:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 800360a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800360c:	0852      	lsrs	r2, r2, #1
 800360e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003610:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8003614:	d1c8      	bne.n	80035a8 <HAL_RCC_OscConfig+0x50c>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003616:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800361e:	d049      	beq.n	80036b4 <HAL_RCC_OscConfig+0x618>
  return HAL_OK;
 8003620:	2000      	movs	r0, #0
 8003622:	e073      	b.n	800370c <HAL_RCC_OscConfig+0x670>
            __HAL_RCC_PLL_DISABLE();
 8003624:	4a3e      	ldr	r2, [pc, #248]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 8003626:	6813      	ldr	r3, [r2, #0]
 8003628:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800362c:	6013      	str	r3, [r2, #0]
            tickstart = HAL_GetTick();
 800362e:	f7fe fde3 	bl	80021f8 <HAL_GetTick>
 8003632:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003634:	4e3a      	ldr	r6, [pc, #232]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 8003636:	6833      	ldr	r3, [r6, #0]
 8003638:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800363c:	d006      	beq.n	800364c <HAL_RCC_OscConfig+0x5b0>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fddb 	bl	80021f8 <HAL_GetTick>
 8003642:	1b40      	subs	r0, r0, r5
 8003644:	2802      	cmp	r0, #2
 8003646:	d9f6      	bls.n	8003636 <HAL_RCC_OscConfig+0x59a>
                return HAL_TIMEOUT;
 8003648:	2003      	movs	r0, #3
 800364a:	e05f      	b.n	800370c <HAL_RCC_OscConfig+0x670>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	4a34      	ldr	r2, [pc, #208]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 800364e:	68d1      	ldr	r1, [r2, #12]
 8003650:	4b34      	ldr	r3, [pc, #208]	@ (8003724 <HAL_RCC_OscConfig+0x688>)
 8003652:	400b      	ands	r3, r1
 8003654:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003656:	430b      	orrs	r3, r1
 8003658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800365a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800365e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8003660:	ea43 63c1 	orr.w	r3, r3, r1, lsl #27
 8003664:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003666:	3901      	subs	r1, #1
 8003668:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 800366c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800366e:	0849      	lsrs	r1, r1, #1
 8003670:	3901      	subs	r1, #1
 8003672:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8003676:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003678:	0849      	lsrs	r1, r1, #1
 800367a:	3901      	subs	r1, #1
 800367c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8003680:	60d3      	str	r3, [r2, #12]
            __HAL_RCC_PLL_ENABLE();
 8003682:	6813      	ldr	r3, [r2, #0]
 8003684:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003688:	6013      	str	r3, [r2, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800368a:	68d3      	ldr	r3, [r2, #12]
 800368c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003690:	60d3      	str	r3, [r2, #12]
            tickstart = HAL_GetTick();
 8003692:	f7fe fdb1 	bl	80021f8 <HAL_GetTick>
 8003696:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003698:	4d21      	ldr	r5, [pc, #132]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 800369a:	682b      	ldr	r3, [r5, #0]
 800369c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80036a0:	d106      	bne.n	80036b0 <HAL_RCC_OscConfig+0x614>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a2:	f7fe fda9 	bl	80021f8 <HAL_GetTick>
 80036a6:	1b00      	subs	r0, r0, r4
 80036a8:	2802      	cmp	r0, #2
 80036aa:	d9f6      	bls.n	800369a <HAL_RCC_OscConfig+0x5fe>
                return HAL_TIMEOUT;
 80036ac:	2003      	movs	r0, #3
 80036ae:	e02d      	b.n	800370c <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 80036b0:	2000      	movs	r0, #0
 80036b2:	e02b      	b.n	800370c <HAL_RCC_OscConfig+0x670>
          __HAL_RCC_PLL_ENABLE();
 80036b4:	4b1a      	ldr	r3, [pc, #104]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80036bc:	601a      	str	r2, [r3, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 80036c4:	60da      	str	r2, [r3, #12]
          tickstart = HAL_GetTick();
 80036c6:	f7fe fd97 	bl	80021f8 <HAL_GetTick>
 80036ca:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036cc:	4d14      	ldr	r5, [pc, #80]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 80036ce:	682b      	ldr	r3, [r5, #0]
 80036d0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x648>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036d6:	f7fe fd8f 	bl	80021f8 <HAL_GetTick>
 80036da:	1b03      	subs	r3, r0, r4
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d9f6      	bls.n	80036ce <HAL_RCC_OscConfig+0x632>
              return HAL_TIMEOUT;
 80036e0:	2003      	movs	r0, #3
 80036e2:	e013      	b.n	800370c <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	e011      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003720 <HAL_RCC_OscConfig+0x684>)
 80036ea:	68d1      	ldr	r1, [r2, #12]
 80036ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003728 <HAL_RCC_OscConfig+0x68c>)
 80036ee:	400b      	ands	r3, r1
 80036f0:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80036f2:	2000      	movs	r0, #0
 80036f4:	e00a      	b.n	800370c <HAL_RCC_OscConfig+0x670>
    return HAL_ERROR;
 80036f6:	2001      	movs	r0, #1
}
 80036f8:	4770      	bx	lr
        return HAL_ERROR;
 80036fa:	2001      	movs	r0, #1
 80036fc:	e006      	b.n	800370c <HAL_RCC_OscConfig+0x670>
            return HAL_ERROR;
 80036fe:	2001      	movs	r0, #1
 8003700:	e004      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 8003702:	2001      	movs	r0, #1
 8003704:	e002      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 8003706:	2001      	movs	r0, #1
 8003708:	e000      	b.n	800370c <HAL_RCC_OscConfig+0x670>
  return HAL_OK;
 800370a:	2000      	movs	r0, #0
}
 800370c:	b003      	add	sp, #12
 800370e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return HAL_ERROR;
 8003712:	2001      	movs	r0, #1
 8003714:	e7fa      	b.n	800370c <HAL_RCC_OscConfig+0x670>
            return HAL_ERROR;
 8003716:	2001      	movs	r0, #1
 8003718:	e7f8      	b.n	800370c <HAL_RCC_OscConfig+0x670>
        return HAL_ERROR;
 800371a:	2001      	movs	r0, #1
 800371c:	e7f6      	b.n	800370c <HAL_RCC_OscConfig+0x670>
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	019d800c 	.word	0x019d800c
 8003728:	feeefffc 	.word	0xfeeefffc

0800372c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800372c:	2800      	cmp	r0, #0
 800372e:	f000 80e3 	beq.w	80038f8 <HAL_RCC_ClockConfig+0x1cc>
{
 8003732:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003736:	460d      	mov	r5, r1
 8003738:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800373a:	4b9d      	ldr	r3, [pc, #628]	@ (80039b0 <HAL_RCC_ClockConfig+0x284>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 030f 	and.w	r3, r3, #15
 8003742:	428b      	cmp	r3, r1
 8003744:	d20b      	bcs.n	800375e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003746:	4a9a      	ldr	r2, [pc, #616]	@ (80039b0 <HAL_RCC_ClockConfig+0x284>)
 8003748:	6813      	ldr	r3, [r2, #0]
 800374a:	f023 030f 	bic.w	r3, r3, #15
 800374e:	430b      	orrs	r3, r1
 8003750:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003752:	6813      	ldr	r3, [r2, #0]
 8003754:	f003 030f 	and.w	r3, r3, #15
 8003758:	428b      	cmp	r3, r1
 800375a:	f040 80cf 	bne.w	80038fc <HAL_RCC_ClockConfig+0x1d0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375e:	6823      	ldr	r3, [r4, #0]
 8003760:	f013 0f02 	tst.w	r3, #2
 8003764:	f000 80e6 	beq.w	8003934 <HAL_RCC_ClockConfig+0x208>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003768:	68a1      	ldr	r1, [r4, #8]
 800376a:	4a92      	ldr	r2, [pc, #584]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800376c:	6892      	ldr	r2, [r2, #8]
 800376e:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003772:	4291      	cmp	r1, r2
 8003774:	f240 80c8 	bls.w	8003908 <HAL_RCC_ClockConfig+0x1dc>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003778:	4a8e      	ldr	r2, [pc, #568]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800377a:	6893      	ldr	r3, [r2, #8]
 800377c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f013 0f01 	tst.w	r3, #1
 800378a:	f040 80c1 	bne.w	8003910 <HAL_RCC_ClockConfig+0x1e4>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f013 0f02 	tst.w	r3, #2
 8003794:	f000 80d1 	beq.w	800393a <HAL_RCC_ClockConfig+0x20e>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003798:	68a2      	ldr	r2, [r4, #8]
 800379a:	4b86      	ldr	r3, [pc, #536]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a2:	429a      	cmp	r2, r3
 80037a4:	f080 80c9 	bcs.w	800393a <HAL_RCC_ClockConfig+0x20e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037a8:	4982      	ldr	r1, [pc, #520]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037aa:	688b      	ldr	r3, [r1, #8]
 80037ac:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]
 80037b4:	e0c1      	b.n	800393a <HAL_RCC_ClockConfig+0x20e>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037b6:	4b7f      	ldr	r3, [pc, #508]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80037be:	d101      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x98>
        return HAL_ERROR;
 80037c0:	2001      	movs	r0, #1
 80037c2:	e0f3      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037c4:	4b7b      	ldr	r3, [pc, #492]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0303 	and.w	r3, r3, #3

  switch (pllsource)
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d01b      	beq.n	8003808 <HAL_RCC_ClockConfig+0xdc>
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d01b      	beq.n	800380c <HAL_RCC_ClockConfig+0xe0>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d006      	beq.n	80037e6 <HAL_RCC_ClockConfig+0xba>
  default:
    /* unexpected */
    pllvco = 0;
    break;
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037d8:	4b76      	ldr	r3, [pc, #472]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037da:	68da      	ldr	r2, [r3, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037dc:	68da      	ldr	r2, [r3, #12]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037de:	68db      	ldr	r3, [r3, #12]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80037e0:	f04f 0900 	mov.w	r9, #0
 80037e4:	e060      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80037e6:	4b73      	ldr	r3, [pc, #460]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f013 0f08 	tst.w	r3, #8
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80037ee:	4b71      	ldr	r3, [pc, #452]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80037f0:	bf07      	ittee	eq
 80037f2:	f8d3 3094 	ldreq.w	r3, [r3, #148]	@ 0x94
 80037f6:	f3c3 2303 	ubfxeq	r3, r3, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80037fa:	681b      	ldrne	r3, [r3, #0]
 80037fc:	f3c3 1303 	ubfxne	r3, r3, #4, #4
    pllvco = MSIRangeTable[msirange];
 8003800:	4a6d      	ldr	r2, [pc, #436]	@ (80039b8 <HAL_RCC_ClockConfig+0x28c>)
 8003802:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    break;
 8003806:	e002      	b.n	800380e <HAL_RCC_ClockConfig+0xe2>
    pllvco = HSI_VALUE;
 8003808:	486c      	ldr	r0, [pc, #432]	@ (80039bc <HAL_RCC_ClockConfig+0x290>)
 800380a:	e000      	b.n	800380e <HAL_RCC_ClockConfig+0xe2>
  switch (pllsource)
 800380c:	486c      	ldr	r0, [pc, #432]	@ (80039c0 <HAL_RCC_ClockConfig+0x294>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800380e:	4a69      	ldr	r2, [pc, #420]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 8003810:	68d1      	ldr	r1, [r2, #12]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003812:	68d3      	ldr	r3, [r2, #12]
 8003814:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8003818:	fb00 f303 	mul.w	r3, r0, r3
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800381c:	68d2      	ldr	r2, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800381e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8003822:	3101      	adds	r1, #1
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003824:	fbb3 f3f1 	udiv	r3, r3, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003828:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800382c:	3201      	adds	r2, #1
 800382e:	0052      	lsls	r2, r2, #1
  sysclockfreq = pllvco / pllr;
 8003830:	fbb3 f3f2 	udiv	r3, r3, r2
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003834:	4a63      	ldr	r2, [pc, #396]	@ (80039c4 <HAL_RCC_ClockConfig+0x298>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d92e      	bls.n	8003898 <HAL_RCC_ClockConfig+0x16c>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800383a:	4b5e      	ldr	r3, [pc, #376]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8003842:	d12c      	bne.n	800389e <HAL_RCC_ClockConfig+0x172>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003844:	4a5b      	ldr	r2, [pc, #364]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 8003846:	6893      	ldr	r3, [r2, #8]
 8003848:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800384c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003850:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003852:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8003856:	e027      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003858:	4b56      	ldr	r3, [pc, #344]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003860:	d04e      	beq.n	8003900 <HAL_RCC_ClockConfig+0x1d4>
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003862:	f7ff fbc7 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 8003866:	4b57      	ldr	r3, [pc, #348]	@ (80039c4 <HAL_RCC_ClockConfig+0x298>)
 8003868:	4298      	cmp	r0, r3
 800386a:	d91b      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x178>
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800386c:	4b51      	ldr	r3, [pc, #324]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f013 0ff0 	tst.w	r3, #240	@ 0xf0
 8003874:	d133      	bne.n	80038de <HAL_RCC_ClockConfig+0x1b2>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003876:	4a4f      	ldr	r2, [pc, #316]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 8003878:	6893      	ldr	r3, [r2, #8]
 800387a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800387e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003882:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003884:	f04f 0980 	mov.w	r9, #128	@ 0x80
 8003888:	e00e      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800388a:	4b4a      	ldr	r3, [pc, #296]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003892:	d1e6      	bne.n	8003862 <HAL_RCC_ClockConfig+0x136>
          return HAL_ERROR;
 8003894:	2001      	movs	r0, #1
 8003896:	e089      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003898:	f04f 0900 	mov.w	r9, #0
 800389c:	e004      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
 800389e:	f04f 0900 	mov.w	r9, #0
 80038a2:	e001      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
 80038a4:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038a8:	4a42      	ldr	r2, [pc, #264]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80038aa:	6893      	ldr	r3, [r2, #8]
 80038ac:	f023 0303 	bic.w	r3, r3, #3
 80038b0:	6861      	ldr	r1, [r4, #4]
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 80038b6:	f7fe fc9f 	bl	80021f8 <HAL_GetTick>
 80038ba:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038bc:	4f3d      	ldr	r7, [pc, #244]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038be:	f241 3888 	movw	r8, #5000	@ 0x1388
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f003 030c 	and.w	r3, r3, #12
 80038c8:	6862      	ldr	r2, [r4, #4]
 80038ca:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80038ce:	d009      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x1b8>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d0:	f7fe fc92 	bl	80021f8 <HAL_GetTick>
 80038d4:	1b80      	subs	r0, r0, r6
 80038d6:	4540      	cmp	r0, r8
 80038d8:	d9f3      	bls.n	80038c2 <HAL_RCC_ClockConfig+0x196>
        return HAL_TIMEOUT;
 80038da:	2003      	movs	r0, #3
 80038dc:	e066      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038de:	f04f 0900 	mov.w	r9, #0
 80038e2:	e7e1      	b.n	80038a8 <HAL_RCC_ClockConfig+0x17c>
  if(hpre == RCC_SYSCLK_DIV2)
 80038e4:	f1b9 0f00 	cmp.w	r9, #0
 80038e8:	f43f af51 	beq.w	800378e <HAL_RCC_ClockConfig+0x62>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ec:	4a31      	ldr	r2, [pc, #196]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 80038ee:	6893      	ldr	r3, [r2, #8]
 80038f0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038f4:	6093      	str	r3, [r2, #8]
 80038f6:	e74a      	b.n	800378e <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 80038f8:	2001      	movs	r0, #1
}
 80038fa:	4770      	bx	lr
      return HAL_ERROR;
 80038fc:	2001      	movs	r0, #1
 80038fe:	e055      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
          return HAL_ERROR;
 8003900:	2001      	movs	r0, #1
 8003902:	e053      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
      return HAL_ERROR;
 8003904:	2001      	movs	r0, #1
 8003906:	e051      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003908:	f013 0f01 	tst.w	r3, #1
 800390c:	f43f af44 	beq.w	8003798 <HAL_RCC_ClockConfig+0x6c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003910:	6863      	ldr	r3, [r4, #4]
 8003912:	2b03      	cmp	r3, #3
 8003914:	f43f af4f 	beq.w	80037b6 <HAL_RCC_ClockConfig+0x8a>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	2b02      	cmp	r3, #2
 800391a:	d09d      	beq.n	8003858 <HAL_RCC_ClockConfig+0x12c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1b4      	bne.n	800388a <HAL_RCC_ClockConfig+0x15e>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003920:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003924:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f013 0f02 	tst.w	r3, #2
 800392e:	d198      	bne.n	8003862 <HAL_RCC_ClockConfig+0x136>
          return HAL_ERROR;
 8003930:	2001      	movs	r0, #1
 8003932:	e03b      	b.n	80039ac <HAL_RCC_ClockConfig+0x280>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003934:	f013 0f01 	tst.w	r3, #1
 8003938:	d1ea      	bne.n	8003910 <HAL_RCC_ClockConfig+0x1e4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800393a:	4b1d      	ldr	r3, [pc, #116]	@ (80039b0 <HAL_RCC_ClockConfig+0x284>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 030f 	and.w	r3, r3, #15
 8003942:	42ab      	cmp	r3, r5
 8003944:	d90a      	bls.n	800395c <HAL_RCC_ClockConfig+0x230>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003946:	4a1a      	ldr	r2, [pc, #104]	@ (80039b0 <HAL_RCC_ClockConfig+0x284>)
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f023 030f 	bic.w	r3, r3, #15
 800394e:	432b      	orrs	r3, r5
 8003950:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003952:	6813      	ldr	r3, [r2, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	42ab      	cmp	r3, r5
 800395a:	d1d3      	bne.n	8003904 <HAL_RCC_ClockConfig+0x1d8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	6823      	ldr	r3, [r4, #0]
 800395e:	f013 0f04 	tst.w	r3, #4
 8003962:	d006      	beq.n	8003972 <HAL_RCC_ClockConfig+0x246>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003964:	4a13      	ldr	r2, [pc, #76]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 8003966:	6893      	ldr	r3, [r2, #8]
 8003968:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800396c:	68e1      	ldr	r1, [r4, #12]
 800396e:	430b      	orrs	r3, r1
 8003970:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	f013 0f08 	tst.w	r3, #8
 8003978:	d007      	beq.n	800398a <HAL_RCC_ClockConfig+0x25e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800397a:	4a0e      	ldr	r2, [pc, #56]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 800397c:	6893      	ldr	r3, [r2, #8]
 800397e:	6921      	ldr	r1, [r4, #16]
 8003980:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8003984:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003988:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800398a:	f7ff fb33 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
 800398e:	4b09      	ldr	r3, [pc, #36]	@ (80039b4 <HAL_RCC_ClockConfig+0x288>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003996:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_RCC_ClockConfig+0x29c>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
 800399a:	f003 031f 	and.w	r3, r3, #31
 800399e:	40d8      	lsrs	r0, r3
 80039a0:	4b0a      	ldr	r3, [pc, #40]	@ (80039cc <HAL_RCC_ClockConfig+0x2a0>)
 80039a2:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <HAL_RCC_ClockConfig+0x2a4>)
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	f7fe f8dc 	bl	8001b64 <HAL_InitTick>
}
 80039ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039b0:	40022000 	.word	0x40022000
 80039b4:	40021000 	.word	0x40021000
 80039b8:	0800b958 	.word	0x0800b958
 80039bc:	00f42400 	.word	0x00f42400
 80039c0:	007a1200 	.word	0x007a1200
 80039c4:	04c4b400 	.word	0x04c4b400
 80039c8:	0800b990 	.word	0x0800b990
 80039cc:	20000014 	.word	0x20000014
 80039d0:	200000c4 	.word	0x200000c4

080039d4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039d4:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <HAL_RCC_GetPCLK1Freq+0x18>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80039dc:	4a04      	ldr	r2, [pc, #16]	@ (80039f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80039de:	5cd3      	ldrb	r3, [r2, r3]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	4a03      	ldr	r2, [pc, #12]	@ (80039f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039e6:	6810      	ldr	r0, [r2, #0]
}
 80039e8:	40d8      	lsrs	r0, r3
 80039ea:	4770      	bx	lr
 80039ec:	40021000 	.word	0x40021000
 80039f0:	0800b988 	.word	0x0800b988
 80039f4:	20000014 	.word	0x20000014

080039f8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80039f8:	4b05      	ldr	r3, [pc, #20]	@ (8003a10 <HAL_RCC_GetPCLK2Freq+0x18>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003a00:	4a04      	ldr	r2, [pc, #16]	@ (8003a14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	f003 031f 	and.w	r3, r3, #31
 8003a08:	4a03      	ldr	r2, [pc, #12]	@ (8003a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a0a:	6810      	ldr	r0, [r2, #0]
}
 8003a0c:	40d8      	lsrs	r0, r3
 8003a0e:	4770      	bx	lr
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800b988 	.word	0x0800b988
 8003a18:	20000014 	.word	0x20000014

08003a1c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a1c:	230f      	movs	r3, #15
 8003a1e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003a20:	4b0b      	ldr	r3, [pc, #44]	@ (8003a50 <HAL_RCC_GetClockConfig+0x34>)
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	f002 0203 	and.w	r2, r2, #3
 8003a28:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 8003a30:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8003a38:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	08db      	lsrs	r3, r3, #3
 8003a3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a42:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a44:	4b03      	ldr	r3, [pc, #12]	@ (8003a54 <HAL_RCC_GetClockConfig+0x38>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 030f 	and.w	r3, r3, #15
 8003a4c:	600b      	str	r3, [r1, #0]
}
 8003a4e:	4770      	bx	lr
 8003a50:	40021000 	.word	0x40021000
 8003a54:	40022000 	.word	0x40022000

08003a58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	460d      	mov	r5, r1
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a5e:	4b50      	ldr	r3, [pc, #320]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	f013 0f03 	tst.w	r3, #3
 8003a66:	d00b      	beq.n	8003a80 <RCCEx_PLLSAI2_Config+0x28>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a68:	4b4d      	ldr	r3, [pc, #308]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	6802      	ldr	r2, [r0, #0]
 8003a6e:	f003 0303 	and.w	r3, r3, #3
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d001      	beq.n	8003a7a <RCCEx_PLLSAI2_Config+0x22>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003a76:	2001      	movs	r0, #1
 8003a78:	e00a      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
       ||
 8003a7a:	b9aa      	cbnz	r2, 8003aa8 <RCCEx_PLLSAI2_Config+0x50>
      status = HAL_ERROR;
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	e007      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a80:	6803      	ldr	r3, [r0, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d024      	beq.n	8003ad0 <RCCEx_PLLSAI2_Config+0x78>
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d029      	beq.n	8003ade <RCCEx_PLLSAI2_Config+0x86>
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d001      	beq.n	8003a92 <RCCEx_PLLSAI2_Config+0x3a>
 8003a8e:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8003a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a92:	4a43      	ldr	r2, [pc, #268]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003a94:	6812      	ldr	r2, [r2, #0]
 8003a96:	f012 0f02 	tst.w	r2, #2
 8003a9a:	d061      	beq.n	8003b60 <RCCEx_PLLSAI2_Config+0x108>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003a9c:	4940      	ldr	r1, [pc, #256]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003a9e:	68ca      	ldr	r2, [r1, #12]
 8003aa0:	f022 0203 	bic.w	r2, r2, #3
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aa8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ab2:	f7fe fba1 	bl	80021f8 <HAL_GetTick>
 8003ab6:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ab8:	4f39      	ldr	r7, [pc, #228]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003ac0:	d057      	beq.n	8003b72 <RCCEx_PLLSAI2_Config+0x11a>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ac2:	f7fe fb99 	bl	80021f8 <HAL_GetTick>
 8003ac6:	1b83      	subs	r3, r0, r6
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d9f6      	bls.n	8003aba <RCCEx_PLLSAI2_Config+0x62>
        status = HAL_TIMEOUT;
 8003acc:	2003      	movs	r0, #3
 8003ace:	e7df      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad0:	4a33      	ldr	r2, [pc, #204]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003ad2:	6812      	ldr	r2, [r2, #0]
 8003ad4:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003ad8:	d1e0      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x44>
 8003ada:	2001      	movs	r0, #1
 8003adc:	e7d8      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003ade:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003ae0:	6812      	ldr	r2, [r2, #0]
 8003ae2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003ae6:	d1d9      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x44>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ae8:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003af0:	d1d4      	bne.n	8003a9c <RCCEx_PLLSAI2_Config+0x44>
 8003af2:	2001      	movs	r0, #1
 8003af4:	e7cc      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003af6:	492a      	ldr	r1, [pc, #168]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003af8:	6948      	ldr	r0, [r1, #20]
 8003afa:	68a2      	ldr	r2, [r4, #8]
 8003afc:	68e3      	ldr	r3, [r4, #12]
 8003afe:	06db      	lsls	r3, r3, #27
 8003b00:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b04:	4a27      	ldr	r2, [pc, #156]	@ (8003ba4 <RCCEx_PLLSAI2_Config+0x14c>)
 8003b06:	4002      	ands	r2, r0
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	6862      	ldr	r2, [r4, #4]
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b12:	614b      	str	r3, [r1, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b14:	4a22      	ldr	r2, [pc, #136]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003b16:	6813      	ldr	r3, [r2, #0]
 8003b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b1c:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003b1e:	f7fe fb6b 	bl	80021f8 <HAL_GetTick>
 8003b22:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b24:	4e1e      	ldr	r6, [pc, #120]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003b26:	6833      	ldr	r3, [r6, #0]
 8003b28:	f013 5f00 	tst.w	r3, #536870912	@ 0x20000000
 8003b2c:	d11a      	bne.n	8003b64 <RCCEx_PLLSAI2_Config+0x10c>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b2e:	f7fe fb63 	bl	80021f8 <HAL_GetTick>
 8003b32:	1b40      	subs	r0, r0, r5
 8003b34:	2802      	cmp	r0, #2
 8003b36:	d9f6      	bls.n	8003b26 <RCCEx_PLLSAI2_Config+0xce>
          status = HAL_TIMEOUT;
 8003b38:	2003      	movs	r0, #3
 8003b3a:	e7a9      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b3c:	4918      	ldr	r1, [pc, #96]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003b3e:	6948      	ldr	r0, [r1, #20]
 8003b40:	68a2      	ldr	r2, [r4, #8]
 8003b42:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <RCCEx_PLLSAI2_Config+0x150>)
 8003b44:	4003      	ands	r3, r0
 8003b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b4a:	6862      	ldr	r2, [r4, #4]
 8003b4c:	3a01      	subs	r2, #1
 8003b4e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b52:	6922      	ldr	r2, [r4, #16]
 8003b54:	0852      	lsrs	r2, r2, #1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003b5c:	614b      	str	r3, [r1, #20]
 8003b5e:	e7d9      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xbc>
 8003b60:	2001      	movs	r0, #1
 8003b62:	e795      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b64:	4a0e      	ldr	r2, [pc, #56]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003b66:	6953      	ldr	r3, [r2, #20]
 8003b68:	69a1      	ldr	r1, [r4, #24]
 8003b6a:	430b      	orrs	r3, r1
 8003b6c:	6153      	str	r3, [r2, #20]
 8003b6e:	2000      	movs	r0, #0
  return status;
 8003b70:	e78e      	b.n	8003a90 <RCCEx_PLLSAI2_Config+0x38>
      if(Divider == DIVIDER_P_UPDATE)
 8003b72:	2d00      	cmp	r5, #0
 8003b74:	d0bf      	beq.n	8003af6 <RCCEx_PLLSAI2_Config+0x9e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b76:	2d01      	cmp	r5, #1
 8003b78:	d0e0      	beq.n	8003b3c <RCCEx_PLLSAI2_Config+0xe4>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b7a:	4909      	ldr	r1, [pc, #36]	@ (8003ba0 <RCCEx_PLLSAI2_Config+0x148>)
 8003b7c:	6948      	ldr	r0, [r1, #20]
 8003b7e:	68a2      	ldr	r2, [r4, #8]
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <RCCEx_PLLSAI2_Config+0x154>)
 8003b82:	4003      	ands	r3, r0
 8003b84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b88:	6862      	ldr	r2, [r4, #4]
 8003b8a:	3a01      	subs	r2, #1
 8003b8c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003b90:	6962      	ldr	r2, [r4, #20]
 8003b92:	0852      	lsrs	r2, r2, #1
 8003b94:	3a01      	subs	r2, #1
 8003b96:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003b9a:	614b      	str	r3, [r1, #20]
 8003b9c:	e7ba      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0xbc>
 8003b9e:	bf00      	nop
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	07ff800f 	.word	0x07ff800f
 8003ba8:	ff9f800f 	.word	0xff9f800f
 8003bac:	f9ff800f 	.word	0xf9ff800f

08003bb0 <RCCEx_PLLSAI1_Config>:
{
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bb6:	4b50      	ldr	r3, [pc, #320]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f013 0f03 	tst.w	r3, #3
 8003bbe:	d00b      	beq.n	8003bd8 <RCCEx_PLLSAI1_Config+0x28>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003bc0:	4b4d      	ldr	r3, [pc, #308]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	6802      	ldr	r2, [r0, #0]
 8003bc6:	f003 0303 	and.w	r3, r3, #3
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d001      	beq.n	8003bd2 <RCCEx_PLLSAI1_Config+0x22>
      status = HAL_ERROR;
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e00a      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
       ||
 8003bd2:	b9aa      	cbnz	r2, 8003c00 <RCCEx_PLLSAI1_Config+0x50>
      status = HAL_ERROR;
 8003bd4:	2001      	movs	r0, #1
 8003bd6:	e007      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
    switch(PllSai1->PLLSAI1Source)
 8003bd8:	6803      	ldr	r3, [r0, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d024      	beq.n	8003c28 <RCCEx_PLLSAI1_Config+0x78>
 8003bde:	2b03      	cmp	r3, #3
 8003be0:	d029      	beq.n	8003c36 <RCCEx_PLLSAI1_Config+0x86>
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <RCCEx_PLLSAI1_Config+0x3a>
 8003be6:	2001      	movs	r0, #1
}
 8003be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bea:	4a43      	ldr	r2, [pc, #268]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	f012 0f02 	tst.w	r2, #2
 8003bf2:	d061      	beq.n	8003cb8 <RCCEx_PLLSAI1_Config+0x108>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003bf4:	4940      	ldr	r1, [pc, #256]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003bf6:	68ca      	ldr	r2, [r1, #12]
 8003bf8:	f022 0203 	bic.w	r2, r2, #3
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8003c00:	4a3d      	ldr	r2, [pc, #244]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c08:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003c0a:	f7fe faf5 	bl	80021f8 <HAL_GetTick>
 8003c0e:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003c10:	4f39      	ldr	r7, [pc, #228]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8003c18:	d057      	beq.n	8003cca <RCCEx_PLLSAI1_Config+0x11a>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c1a:	f7fe faed 	bl	80021f8 <HAL_GetTick>
 8003c1e:	1b83      	subs	r3, r0, r6
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d9f6      	bls.n	8003c12 <RCCEx_PLLSAI1_Config+0x62>
        status = HAL_TIMEOUT;
 8003c24:	2003      	movs	r0, #3
 8003c26:	e7df      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c28:	4a33      	ldr	r2, [pc, #204]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8003c30:	d1e0      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x44>
 8003c32:	2001      	movs	r0, #1
 8003c34:	e7d8      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c36:	4a30      	ldr	r2, [pc, #192]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003c3e:	d1d9      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x44>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c40:	4a2d      	ldr	r2, [pc, #180]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c42:	6812      	ldr	r2, [r2, #0]
 8003c44:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003c48:	d1d4      	bne.n	8003bf4 <RCCEx_PLLSAI1_Config+0x44>
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	e7cc      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c4e:	492a      	ldr	r1, [pc, #168]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c50:	6908      	ldr	r0, [r1, #16]
 8003c52:	68a2      	ldr	r2, [r4, #8]
 8003c54:	68e3      	ldr	r3, [r4, #12]
 8003c56:	06db      	lsls	r3, r3, #27
 8003c58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003c5c:	4a27      	ldr	r2, [pc, #156]	@ (8003cfc <RCCEx_PLLSAI1_Config+0x14c>)
 8003c5e:	4002      	ands	r2, r0
 8003c60:	4313      	orrs	r3, r2
 8003c62:	6862      	ldr	r2, [r4, #4]
 8003c64:	3a01      	subs	r2, #1
 8003c66:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003c6a:	610b      	str	r3, [r1, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c6c:	4a22      	ldr	r2, [pc, #136]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c6e:	6813      	ldr	r3, [r2, #0]
 8003c70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c74:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003c76:	f7fe fabf 	bl	80021f8 <HAL_GetTick>
 8003c7a:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c7c:	4e1e      	ldr	r6, [pc, #120]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c7e:	6833      	ldr	r3, [r6, #0]
 8003c80:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
 8003c84:	d11a      	bne.n	8003cbc <RCCEx_PLLSAI1_Config+0x10c>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c86:	f7fe fab7 	bl	80021f8 <HAL_GetTick>
 8003c8a:	1b40      	subs	r0, r0, r5
 8003c8c:	2802      	cmp	r0, #2
 8003c8e:	d9f6      	bls.n	8003c7e <RCCEx_PLLSAI1_Config+0xce>
          status = HAL_TIMEOUT;
 8003c90:	2003      	movs	r0, #3
 8003c92:	e7a9      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003c94:	4918      	ldr	r1, [pc, #96]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003c96:	6908      	ldr	r0, [r1, #16]
 8003c98:	68a2      	ldr	r2, [r4, #8]
 8003c9a:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <RCCEx_PLLSAI1_Config+0x150>)
 8003c9c:	4003      	ands	r3, r0
 8003c9e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003caa:	6922      	ldr	r2, [r4, #16]
 8003cac:	0852      	lsrs	r2, r2, #1
 8003cae:	3a01      	subs	r2, #1
 8003cb0:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8003cb4:	610b      	str	r3, [r1, #16]
 8003cb6:	e7d9      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xbc>
 8003cb8:	2001      	movs	r0, #1
 8003cba:	e795      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003cbe:	6913      	ldr	r3, [r2, #16]
 8003cc0:	69a1      	ldr	r1, [r4, #24]
 8003cc2:	430b      	orrs	r3, r1
 8003cc4:	6113      	str	r3, [r2, #16]
 8003cc6:	2000      	movs	r0, #0
  return status;
 8003cc8:	e78e      	b.n	8003be8 <RCCEx_PLLSAI1_Config+0x38>
      if(Divider == DIVIDER_P_UPDATE)
 8003cca:	2d00      	cmp	r5, #0
 8003ccc:	d0bf      	beq.n	8003c4e <RCCEx_PLLSAI1_Config+0x9e>
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cce:	2d01      	cmp	r5, #1
 8003cd0:	d0e0      	beq.n	8003c94 <RCCEx_PLLSAI1_Config+0xe4>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003cd2:	4909      	ldr	r1, [pc, #36]	@ (8003cf8 <RCCEx_PLLSAI1_Config+0x148>)
 8003cd4:	6908      	ldr	r0, [r1, #16]
 8003cd6:	68a2      	ldr	r2, [r4, #8]
 8003cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003d04 <RCCEx_PLLSAI1_Config+0x154>)
 8003cda:	4003      	ands	r3, r0
 8003cdc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003ce0:	6862      	ldr	r2, [r4, #4]
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003ce8:	6962      	ldr	r2, [r4, #20]
 8003cea:	0852      	lsrs	r2, r2, #1
 8003cec:	3a01      	subs	r2, #1
 8003cee:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8003cf2:	610b      	str	r3, [r1, #16]
 8003cf4:	e7ba      	b.n	8003c6c <RCCEx_PLLSAI1_Config+0xbc>
 8003cf6:	bf00      	nop
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	07ff800f 	.word	0x07ff800f
 8003d00:	ff9f800f 	.word	0xff9f800f
 8003d04:	f9ff800f 	.word	0xf9ff800f

08003d08 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d10:	6803      	ldr	r3, [r0, #0]
 8003d12:	f413 6f00 	tst.w	r3, #2048	@ 0x800
 8003d16:	d02c      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d18:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d01c      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003d1e:	d80a      	bhi.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x2e>
 8003d20:	b303      	cbz	r3, 8003d64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	bf18      	it	ne
 8003d26:	2701      	movne	r7, #1
 8003d28:	d124      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	3020      	adds	r0, #32
 8003d2e:	f7ff fe93 	bl	8003a58 <RCCEx_PLLSAI2_Config>
 8003d32:	4607      	mov	r7, r0
      break;
 8003d34:	e01b      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003d36:	2b60      	cmp	r3, #96	@ 0x60
 8003d38:	d003      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
 8003d3a:	2b80      	cmp	r3, #128	@ 0x80
 8003d3c:	bf18      	it	ne
 8003d3e:	2701      	movne	r7, #1
 8003d40:	d118      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d42:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003d44:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8003d48:	f023 03e0 	bic.w	r3, r3, #224	@ 0xe0
 8003d4c:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
 8003d4e:	430b      	orrs	r3, r1
 8003d50:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003d54:	2700      	movs	r7, #0
 8003d56:	e00d      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d58:	4a26      	ldr	r2, [pc, #152]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003d5a:	68d3      	ldr	r3, [r2, #12]
 8003d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d60:	60d3      	str	r3, [r2, #12]
    if(ret == HAL_OK)
 8003d62:	e7ee      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d64:	2100      	movs	r1, #0
 8003d66:	3004      	adds	r0, #4
 8003d68:	f7ff ff22 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
 8003d6c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8003d6e:	b90f      	cbnz	r7, 8003d74 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8003d70:	e7e7      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x3a>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d72:	2700      	movs	r7, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8003d7a:	d03d      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003d7c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d82:	d027      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8003d84:	d80d      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8003d86:	b363      	cbz	r3, 8003de2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8003d88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d8c:	d106      	bne.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d8e:	2100      	movs	r1, #0
 8003d90:	f104 0020 	add.w	r0, r4, #32
 8003d94:	f7ff fe60 	bl	8003a58 <RCCEx_PLLSAI2_Config>
 8003d98:	4680      	mov	r8, r0
      break;
 8003d9a:	e00a      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003d9c:	2701      	movs	r7, #1
 8003d9e:	46b8      	mov	r8, r7
 8003da0:	e02b      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8003da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da6:	d022      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xe6>
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dac:	bf08      	it	eq
 8003dae:	46b8      	moveq	r8, r7
 8003db0:	d10d      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    if(ret == HAL_OK)
 8003db2:	f1b8 0f00 	cmp.w	r8, #0
 8003db6:	f040 8183 	bne.w	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dba:	4a0e      	ldr	r2, [pc, #56]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003dbc:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8003dc0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003dc4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8003dc6:	430b      	orrs	r3, r1
 8003dc8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003dcc:	e015      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xf2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003dce:	2701      	movs	r7, #1
 8003dd0:	46b8      	mov	r8, r7
 8003dd2:	e012      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd4:	4a07      	ldr	r2, [pc, #28]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8003dd6:	68d3      	ldr	r3, [r2, #12]
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ddc:	60d3      	str	r3, [r2, #12]
      break;
 8003dde:	46b8      	mov	r8, r7
 8003de0:	e7e7      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de2:	2100      	movs	r1, #0
 8003de4:	1d20      	adds	r0, r4, #4
 8003de6:	f7ff fee3 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
 8003dea:	4680      	mov	r8, r0
      break;
 8003dec:	e7e1      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003dee:	46b8      	mov	r8, r7
 8003df0:	e7df      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xaa>
 8003df2:	bf00      	nop
 8003df4:	40021000 	.word	0x40021000
 8003df8:	46b8      	mov	r8, r7
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dfa:	6823      	ldr	r3, [r4, #0]
 8003dfc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003e00:	d029      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e02:	4bb2      	ldr	r3, [pc, #712]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e06:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003e0a:	f040 815b 	bne.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e0e:	4baf      	ldr	r3, [pc, #700]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003e12:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e16:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1e:	9301      	str	r3, [sp, #4]
 8003e20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003e22:	f04f 0901 	mov.w	r9, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e26:	4aaa      	ldr	r2, [pc, #680]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003e28:	6813      	ldr	r3, [r2, #0]
 8003e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e2e:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003e30:	f7fe f9e2 	bl	80021f8 <HAL_GetTick>
 8003e34:	4605      	mov	r5, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e36:	4ea6      	ldr	r6, [pc, #664]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8003e38:	6833      	ldr	r3, [r6, #0]
 8003e3a:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003e3e:	f040 8149 	bne.w	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fe f9d9 	bl	80021f8 <HAL_GetTick>
 8003e46:	1b40      	subs	r0, r0, r5
 8003e48:	2802      	cmp	r0, #2
 8003e4a:	d9f5      	bls.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = HAL_TIMEOUT;
 8003e4c:	2703      	movs	r7, #3
    if(pwrclkchanged == SET)
 8003e4e:	f1b9 0f00 	cmp.w	r9, #0
 8003e52:	f040 8181 	bne.w	8004158 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	f013 0f01 	tst.w	r3, #1
 8003e5c:	d008      	beq.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e5e:	4a9b      	ldr	r2, [pc, #620]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e60:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003e64:	f023 0303 	bic.w	r3, r3, #3
 8003e68:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e70:	6823      	ldr	r3, [r4, #0]
 8003e72:	f013 0f02 	tst.w	r3, #2
 8003e76:	d008      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x182>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e78:	4a94      	ldr	r2, [pc, #592]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e7a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003e7e:	f023 030c 	bic.w	r3, r3, #12
 8003e82:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8003e84:	430b      	orrs	r3, r1
 8003e86:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	f013 0f04 	tst.w	r3, #4
 8003e90:	d008      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e92:	4a8e      	ldr	r2, [pc, #568]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003e94:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003e98:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003e9c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003ea4:	6823      	ldr	r3, [r4, #0]
 8003ea6:	f013 0f08 	tst.w	r3, #8
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003eac:	4a87      	ldr	r2, [pc, #540]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003eae:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003eb2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003eb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ebe:	6823      	ldr	r3, [r4, #0]
 8003ec0:	f013 0f10 	tst.w	r3, #16
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ec6:	4a81      	ldr	r2, [pc, #516]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003ec8:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003ecc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ed0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	f013 0f20 	tst.w	r3, #32
 8003ede:	d008      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ee0:	4a7a      	ldr	r2, [pc, #488]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003ee6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003eea:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003eec:	430b      	orrs	r3, r1
 8003eee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ef2:	6823      	ldr	r3, [r4, #0]
 8003ef4:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8003ef8:	d008      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x204>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003efa:	4a74      	ldr	r2, [pc, #464]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003efc:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f00:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 8003f04:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 8003f06:	430b      	orrs	r3, r1
 8003f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8003f12:	d008      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f14:	4a6d      	ldr	r2, [pc, #436]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f16:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f1a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003f1e:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8003f20:	430b      	orrs	r3, r1
 8003f22:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003f2c:	d008      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f2e:	4a67      	ldr	r2, [pc, #412]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f30:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f34:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f38:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003f46:	d008      	beq.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f48:	4a60      	ldr	r2, [pc, #384]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f4e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003f52:	6da1      	ldr	r1, [r4, #88]	@ 0x58
 8003f54:	430b      	orrs	r3, r1
 8003f56:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003f60:	d008      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f62:	4a5a      	ldr	r2, [pc, #360]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f64:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f68:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8003f6c:	6de1      	ldr	r1, [r4, #92]	@ 0x5c
 8003f6e:	430b      	orrs	r3, r1
 8003f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f74:	6823      	ldr	r3, [r4, #0]
 8003f76:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8003f7a:	d008      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x286>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f7c:	4a53      	ldr	r2, [pc, #332]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f7e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8003f82:	f023 0303 	bic.w	r3, r3, #3
 8003f86:	6e21      	ldr	r1, [r4, #96]	@ 0x60
 8003f88:	430b      	orrs	r3, r1
 8003f8a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 8003f94:	d011      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f96:	4a4d      	ldr	r2, [pc, #308]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003f98:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003f9c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003fa0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003fa8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8003faa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003fae:	f000 80d9 	beq.w	8004164 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003fb2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003fb6:	f000 80da 	beq.w	800416e <HAL_RCCEx_PeriphCLKConfig+0x466>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 8003fc0:	d020      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003fc2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003fc4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fc8:	f000 80d9 	beq.w	800417e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8003fce:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8003fd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fd6:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8003fda:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003fde:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003fe2:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003fea:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003fec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003ff0:	f000 80cd 	beq.w	800418e <HAL_RCCEx_PeriphCLKConfig+0x486>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8003ff4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ff8:	f000 80cf 	beq.w	800419a <HAL_RCCEx_PeriphCLKConfig+0x492>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004000:	f000 80d1 	beq.w	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x49e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	f413 2f80 	tst.w	r3, #262144	@ 0x40000
 800400a:	d011      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x328>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800400c:	4a2f      	ldr	r2, [pc, #188]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800400e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8004012:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8004016:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
 8004018:	430b      	orrs	r3, r1
 800401a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800401e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
 8004020:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004024:	f000 80c7 	beq.w	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004028:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800402c:	f000 80c8 	beq.w	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004030:	6823      	ldr	r3, [r4, #0]
 8004032:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8004036:	d00f      	beq.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x350>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004038:	4a24      	ldr	r2, [pc, #144]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800403a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800403e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8004042:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8004046:	430b      	orrs	r3, r1
 8004048:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800404c:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8004050:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004054:	f000 80bc 	beq.w	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004058:	6823      	ldr	r3, [r4, #0]
 800405a:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800405e:	d009      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004060:	4a1a      	ldr	r2, [pc, #104]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004062:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
 800406e:	430b      	orrs	r3, r1
 8004070:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	f413 1f00 	tst.w	r3, #2097152	@ 0x200000
 800407a:	d009      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x388>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800407c:	4a13      	ldr	r2, [pc, #76]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800407e:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8004082:	f023 0318 	bic.w	r3, r3, #24
 8004086:	f8d4 1088 	ldr.w	r1, [r4, #136]	@ 0x88
 800408a:	430b      	orrs	r3, r1
 800408c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004090:	6823      	ldr	r3, [r4, #0]
 8004092:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8004096:	d00f      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004098:	4a0c      	ldr	r2, [pc, #48]	@ (80040cc <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800409a:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 800409e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80040a2:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
 80040a6:	430b      	orrs	r3, r1
 80040a8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80040ac:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 80040b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80040b4:	f000 8094 	beq.w	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
}
 80040b8:	4638      	mov	r0, r7
 80040ba:	b003      	add	sp, #12
 80040bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040c0:	4647      	mov	r7, r8
 80040c2:	e69a      	b.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0xf2>
    FlagStatus       pwrclkchanged = RESET;
 80040c4:	f04f 0900 	mov.w	r9, #0
 80040c8:	e6ad      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
 80040ca:	bf00      	nop
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
    if(ret == HAL_OK)
 80040d4:	f1b8 0f00 	cmp.w	r8, #0
 80040d8:	d13c      	bne.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x44c>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040da:	4b44      	ldr	r3, [pc, #272]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040e0:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80040e4:	d02b      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x436>
 80040e6:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d012      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x40c>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80040ee:	4a3f      	ldr	r2, [pc, #252]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80040f0:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 80040f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 80040f8:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 80040fc:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 8004100:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004104:	f8d2 1090 	ldr.w	r1, [r2, #144]	@ 0x90
 8004108:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800410c:	f8c2 1090 	str.w	r1, [r2, #144]	@ 0x90
        RCC->BDCR = tmpregister;
 8004110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004114:	f013 0f01 	tst.w	r3, #1
 8004118:	d011      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x436>
        tickstart = HAL_GetTick();
 800411a:	f7fe f86d 	bl	80021f8 <HAL_GetTick>
 800411e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004120:	4e32      	ldr	r6, [pc, #200]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004122:	f241 3888 	movw	r8, #5000	@ 0x1388
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004126:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800412a:	f013 0f02 	tst.w	r3, #2
 800412e:	d106      	bne.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x436>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe f862 	bl	80021f8 <HAL_GetTick>
 8004134:	1b40      	subs	r0, r0, r5
 8004136:	4540      	cmp	r0, r8
 8004138:	d9f5      	bls.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x41e>
            ret = HAL_TIMEOUT;
 800413a:	2703      	movs	r7, #3
 800413c:	e687      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x146>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800413e:	4a2b      	ldr	r2, [pc, #172]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004140:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8004144:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004148:	f8d4 1090 	ldr.w	r1, [r4, #144]	@ 0x90
 800414c:	430b      	orrs	r3, r1
 800414e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004152:	e67c      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8004154:	4647      	mov	r7, r8
 8004156:	e67a      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x146>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004158:	4a24      	ldr	r2, [pc, #144]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800415a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800415c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004160:	6593      	str	r3, [r2, #88]	@ 0x58
 8004162:	e678      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004164:	68d3      	ldr	r3, [r2, #12]
 8004166:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800416a:	60d3      	str	r3, [r2, #12]
 800416c:	e725      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800416e:	2101      	movs	r1, #1
 8004170:	1d20      	adds	r0, r4, #4
 8004172:	f7ff fd1d 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
          status = ret;
 8004176:	2800      	cmp	r0, #0
 8004178:	bf18      	it	ne
 800417a:	4607      	movne	r7, r0
 800417c:	e71d      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x2b2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800417e:	4a1b      	ldr	r2, [pc, #108]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004180:	f8d2 309c 	ldr.w	r3, [r2, #156]	@ 0x9c
 8004184:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004188:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 800418c:	e72d      	b.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800418e:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8004190:	68d3      	ldr	r3, [r2, #12]
 8004192:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004196:	60d3      	str	r3, [r2, #12]
 8004198:	e734      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800419a:	4a14      	ldr	r2, [pc, #80]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800419c:	68d3      	ldr	r3, [r2, #12]
 800419e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a2:	60d3      	str	r3, [r2, #12]
 80041a4:	e72e      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041a6:	2101      	movs	r1, #1
 80041a8:	1d20      	adds	r0, r4, #4
 80041aa:	f7ff fd01 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
        status = ret;
 80041ae:	2800      	cmp	r0, #0
 80041b0:	bf18      	it	ne
 80041b2:	4607      	movne	r7, r0
 80041b4:	e726      	b.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b6:	68d3      	ldr	r3, [r2, #12]
 80041b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041bc:	60d3      	str	r3, [r2, #12]
 80041be:	e737      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x328>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c0:	2101      	movs	r1, #1
 80041c2:	1d20      	adds	r0, r4, #4
 80041c4:	f7ff fcf4 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
        status = ret;
 80041c8:	2800      	cmp	r0, #0
 80041ca:	bf18      	it	ne
 80041cc:	4607      	movne	r7, r0
 80041ce:	e72f      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x328>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80041d0:	2102      	movs	r1, #2
 80041d2:	1d20      	adds	r0, r4, #4
 80041d4:	f7ff fcec 	bl	8003bb0 <RCCEx_PLLSAI1_Config>
        status = ret;
 80041d8:	2800      	cmp	r0, #0
 80041da:	bf18      	it	ne
 80041dc:	4607      	movne	r7, r0
 80041de:	e73b      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x350>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e0:	68d3      	ldr	r3, [r2, #12]
 80041e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041e6:	60d3      	str	r3, [r2, #12]
 80041e8:	e766      	b.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80041ea:	bf00      	nop
 80041ec:	40021000 	.word	0x40021000

080041f0 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041f4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d136      	bne.n	800426c <HAL_TIM_Base_Start_IT+0x78>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fe:	2302      	movs	r3, #2
 8004200:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004204:	6802      	ldr	r2, [r0, #0]
 8004206:	68d3      	ldr	r3, [r2, #12]
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800420e:	6803      	ldr	r3, [r0, #0]
 8004210:	4a19      	ldr	r2, [pc, #100]	@ (8004278 <HAL_TIM_Base_Start_IT+0x84>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d01c      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 8004216:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800421a:	d019      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 800421c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004220:	4293      	cmp	r3, r2
 8004222:	d015      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 8004224:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004228:	4293      	cmp	r3, r2
 800422a:	d011      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 800422c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004230:	4293      	cmp	r3, r2
 8004232:	d00d      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 8004234:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004238:	4293      	cmp	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
 800423c:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 8004240:	4293      	cmp	r3, r2
 8004242:	d005      	beq.n	8004250 <HAL_TIM_Base_Start_IT+0x5c>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	f042 0201 	orr.w	r2, r2, #1
 800424a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800424c:	2000      	movs	r0, #0
 800424e:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004250:	6899      	ldr	r1, [r3, #8]
 8004252:	4a0a      	ldr	r2, [pc, #40]	@ (800427c <HAL_TIM_Base_Start_IT+0x88>)
 8004254:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	2a06      	cmp	r2, #6
 8004258:	d00a      	beq.n	8004270 <HAL_TIM_Base_Start_IT+0x7c>
 800425a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800425e:	d009      	beq.n	8004274 <HAL_TIM_Base_Start_IT+0x80>
      __HAL_TIM_ENABLE(htim);
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004268:	2000      	movs	r0, #0
 800426a:	4770      	bx	lr
    return HAL_ERROR;
 800426c:	2001      	movs	r0, #1
 800426e:	4770      	bx	lr
  return HAL_OK;
 8004270:	2000      	movs	r0, #0
 8004272:	4770      	bx	lr
 8004274:	2000      	movs	r0, #0
}
 8004276:	4770      	bx	lr
 8004278:	40012c00 	.word	0x40012c00
 800427c:	00010007 	.word	0x00010007

08004280 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004280:	4770      	bx	lr

08004282 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004282:	4770      	bx	lr

08004284 <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004284:	4770      	bx	lr

08004286 <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004286:	4770      	bx	lr

08004288 <HAL_TIM_IRQHandler>:
{
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4604      	mov	r4, r0
  uint32_t itsource = htim->Instance->DIER;
 800428c:	6803      	ldr	r3, [r0, #0]
 800428e:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004290:	691d      	ldr	r5, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004292:	f015 0f02 	tst.w	r5, #2
 8004296:	d010      	beq.n	80042ba <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004298:	f016 0f02 	tst.w	r6, #2
 800429c:	d00d      	beq.n	80042ba <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800429e:	f06f 0202 	mvn.w	r2, #2
 80042a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a8:	6803      	ldr	r3, [r0, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f013 0f03 	tst.w	r3, #3
 80042b0:	d05e      	beq.n	8004370 <HAL_TIM_IRQHandler+0xe8>
          HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	f7ff ffe6 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b6:	2300      	movs	r3, #0
 80042b8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042ba:	f015 0f04 	tst.w	r5, #4
 80042be:	d012      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x5e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042c0:	f016 0f04 	tst.w	r6, #4
 80042c4:	d00f      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x5e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	f06f 0204 	mvn.w	r2, #4
 80042cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ce:	2302      	movs	r3, #2
 80042d0:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042d2:	6823      	ldr	r3, [r4, #0]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80042da:	d04f      	beq.n	800437c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80042dc:	4620      	mov	r0, r4
 80042de:	f7ff ffd0 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042e2:	2300      	movs	r3, #0
 80042e4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80042e6:	f015 0f08 	tst.w	r5, #8
 80042ea:	d012      	beq.n	8004312 <HAL_TIM_IRQHandler+0x8a>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80042ec:	f016 0f08 	tst.w	r6, #8
 80042f0:	d00f      	beq.n	8004312 <HAL_TIM_IRQHandler+0x8a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	f06f 0208 	mvn.w	r2, #8
 80042f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042fa:	2304      	movs	r3, #4
 80042fc:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042fe:	6823      	ldr	r3, [r4, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f013 0f03 	tst.w	r3, #3
 8004306:	d040      	beq.n	800438a <HAL_TIM_IRQHandler+0x102>
        HAL_TIM_IC_CaptureCallback(htim);
 8004308:	4620      	mov	r0, r4
 800430a:	f7ff ffba 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430e:	2300      	movs	r3, #0
 8004310:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004312:	f015 0f10 	tst.w	r5, #16
 8004316:	d012      	beq.n	800433e <HAL_TIM_IRQHandler+0xb6>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004318:	f016 0f10 	tst.w	r6, #16
 800431c:	d00f      	beq.n	800433e <HAL_TIM_IRQHandler+0xb6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800431e:	6823      	ldr	r3, [r4, #0]
 8004320:	f06f 0210 	mvn.w	r2, #16
 8004324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004326:	2308      	movs	r3, #8
 8004328:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 8004332:	d031      	beq.n	8004398 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 8004334:	4620      	mov	r0, r4
 8004336:	f7ff ffa4 	bl	8004282 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433a:	2300      	movs	r3, #0
 800433c:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800433e:	f015 0f01 	tst.w	r5, #1
 8004342:	d002      	beq.n	800434a <HAL_TIM_IRQHandler+0xc2>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004344:	f016 0f01 	tst.w	r6, #1
 8004348:	d12d      	bne.n	80043a6 <HAL_TIM_IRQHandler+0x11e>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800434a:	f415 5f02 	tst.w	r5, #8320	@ 0x2080
 800434e:	d044      	beq.n	80043da <HAL_TIM_IRQHandler+0x152>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004350:	f016 0f80 	tst.w	r6, #128	@ 0x80
 8004354:	d12f      	bne.n	80043b6 <HAL_TIM_IRQHandler+0x12e>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004356:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800435a:	d002      	beq.n	8004362 <HAL_TIM_IRQHandler+0xda>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800435c:	f016 0f40 	tst.w	r6, #64	@ 0x40
 8004360:	d142      	bne.n	80043e8 <HAL_TIM_IRQHandler+0x160>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004362:	f015 0f20 	tst.w	r5, #32
 8004366:	d002      	beq.n	800436e <HAL_TIM_IRQHandler+0xe6>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004368:	f016 0f20 	tst.w	r6, #32
 800436c:	d144      	bne.n	80043f8 <HAL_TIM_IRQHandler+0x170>
}
 800436e:	bd70      	pop	{r4, r5, r6, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004370:	f7ff ff86 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004374:	4620      	mov	r0, r4
 8004376:	f7ff ff85 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
 800437a:	e79c      	b.n	80042b6 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800437c:	4620      	mov	r0, r4
 800437e:	f7ff ff7f 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff ff7e 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
 8004388:	e7ab      	b.n	80042e2 <HAL_TIM_IRQHandler+0x5a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff ff78 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	4620      	mov	r0, r4
 8004392:	f7ff ff77 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
 8004396:	e7ba      	b.n	800430e <HAL_TIM_IRQHandler+0x86>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004398:	4620      	mov	r0, r4
 800439a:	f7ff ff71 	bl	8004280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800439e:	4620      	mov	r0, r4
 80043a0:	f7ff ff70 	bl	8004284 <HAL_TIM_PWM_PulseFinishedCallback>
 80043a4:	e7c9      	b.n	800433a <HAL_TIM_IRQHandler+0xb2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	f06f 0201 	mvn.w	r2, #1
 80043ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ae:	4620      	mov	r0, r4
 80043b0:	f7fd f898 	bl	80014e4 <HAL_TIM_PeriodElapsedCallback>
 80043b4:	e7c9      	b.n	800434a <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80043bc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80043be:	4620      	mov	r0, r4
 80043c0:	f000 f901 	bl	80045c6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043c4:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80043c8:	d0c5      	beq.n	8004356 <HAL_TIM_IRQHandler+0xce>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80043d0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80043d2:	4620      	mov	r0, r4
 80043d4:	f000 f8f8 	bl	80045c8 <HAL_TIMEx_Break2Callback>
 80043d8:	e7bd      	b.n	8004356 <HAL_TIM_IRQHandler+0xce>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80043de:	d0ba      	beq.n	8004356 <HAL_TIM_IRQHandler+0xce>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043e0:	f016 0f80 	tst.w	r6, #128	@ 0x80
 80043e4:	d0b7      	beq.n	8004356 <HAL_TIM_IRQHandler+0xce>
 80043e6:	e7f0      	b.n	80043ca <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80043e8:	6823      	ldr	r3, [r4, #0]
 80043ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80043ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80043f0:	4620      	mov	r0, r4
 80043f2:	f7ff ff48 	bl	8004286 <HAL_TIM_TriggerCallback>
 80043f6:	e7b4      	b.n	8004362 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80043f8:	6823      	ldr	r3, [r4, #0]
 80043fa:	f06f 0220 	mvn.w	r2, #32
 80043fe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004400:	4620      	mov	r0, r4
 8004402:	f000 f8df 	bl	80045c4 <HAL_TIMEx_CommutCallback>
}
 8004406:	e7b2      	b.n	800436e <HAL_TIM_IRQHandler+0xe6>

08004408 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004408:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800440a:	4a55      	ldr	r2, [pc, #340]	@ (8004560 <TIM_Base_SetConfig+0x158>)
 800440c:	4290      	cmp	r0, r2
 800440e:	d054      	beq.n	80044ba <TIM_Base_SetConfig+0xb2>
 8004410:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8004414:	d06f      	beq.n	80044f6 <TIM_Base_SetConfig+0xee>
 8004416:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800441a:	4290      	cmp	r0, r2
 800441c:	f000 8099 	beq.w	8004552 <TIM_Base_SetConfig+0x14a>
 8004420:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004424:	4290      	cmp	r0, r2
 8004426:	f000 808f 	beq.w	8004548 <TIM_Base_SetConfig+0x140>
 800442a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800442e:	4290      	cmp	r0, r2
 8004430:	d073      	beq.n	800451a <TIM_Base_SetConfig+0x112>
 8004432:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 8004436:	4290      	cmp	r0, r2
 8004438:	d074      	beq.n	8004524 <TIM_Base_SetConfig+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443a:	f502 6240 	add.w	r2, r2, #3072	@ 0xc00
 800443e:	4290      	cmp	r0, r2
 8004440:	d011      	beq.n	8004466 <TIM_Base_SetConfig+0x5e>
 8004442:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004446:	4290      	cmp	r0, r2
 8004448:	d01b      	beq.n	8004482 <TIM_Base_SetConfig+0x7a>
 800444a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800444e:	4290      	cmp	r0, r2
 8004450:	d025      	beq.n	800449e <TIM_Base_SetConfig+0x96>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004456:	694a      	ldr	r2, [r1, #20]
 8004458:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800445a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800445c:	688b      	ldr	r3, [r1, #8]
 800445e:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004460:	680b      	ldr	r3, [r1, #0]
 8004462:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004464:	e03c      	b.n	80044e0 <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800446a:	68ca      	ldr	r2, [r1, #12]
 800446c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800446e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004472:	694a      	ldr	r2, [r1, #20]
 8004474:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004476:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004478:	688b      	ldr	r3, [r1, #8]
 800447a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800447c:	680b      	ldr	r3, [r1, #0]
 800447e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004480:	e02c      	b.n	80044dc <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004486:	68ca      	ldr	r2, [r1, #12]
 8004488:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800448a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800448e:	694a      	ldr	r2, [r1, #20]
 8004490:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004492:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004494:	688b      	ldr	r3, [r1, #8]
 8004496:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004498:	680b      	ldr	r3, [r1, #0]
 800449a:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800449c:	e01e      	b.n	80044dc <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	68ca      	ldr	r2, [r1, #12]
 80044a4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044aa:	694a      	ldr	r2, [r1, #20]
 80044ac:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044ae:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	688b      	ldr	r3, [r1, #8]
 80044b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044b4:	680b      	ldr	r3, [r1, #0]
 80044b6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044b8:	e010      	b.n	80044dc <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80044be:	684a      	ldr	r2, [r1, #4]
 80044c0:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80044c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044c6:	68ca      	ldr	r2, [r1, #12]
 80044c8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044ce:	694a      	ldr	r2, [r1, #20]
 80044d0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80044d2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d4:	688b      	ldr	r3, [r1, #8]
 80044d6:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80044d8:	680b      	ldr	r3, [r1, #0]
 80044da:	6283      	str	r3, [r0, #40]	@ 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044dc:	690b      	ldr	r3, [r1, #16]
 80044de:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	2301      	movs	r3, #1
 80044e2:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044e4:	6903      	ldr	r3, [r0, #16]
 80044e6:	f013 0f01 	tst.w	r3, #1
 80044ea:	d037      	beq.n	800455c <TIM_Base_SetConfig+0x154>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ec:	6903      	ldr	r3, [r0, #16]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	6103      	str	r3, [r0, #16]
  }
}
 80044f4:	4770      	bx	lr
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80044fa:	684a      	ldr	r2, [r1, #4]
 80044fc:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 80044fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004502:	68ca      	ldr	r2, [r1, #12]
 8004504:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004506:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800450a:	694a      	ldr	r2, [r1, #20]
 800450c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800450e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	688b      	ldr	r3, [r1, #8]
 8004512:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004514:	680b      	ldr	r3, [r1, #0]
 8004516:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004518:	e7e2      	b.n	80044e0 <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800451a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800451e:	684a      	ldr	r2, [r1, #4]
 8004520:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	e7ec      	b.n	80044fe <TIM_Base_SetConfig+0xf6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004524:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004528:	684a      	ldr	r2, [r1, #4]
 800452a:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800452c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004530:	68ca      	ldr	r2, [r1, #12]
 8004532:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004534:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004538:	694a      	ldr	r2, [r1, #20]
 800453a:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800453c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453e:	688b      	ldr	r3, [r1, #8]
 8004540:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004542:	680b      	ldr	r3, [r1, #0]
 8004544:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004546:	e7c9      	b.n	80044dc <TIM_Base_SetConfig+0xd4>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004548:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800454c:	684a      	ldr	r2, [r1, #4]
 800454e:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004550:	e7d5      	b.n	80044fe <TIM_Base_SetConfig+0xf6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8004556:	684a      	ldr	r2, [r1, #4]
 8004558:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800455a:	e7d0      	b.n	80044fe <TIM_Base_SetConfig+0xf6>
}
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00

08004564 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004564:	b360      	cbz	r0, 80045c0 <HAL_TIM_Base_Init+0x5c>
{
 8004566:	b510      	push	{r4, lr}
 8004568:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800456a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800456e:	b313      	cbz	r3, 80045b6 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	2302      	movs	r3, #2
 8004572:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004576:	4621      	mov	r1, r4
 8004578:	f851 0b04 	ldr.w	r0, [r1], #4
 800457c:	f7ff ff44 	bl	8004408 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004580:	2301      	movs	r3, #1
 8004582:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800458a:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800458e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004592:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004596:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800459a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80045a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80045a6:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80045aa:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80045b2:	2000      	movs	r0, #0
}
 80045b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045ba:	f7ff fe19 	bl	80041f0 <HAL_TIM_Base_MspInit>
 80045be:	e7d7      	b.n	8004570 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80045c0:	2001      	movs	r0, #1
}
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c4:	4770      	bx	lr

080045c6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045c6:	4770      	bx	lr

080045c8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045c8:	4770      	bx	lr

080045ca <UART_EndRxTransfer>:
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80045ca:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	e852 3f00 	ldrex	r3, [r2]
 80045d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d4:	e842 3100 	strex	r1, r3, [r2]
 80045d8:	2900      	cmp	r1, #0
 80045da:	d1f6      	bne.n	80045ca <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80045dc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045de:	f102 0308 	add.w	r3, r2, #8
 80045e2:	e853 3f00 	ldrex	r3, [r3]
 80045e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045ea:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ee:	3208      	adds	r2, #8
 80045f0:	e842 3100 	strex	r1, r3, [r2]
 80045f4:	2900      	cmp	r1, #0
 80045f6:	d1f1      	bne.n	80045dc <UART_EndRxTransfer+0x12>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d006      	beq.n	800460c <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045fe:	2320      	movs	r3, #32
 8004600:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004604:	2300      	movs	r3, #0
 8004606:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004608:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800460a:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800460c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	e852 3f00 	ldrex	r3, [r2]
 8004612:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	e842 3100 	strex	r1, r3, [r2]
 800461a:	2900      	cmp	r1, #0
 800461c:	d1f6      	bne.n	800460c <UART_EndRxTransfer+0x42>
 800461e:	e7ee      	b.n	80045fe <UART_EndRxTransfer+0x34>

08004620 <UART_SetConfig>:
{
 8004620:	b570      	push	{r4, r5, r6, lr}
 8004622:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8004624:	6801      	ldr	r1, [r0, #0]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004626:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004628:	68a3      	ldr	r3, [r4, #8]
 800462a:	6922      	ldr	r2, [r4, #16]
 800462c:	4313      	orrs	r3, r2
 800462e:	6962      	ldr	r2, [r4, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	69e2      	ldr	r2, [r4, #28]
 8004634:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004636:	4a9e      	ldr	r2, [pc, #632]	@ (80048b0 <UART_SetConfig+0x290>)
 8004638:	4002      	ands	r2, r0
 800463a:	4313      	orrs	r3, r2
 800463c:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800463e:	6822      	ldr	r2, [r4, #0]
 8004640:	6853      	ldr	r3, [r2, #4]
 8004642:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004646:	68e1      	ldr	r1, [r4, #12]
 8004648:	430b      	orrs	r3, r1
 800464a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800464c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800464e:	6822      	ldr	r2, [r4, #0]
 8004650:	4b98      	ldr	r3, [pc, #608]	@ (80048b4 <UART_SetConfig+0x294>)
 8004652:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8004654:	bf1c      	itt	ne
 8004656:	6a23      	ldrne	r3, [r4, #32]
 8004658:	4319      	orrne	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800465a:	6893      	ldr	r3, [r2, #8]
 800465c:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004660:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004664:	430b      	orrs	r3, r1
 8004666:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800466c:	f023 030f 	bic.w	r3, r3, #15
 8004670:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004672:	430b      	orrs	r3, r1
 8004674:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004676:	6823      	ldr	r3, [r4, #0]
 8004678:	4a8f      	ldr	r2, [pc, #572]	@ (80048b8 <UART_SetConfig+0x298>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d011      	beq.n	80046a2 <UART_SetConfig+0x82>
 800467e:	4a8f      	ldr	r2, [pc, #572]	@ (80048bc <UART_SetConfig+0x29c>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d020      	beq.n	80046c6 <UART_SetConfig+0xa6>
 8004684:	4a8e      	ldr	r2, [pc, #568]	@ (80048c0 <UART_SetConfig+0x2a0>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d03a      	beq.n	8004700 <UART_SetConfig+0xe0>
 800468a:	4a8e      	ldr	r2, [pc, #568]	@ (80048c4 <UART_SetConfig+0x2a4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d05f      	beq.n	8004750 <UART_SetConfig+0x130>
 8004690:	4a8d      	ldr	r2, [pc, #564]	@ (80048c8 <UART_SetConfig+0x2a8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d072      	beq.n	800477c <UART_SetConfig+0x15c>
 8004696:	4a87      	ldr	r2, [pc, #540]	@ (80048b4 <UART_SetConfig+0x294>)
 8004698:	4293      	cmp	r3, r2
 800469a:	f000 8088 	beq.w	80047ae <UART_SetConfig+0x18e>
 800469e:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a0:	e03e      	b.n	8004720 <UART_SetConfig+0x100>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046a2:	f502 4258 	add.w	r2, r2, #55296	@ 0xd800
 80046a6:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80046aa:	f002 0203 	and.w	r2, r2, #3
 80046ae:	2a03      	cmp	r2, #3
 80046b0:	d807      	bhi.n	80046c2 <UART_SetConfig+0xa2>
 80046b2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80046b6:	0097      	.short	0x0097
 80046b8:	017c017e 	.word	0x017c017e
 80046bc:	0004      	.short	0x0004
 80046be:	2208      	movs	r2, #8
 80046c0:	e02e      	b.n	8004720 <UART_SetConfig+0x100>
 80046c2:	2210      	movs	r2, #16
 80046c4:	e02c      	b.n	8004720 <UART_SetConfig+0x100>
 80046c6:	f502 32e6 	add.w	r2, r2, #117760	@ 0x1cc00
 80046ca:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80046ce:	f002 020c 	and.w	r2, r2, #12
 80046d2:	2a0c      	cmp	r2, #12
 80046d4:	d812      	bhi.n	80046fc <UART_SetConfig+0xdc>
 80046d6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80046da:	00a1      	.short	0x00a1
 80046dc:	00110011 	.word	0x00110011
 80046e0:	016e0011 	.word	0x016e0011
 80046e4:	00110011 	.word	0x00110011
 80046e8:	000d0011 	.word	0x000d0011
 80046ec:	00110011 	.word	0x00110011
 80046f0:	000f0011 	.word	0x000f0011
 80046f4:	2202      	movs	r2, #2
 80046f6:	e013      	b.n	8004720 <UART_SetConfig+0x100>
 80046f8:	2208      	movs	r2, #8
 80046fa:	e011      	b.n	8004720 <UART_SetConfig+0x100>
 80046fc:	2210      	movs	r2, #16
 80046fe:	e00f      	b.n	8004720 <UART_SetConfig+0x100>
 8004700:	4b72      	ldr	r3, [pc, #456]	@ (80048cc <UART_SetConfig+0x2ac>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800470a:	2b20      	cmp	r3, #32
 800470c:	f000 8155 	beq.w	80049ba <UART_SetConfig+0x39a>
 8004710:	d819      	bhi.n	8004746 <UART_SetConfig+0x126>
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 80bb 	beq.w	800488e <UART_SetConfig+0x26e>
 8004718:	2b10      	cmp	r3, #16
 800471a:	bf0c      	ite	eq
 800471c:	2204      	moveq	r2, #4
 800471e:	2210      	movne	r2, #16
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004720:	69e0      	ldr	r0, [r4, #28]
 8004722:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004726:	f000 80b8 	beq.w	800489a <UART_SetConfig+0x27a>
    switch (clocksource)
 800472a:	2a08      	cmp	r2, #8
 800472c:	f200 8139 	bhi.w	80049a2 <UART_SetConfig+0x382>
 8004730:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004734:	011e00fc 	.word	0x011e00fc
 8004738:	013700fa 	.word	0x013700fa
 800473c:	01370121 	.word	0x01370121
 8004740:	01370137 	.word	0x01370137
 8004744:	0124      	.short	0x0124
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004746:	2b30      	cmp	r3, #48	@ 0x30
 8004748:	bf0c      	ite	eq
 800474a:	2208      	moveq	r2, #8
 800474c:	2210      	movne	r2, #16
 800474e:	e7e7      	b.n	8004720 <UART_SetConfig+0x100>
 8004750:	4b5e      	ldr	r3, [pc, #376]	@ (80048cc <UART_SetConfig+0x2ac>)
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800475a:	2b80      	cmp	r3, #128	@ 0x80
 800475c:	f000 812f 	beq.w	80049be <UART_SetConfig+0x39e>
 8004760:	d807      	bhi.n	8004772 <UART_SetConfig+0x152>
 8004762:	2b00      	cmp	r3, #0
 8004764:	f000 8095 	beq.w	8004892 <UART_SetConfig+0x272>
 8004768:	2b40      	cmp	r3, #64	@ 0x40
 800476a:	bf0c      	ite	eq
 800476c:	2204      	moveq	r2, #4
 800476e:	2210      	movne	r2, #16
 8004770:	e7d6      	b.n	8004720 <UART_SetConfig+0x100>
 8004772:	2bc0      	cmp	r3, #192	@ 0xc0
 8004774:	bf0c      	ite	eq
 8004776:	2208      	moveq	r2, #8
 8004778:	2210      	movne	r2, #16
 800477a:	e7d1      	b.n	8004720 <UART_SetConfig+0x100>
 800477c:	4b53      	ldr	r3, [pc, #332]	@ (80048cc <UART_SetConfig+0x2ac>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004786:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800478a:	f000 811a 	beq.w	80049c2 <UART_SetConfig+0x3a2>
 800478e:	d808      	bhi.n	80047a2 <UART_SetConfig+0x182>
 8004790:	2b00      	cmp	r3, #0
 8004792:	f000 8080 	beq.w	8004896 <UART_SetConfig+0x276>
 8004796:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800479a:	bf0c      	ite	eq
 800479c:	2204      	moveq	r2, #4
 800479e:	2210      	movne	r2, #16
 80047a0:	e7be      	b.n	8004720 <UART_SetConfig+0x100>
 80047a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047a6:	bf0c      	ite	eq
 80047a8:	2208      	moveq	r2, #8
 80047aa:	2210      	movne	r2, #16
 80047ac:	e7b8      	b.n	8004720 <UART_SetConfig+0x100>
 80047ae:	4b47      	ldr	r3, [pc, #284]	@ (80048cc <UART_SetConfig+0x2ac>)
 80047b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047b4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80047b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047bc:	d063      	beq.n	8004886 <UART_SetConfig+0x266>
 80047be:	d809      	bhi.n	80047d4 <UART_SetConfig+0x1b4>
 80047c0:	b38b      	cbz	r3, 8004826 <UART_SetConfig+0x206>
 80047c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c6:	bf18      	it	ne
 80047c8:	2001      	movne	r0, #1
 80047ca:	f040 80c8 	bne.w	800495e <UART_SetConfig+0x33e>
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fe fc11 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
        break;
 80047d2:	e02a      	b.n	800482a <UART_SetConfig+0x20a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047d4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80047d8:	d102      	bne.n	80047e0 <UART_SetConfig+0x1c0>
 80047da:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80047de:	e027      	b.n	8004830 <UART_SetConfig+0x210>
 80047e0:	2001      	movs	r0, #1
 80047e2:	e0bc      	b.n	800495e <UART_SetConfig+0x33e>
 80047e4:	2201      	movs	r2, #1
  if (UART_INSTANCE_LOWPOWER(huart))
 80047e6:	4933      	ldr	r1, [pc, #204]	@ (80048b4 <UART_SetConfig+0x294>)
 80047e8:	428b      	cmp	r3, r1
 80047ea:	d199      	bne.n	8004720 <UART_SetConfig+0x100>
    switch (clocksource)
 80047ec:	2a08      	cmp	r2, #8
 80047ee:	f200 80c8 	bhi.w	8004982 <UART_SetConfig+0x362>
 80047f2:	a301      	add	r3, pc, #4	@ (adr r3, 80047f8 <UART_SetConfig+0x1d8>)
 80047f4:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80047f8:	08004827 	.word	0x08004827
 80047fc:	08004983 	.word	0x08004983
 8004800:	0800488b 	.word	0x0800488b
 8004804:	08004983 	.word	0x08004983
 8004808:	080047cf 	.word	0x080047cf
 800480c:	08004983 	.word	0x08004983
 8004810:	08004983 	.word	0x08004983
 8004814:	08004983 	.word	0x08004983
 8004818:	08004821 	.word	0x08004821
  UART_GETCLOCKSOURCE(huart, clocksource);
 800481c:	2200      	movs	r2, #0
 800481e:	e7e2      	b.n	80047e6 <UART_SetConfig+0x1c6>
        pclk = (uint32_t) LSE_VALUE;
 8004820:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004824:	e004      	b.n	8004830 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetPCLK1Freq();
 8004826:	f7ff f8d5 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800482a:	2800      	cmp	r0, #0
 800482c:	f000 80ab 	beq.w	8004986 <UART_SetConfig+0x366>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004830:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8004832:	4b27      	ldr	r3, [pc, #156]	@ (80048d0 <UART_SetConfig+0x2b0>)
 8004834:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8004838:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800483c:	6865      	ldr	r5, [r4, #4]
 800483e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8004842:	4299      	cmp	r1, r3
 8004844:	f200 80a1 	bhi.w	800498a <UART_SetConfig+0x36a>
 8004848:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800484c:	f200 809f 	bhi.w	800498e <UART_SetConfig+0x36e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004850:	2600      	movs	r6, #0
 8004852:	4633      	mov	r3, r6
 8004854:	4631      	mov	r1, r6
 8004856:	f7fc fa2f 	bl	8000cb8 <__aeabi_uldivmod>
 800485a:	0209      	lsls	r1, r1, #8
 800485c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8004860:	0200      	lsls	r0, r0, #8
 8004862:	086b      	lsrs	r3, r5, #1
 8004864:	18c0      	adds	r0, r0, r3
 8004866:	462a      	mov	r2, r5
 8004868:	4633      	mov	r3, r6
 800486a:	f141 0100 	adc.w	r1, r1, #0
 800486e:	f7fc fa23 	bl	8000cb8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004872:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8004876:	4b17      	ldr	r3, [pc, #92]	@ (80048d4 <UART_SetConfig+0x2b4>)
 8004878:	429a      	cmp	r2, r3
 800487a:	f200 808a 	bhi.w	8004992 <UART_SetConfig+0x372>
          huart->Instance->BRR = usartdiv;
 800487e:	6823      	ldr	r3, [r4, #0]
 8004880:	60d8      	str	r0, [r3, #12]
 8004882:	4630      	mov	r0, r6
 8004884:	e06b      	b.n	800495e <UART_SetConfig+0x33e>
        pclk = (uint32_t) HSI_VALUE;
 8004886:	4814      	ldr	r0, [pc, #80]	@ (80048d8 <UART_SetConfig+0x2b8>)
 8004888:	e7d2      	b.n	8004830 <UART_SetConfig+0x210>
    switch (clocksource)
 800488a:	4813      	ldr	r0, [pc, #76]	@ (80048d8 <UART_SetConfig+0x2b8>)
 800488c:	e7d0      	b.n	8004830 <UART_SetConfig+0x210>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800488e:	2200      	movs	r2, #0
 8004890:	e746      	b.n	8004720 <UART_SetConfig+0x100>
 8004892:	2200      	movs	r2, #0
 8004894:	e744      	b.n	8004720 <UART_SetConfig+0x100>
 8004896:	2200      	movs	r2, #0
 8004898:	e742      	b.n	8004720 <UART_SetConfig+0x100>
    switch (clocksource)
 800489a:	2a08      	cmp	r2, #8
 800489c:	d87b      	bhi.n	8004996 <UART_SetConfig+0x376>
 800489e:	e8df f002 	tbb	[pc, r2]
 80048a2:	3d1d      	.short	0x3d1d
 80048a4:	7a407a05 	.word	0x7a407a05
 80048a8:	7a7a      	.short	0x7a7a
 80048aa:	21          	.byte	0x21
 80048ab:	00          	.byte	0x00
        pclk = (uint32_t) HSI_VALUE;
 80048ac:	480a      	ldr	r0, [pc, #40]	@ (80048d8 <UART_SetConfig+0x2b8>)
 80048ae:	e019      	b.n	80048e4 <UART_SetConfig+0x2c4>
 80048b0:	cfff69f3 	.word	0xcfff69f3
 80048b4:	40008000 	.word	0x40008000
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40004400 	.word	0x40004400
 80048c0:	40004800 	.word	0x40004800
 80048c4:	40004c00 	.word	0x40004c00
 80048c8:	40005000 	.word	0x40005000
 80048cc:	40021000 	.word	0x40021000
 80048d0:	0800b9a0 	.word	0x0800b9a0
 80048d4:	000ffcff 	.word	0x000ffcff
 80048d8:	00f42400 	.word	0x00f42400
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7ff f87a 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d05a      	beq.n	800499a <UART_SetConfig+0x37a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e4:	6862      	ldr	r2, [r4, #4]
 80048e6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80048e8:	4b37      	ldr	r3, [pc, #220]	@ (80049c8 <UART_SetConfig+0x3a8>)
 80048ea:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80048ee:	fbb0 f0f3 	udiv	r0, r0, r3
 80048f2:	0853      	lsrs	r3, r2, #1
 80048f4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80048f8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fc:	f1a3 0110 	sub.w	r1, r3, #16
 8004900:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8004904:	4291      	cmp	r1, r2
 8004906:	d84a      	bhi.n	800499e <UART_SetConfig+0x37e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004908:	f023 020f 	bic.w	r2, r3, #15
 800490c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800490e:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004910:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
 8004918:	2000      	movs	r0, #0
 800491a:	e020      	b.n	800495e <UART_SetConfig+0x33e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800491c:	f7ff f86c 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004920:	e7de      	b.n	80048e0 <UART_SetConfig+0x2c0>
        pclk = HAL_RCC_GetSysClockFreq();
 8004922:	f7fe fb67 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
        break;
 8004926:	e7db      	b.n	80048e0 <UART_SetConfig+0x2c0>
        pclk = (uint32_t) HSI_VALUE;
 8004928:	4828      	ldr	r0, [pc, #160]	@ (80049cc <UART_SetConfig+0x3ac>)
 800492a:	e003      	b.n	8004934 <UART_SetConfig+0x314>
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7ff f852 	bl	80039d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8004930:	2800      	cmp	r0, #0
 8004932:	d038      	beq.n	80049a6 <UART_SetConfig+0x386>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004934:	6863      	ldr	r3, [r4, #4]
 8004936:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004938:	4a23      	ldr	r2, [pc, #140]	@ (80049c8 <UART_SetConfig+0x3a8>)
 800493a:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800493e:	fbb0 f0f2 	udiv	r0, r0, r2
 8004942:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8004946:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800494a:	f1a0 0210 	sub.w	r2, r0, #16
 800494e:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8004952:	429a      	cmp	r2, r3
 8004954:	d829      	bhi.n	80049aa <UART_SetConfig+0x38a>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004956:	6823      	ldr	r3, [r4, #0]
 8004958:	b280      	uxth	r0, r0
 800495a:	60d8      	str	r0, [r3, #12]
 800495c:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800495e:	2301      	movs	r3, #1
 8004960:	f8a4 306a 	strh.w	r3, [r4, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004964:	f8a4 3068 	strh.w	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800496c:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 800496e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7ff f842 	bl	80039f8 <HAL_RCC_GetPCLK2Freq>
        break;
 8004974:	e7dc      	b.n	8004930 <UART_SetConfig+0x310>
        pclk = HAL_RCC_GetSysClockFreq();
 8004976:	f7fe fb3d 	bl	8002ff4 <HAL_RCC_GetSysClockFreq>
        break;
 800497a:	e7d9      	b.n	8004930 <UART_SetConfig+0x310>
    switch (clocksource)
 800497c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8004980:	e7d8      	b.n	8004934 <UART_SetConfig+0x314>
    switch (clocksource)
 8004982:	2001      	movs	r0, #1
 8004984:	e7eb      	b.n	800495e <UART_SetConfig+0x33e>
 8004986:	2000      	movs	r0, #0
 8004988:	e7e9      	b.n	800495e <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 800498a:	2001      	movs	r0, #1
 800498c:	e7e7      	b.n	800495e <UART_SetConfig+0x33e>
 800498e:	2001      	movs	r0, #1
 8004990:	e7e5      	b.n	800495e <UART_SetConfig+0x33e>
          ret = HAL_ERROR;
 8004992:	2001      	movs	r0, #1
 8004994:	e7e3      	b.n	800495e <UART_SetConfig+0x33e>
    switch (clocksource)
 8004996:	2001      	movs	r0, #1
 8004998:	e7e1      	b.n	800495e <UART_SetConfig+0x33e>
 800499a:	2000      	movs	r0, #0
 800499c:	e7df      	b.n	800495e <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 800499e:	2001      	movs	r0, #1
 80049a0:	e7dd      	b.n	800495e <UART_SetConfig+0x33e>
    switch (clocksource)
 80049a2:	2001      	movs	r0, #1
 80049a4:	e7db      	b.n	800495e <UART_SetConfig+0x33e>
 80049a6:	2000      	movs	r0, #0
 80049a8:	e7d9      	b.n	800495e <UART_SetConfig+0x33e>
        ret = HAL_ERROR;
 80049aa:	2001      	movs	r0, #1
 80049ac:	e7d7      	b.n	800495e <UART_SetConfig+0x33e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049ae:	2202      	movs	r2, #2
 80049b0:	e6b6      	b.n	8004720 <UART_SetConfig+0x100>
 80049b2:	2204      	movs	r2, #4
 80049b4:	e6b4      	b.n	8004720 <UART_SetConfig+0x100>
 80049b6:	2204      	movs	r2, #4
 80049b8:	e6b2      	b.n	8004720 <UART_SetConfig+0x100>
 80049ba:	2202      	movs	r2, #2
 80049bc:	e6b0      	b.n	8004720 <UART_SetConfig+0x100>
 80049be:	2202      	movs	r2, #2
 80049c0:	e6ae      	b.n	8004720 <UART_SetConfig+0x100>
 80049c2:	2202      	movs	r2, #2
 80049c4:	e6ac      	b.n	8004720 <UART_SetConfig+0x100>
 80049c6:	bf00      	nop
 80049c8:	0800b9a0 	.word	0x0800b9a0
 80049cc:	00f42400 	.word	0x00f42400

080049d0 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049d0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049d2:	f013 0f08 	tst.w	r3, #8
 80049d6:	d006      	beq.n	80049e6 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049d8:	6802      	ldr	r2, [r0, #0]
 80049da:	6853      	ldr	r3, [r2, #4]
 80049dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80049e0:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80049e2:	430b      	orrs	r3, r1
 80049e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049e6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049e8:	f013 0f01 	tst.w	r3, #1
 80049ec:	d006      	beq.n	80049fc <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049ee:	6802      	ldr	r2, [r0, #0]
 80049f0:	6853      	ldr	r3, [r2, #4]
 80049f2:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80049f6:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80049f8:	430b      	orrs	r3, r1
 80049fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049fc:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049fe:	f013 0f02 	tst.w	r3, #2
 8004a02:	d006      	beq.n	8004a12 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a04:	6802      	ldr	r2, [r0, #0]
 8004a06:	6853      	ldr	r3, [r2, #4]
 8004a08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8004a0e:	430b      	orrs	r3, r1
 8004a10:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a14:	f013 0f04 	tst.w	r3, #4
 8004a18:	d006      	beq.n	8004a28 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1a:	6802      	ldr	r2, [r0, #0]
 8004a1c:	6853      	ldr	r3, [r2, #4]
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a22:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a2a:	f013 0f10 	tst.w	r3, #16
 8004a2e:	d006      	beq.n	8004a3e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a30:	6802      	ldr	r2, [r0, #0]
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a38:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8004a3a:	430b      	orrs	r3, r1
 8004a3c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a3e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a40:	f013 0f20 	tst.w	r3, #32
 8004a44:	d006      	beq.n	8004a54 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a46:	6802      	ldr	r2, [r0, #0]
 8004a48:	6893      	ldr	r3, [r2, #8]
 8004a4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a4e:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a54:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a56:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004a5a:	d00a      	beq.n	8004a72 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a5c:	6802      	ldr	r2, [r0, #0]
 8004a5e:	6853      	ldr	r3, [r2, #4]
 8004a60:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004a64:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a6a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8004a6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a70:	d00b      	beq.n	8004a8a <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a72:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004a74:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004a78:	d006      	beq.n	8004a88 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a7a:	6802      	ldr	r2, [r0, #0]
 8004a7c:	6853      	ldr	r3, [r2, #4]
 8004a7e:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8004a82:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8004a84:	430b      	orrs	r3, r1
 8004a86:	6053      	str	r3, [r2, #4]
}
 8004a88:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004a8a:	6802      	ldr	r2, [r0, #0]
 8004a8c:	6853      	ldr	r3, [r2, #4]
 8004a8e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a92:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6053      	str	r3, [r2, #4]
 8004a98:	e7eb      	b.n	8004a72 <UART_AdvFeatureConfig+0xa2>

08004a9a <UART_WaitOnFlagUntilTimeout>:
{
 8004a9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a9e:	4680      	mov	r8, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	4699      	mov	r9, r3
 8004aa6:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004aac:	69dc      	ldr	r4, [r3, #28]
 8004aae:	ea35 0404 	bics.w	r4, r5, r4
 8004ab2:	bf0c      	ite	eq
 8004ab4:	2401      	moveq	r4, #1
 8004ab6:	2400      	movne	r4, #0
 8004ab8:	42b4      	cmp	r4, r6
 8004aba:	d135      	bne.n	8004b28 <UART_WaitOnFlagUntilTimeout+0x8e>
    if (Timeout != HAL_MAX_DELAY)
 8004abc:	f1b7 3fff 	cmp.w	r7, #4294967295
 8004ac0:	d0f4      	beq.n	8004aac <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fd fb99 	bl	80021f8 <HAL_GetTick>
 8004ac6:	eba0 0009 	sub.w	r0, r0, r9
 8004aca:	42b8      	cmp	r0, r7
 8004acc:	d82f      	bhi.n	8004b2e <UART_WaitOnFlagUntilTimeout+0x94>
 8004ace:	b387      	cbz	r7, 8004b32 <UART_WaitOnFlagUntilTimeout+0x98>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ad0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f012 0f04 	tst.w	r2, #4
 8004ada:	d0e5      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xe>
 8004adc:	2d80      	cmp	r5, #128	@ 0x80
 8004ade:	d0e3      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xe>
 8004ae0:	2d40      	cmp	r5, #64	@ 0x40
 8004ae2:	d0e1      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	f012 0f08 	tst.w	r2, #8
 8004aea:	d111      	bne.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8004af2:	d0d9      	beq.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004af8:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fd65 	bl	80045ca <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b00:	2320      	movs	r3, #32
 8004b02:	f8c8 3090 	str.w	r3, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8004b06:	2300      	movs	r3, #0
 8004b08:	f888 3084 	strb.w	r3, [r8, #132]	@ 0x84
          return HAL_TIMEOUT;
 8004b0c:	2003      	movs	r0, #3
 8004b0e:	e00c      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b10:	2408      	movs	r4, #8
 8004b12:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8004b14:	4640      	mov	r0, r8
 8004b16:	f7ff fd58 	bl	80045ca <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b1a:	f8c8 4090 	str.w	r4, [r8, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f888 3084 	strb.w	r3, [r8, #132]	@ 0x84
          return HAL_ERROR;
 8004b24:	2001      	movs	r0, #1
 8004b26:	e000      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x90>
  return HAL_OK;
 8004b28:	2000      	movs	r0, #0
}
 8004b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8004b2e:	2003      	movs	r0, #3
 8004b30:	e7fb      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x90>
 8004b32:	2003      	movs	r0, #3
 8004b34:	e7f9      	b.n	8004b2a <UART_WaitOnFlagUntilTimeout+0x90>

08004b36 <HAL_UART_Transmit>:
{
 8004b36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004b42:	2b20      	cmp	r3, #32
 8004b44:	d161      	bne.n	8004c0a <HAL_UART_Transmit+0xd4>
 8004b46:	4604      	mov	r4, r0
 8004b48:	460d      	mov	r5, r1
 8004b4a:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	2900      	cmp	r1, #0
 8004b4e:	d060      	beq.n	8004c12 <HAL_UART_Transmit+0xdc>
 8004b50:	b90a      	cbnz	r2, 8004b56 <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 8004b52:	2001      	movs	r0, #1
 8004b54:	e05a      	b.n	8004c0c <HAL_UART_Transmit+0xd6>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5c:	2321      	movs	r3, #33	@ 0x21
 8004b5e:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8004b62:	f7fd fb49 	bl	80021f8 <HAL_GetTick>
 8004b66:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8004b68:	f8a4 8054 	strh.w	r8, [r4, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004b6c:	f8a4 8056 	strh.w	r8, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b70:	68a3      	ldr	r3, [r4, #8]
 8004b72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b76:	d00a      	beq.n	8004b8e <HAL_UART_Transmit+0x58>
      pdata16bits = NULL;
 8004b78:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8004b7c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	b38b      	cbz	r3, 8004be8 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b84:	f04f 0900 	mov.w	r9, #0
 8004b88:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8004b8c:	e01c      	b.n	8004bc8 <HAL_UART_Transmit+0x92>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8e:	6923      	ldr	r3, [r4, #16]
 8004b90:	b113      	cbz	r3, 8004b98 <HAL_UART_Transmit+0x62>
      pdata16bits = NULL;
 8004b92:	f04f 0a00 	mov.w	sl, #0
 8004b96:	e7f1      	b.n	8004b7c <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8004b98:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8004b9a:	2500      	movs	r5, #0
 8004b9c:	e7ee      	b.n	8004b7c <HAL_UART_Transmit+0x46>
        huart->gState = HAL_UART_STATE_READY;
 8004b9e:	2320      	movs	r3, #32
 8004ba0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8004ba4:	2003      	movs	r0, #3
 8004ba6:	e031      	b.n	8004c0c <HAL_UART_Transmit+0xd6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8004bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb2:	8513      	strh	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8004bb4:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 8004bb8:	3a01      	subs	r2, #1
 8004bba:	b292      	uxth	r2, r2
 8004bbc:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004bc0:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	b17b      	cbz	r3, 8004be8 <HAL_UART_Transmit+0xb2>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc8:	9600      	str	r6, [sp, #0]
 8004bca:	463b      	mov	r3, r7
 8004bcc:	464a      	mov	r2, r9
 8004bce:	4641      	mov	r1, r8
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	f7ff ff62 	bl	8004a9a <UART_WaitOnFlagUntilTimeout>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d1e1      	bne.n	8004b9e <HAL_UART_Transmit+0x68>
      if (pdata8bits == NULL)
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	d0e4      	beq.n	8004ba8 <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004be6:	e7e5      	b.n	8004bb4 <HAL_UART_Transmit+0x7e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004be8:	9600      	str	r6, [sp, #0]
 8004bea:	463b      	mov	r3, r7
 8004bec:	2200      	movs	r2, #0
 8004bee:	2140      	movs	r1, #64	@ 0x40
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7ff ff52 	bl	8004a9a <UART_WaitOnFlagUntilTimeout>
 8004bf6:	b918      	cbnz	r0, 8004c00 <HAL_UART_Transmit+0xca>
    huart->gState = HAL_UART_STATE_READY;
 8004bf8:	2320      	movs	r3, #32
 8004bfa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8004bfe:	e005      	b.n	8004c0c <HAL_UART_Transmit+0xd6>
      huart->gState = HAL_UART_STATE_READY;
 8004c00:	2320      	movs	r3, #32
 8004c02:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004c06:	2003      	movs	r0, #3
 8004c08:	e000      	b.n	8004c0c <HAL_UART_Transmit+0xd6>
    return HAL_BUSY;
 8004c0a:	2002      	movs	r0, #2
}
 8004c0c:	b002      	add	sp, #8
 8004c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8004c12:	2001      	movs	r0, #1
 8004c14:	e7fa      	b.n	8004c0c <HAL_UART_Transmit+0xd6>

08004c16 <UART_CheckIdleState>:
{
 8004c16:	b530      	push	{r4, r5, lr}
 8004c18:	b083      	sub	sp, #12
 8004c1a:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8004c22:	f7fd fae9 	bl	80021f8 <HAL_GetTick>
 8004c26:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c28:	6822      	ldr	r2, [r4, #0]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f012 0f08 	tst.w	r2, #8
 8004c30:	d111      	bne.n	8004c56 <UART_CheckIdleState+0x40>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c32:	6823      	ldr	r3, [r4, #0]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f013 0f04 	tst.w	r3, #4
 8004c3a:	d126      	bne.n	8004c8a <UART_CheckIdleState+0x74>
  huart->gState = HAL_UART_STATE_READY;
 8004c3c:	2320      	movs	r3, #32
 8004c3e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c42:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c46:	2000      	movs	r0, #0
 8004c48:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c4a:	6720      	str	r0, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8004c52:	b003      	add	sp, #12
 8004c54:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004c64:	4620      	mov	r0, r4
 8004c66:	f7ff ff18 	bl	8004a9a <UART_WaitOnFlagUntilTimeout>
 8004c6a:	2800      	cmp	r0, #0
 8004c6c:	d0e1      	beq.n	8004c32 <UART_CheckIdleState+0x1c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004c6e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c70:	e852 3f00 	ldrex	r3, [r2]
 8004c74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	e842 3100 	strex	r1, r3, [r2]
 8004c7c:	2900      	cmp	r1, #0
 8004c7e:	d1f6      	bne.n	8004c6e <UART_CheckIdleState+0x58>
      huart->gState = HAL_UART_STATE_READY;
 8004c80:	2320      	movs	r3, #32
 8004c82:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8004c86:	2003      	movs	r0, #3
 8004c88:	e7e0      	b.n	8004c4c <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004c8e:	9300      	str	r3, [sp, #0]
 8004c90:	462b      	mov	r3, r5
 8004c92:	2200      	movs	r2, #0
 8004c94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f7ff fefe 	bl	8004a9a <UART_WaitOnFlagUntilTimeout>
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d0cc      	beq.n	8004c3c <UART_CheckIdleState+0x26>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ca2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca4:	e852 3f00 	ldrex	r3, [r2]
 8004ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	e842 3100 	strex	r1, r3, [r2]
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d1f6      	bne.n	8004ca2 <UART_CheckIdleState+0x8c>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cb4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb6:	f102 0308 	add.w	r3, r2, #8
 8004cba:	e853 3f00 	ldrex	r3, [r3]
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	3208      	adds	r2, #8
 8004cc4:	e842 3100 	strex	r1, r3, [r2]
 8004cc8:	2900      	cmp	r1, #0
 8004cca:	d1f3      	bne.n	8004cb4 <UART_CheckIdleState+0x9e>
      huart->RxState = HAL_UART_STATE_READY;
 8004ccc:	2320      	movs	r3, #32
 8004cce:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	e7ba      	b.n	8004c4c <UART_CheckIdleState+0x36>

08004cd6 <HAL_UART_Init>:
  if (huart == NULL)
 8004cd6:	b378      	cbz	r0, 8004d38 <HAL_UART_Init+0x62>
{
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004cdc:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 8004ce0:	b30b      	cbz	r3, 8004d26 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004ce2:	2324      	movs	r3, #36	@ 0x24
 8004ce4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8004ce8:	6822      	ldr	r2, [r4, #0]
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cf2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004cf4:	b9e3      	cbnz	r3, 8004d30 <HAL_UART_Init+0x5a>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cf6:	4620      	mov	r0, r4
 8004cf8:	f7ff fc92 	bl	8004620 <UART_SetConfig>
 8004cfc:	2801      	cmp	r0, #1
 8004cfe:	d011      	beq.n	8004d24 <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	6853      	ldr	r3, [r2, #4]
 8004d04:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004d08:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d0a:	6822      	ldr	r2, [r4, #0]
 8004d0c:	6893      	ldr	r3, [r2, #8]
 8004d0e:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004d12:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8004d14:	6822      	ldr	r2, [r4, #0]
 8004d16:	6813      	ldr	r3, [r2, #0]
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7ff ff79 	bl	8004c16 <UART_CheckIdleState>
}
 8004d24:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004d26:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8004d2a:	f7fc fed7 	bl	8001adc <HAL_UART_MspInit>
 8004d2e:	e7d8      	b.n	8004ce2 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8004d30:	4620      	mov	r0, r4
 8004d32:	f7ff fe4d 	bl	80049d0 <UART_AdvFeatureConfig>
 8004d36:	e7de      	b.n	8004cf6 <HAL_UART_Init+0x20>
    return HAL_ERROR;
 8004d38:	2001      	movs	r0, #1
}
 8004d3a:	4770      	bx	lr

08004d3c <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004d3c:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8004d3e:	b92b      	cbnz	r3, 8004d4c <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8004d40:	2301      	movs	r3, #1
 8004d42:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004d46:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
 8004d4a:	4770      	bx	lr
{
 8004d4c:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004d4e:	6803      	ldr	r3, [r0, #0]
 8004d50:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004d52:	6899      	ldr	r1, [r3, #8]
 8004d54:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d56:	4d0a      	ldr	r5, [pc, #40]	@ (8004d80 <UARTEx_SetNbDataToProcess+0x44>)
 8004d58:	5c6b      	ldrb	r3, [r5, r1]
 8004d5a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004d5c:	4c09      	ldr	r4, [pc, #36]	@ (8004d84 <UARTEx_SetNbDataToProcess+0x48>)
 8004d5e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004d60:	fb93 f3f1 	sdiv	r3, r3, r1
 8004d64:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d68:	f3c2 6242 	ubfx	r2, r2, #25, #3
 8004d6c:	5cab      	ldrb	r3, [r5, r2]
 8004d6e:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004d70:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004d72:	fb93 f3f2 	sdiv	r3, r3, r2
    huart->NbRxDataToProcess = 1U;
 8004d76:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
  }
}
 8004d7a:	bc30      	pop	{r4, r5}
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	0800b9c0 	.word	0x0800b9c0
 8004d84:	0800b9b8 	.word	0x0800b9b8

08004d88 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 8004d88:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d018      	beq.n	8004dc2 <HAL_UARTEx_DisableFifoMode+0x3a>
 8004d90:	2301      	movs	r3, #1
 8004d92:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004d96:	2324      	movs	r3, #36	@ 0x24
 8004d98:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d9c:	6803      	ldr	r3, [r0, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	f021 0101 	bic.w	r1, r1, #1
 8004da6:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004da8:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004db0:	6801      	ldr	r1, [r0, #0]
 8004db2:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004db4:	2220      	movs	r2, #32
 8004db6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004dba:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  return HAL_OK;
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	4770      	bx	lr
  __HAL_LOCK(huart);
 8004dc2:	2002      	movs	r0, #2
}
 8004dc4:	4770      	bx	lr

08004dc6 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8004dc6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004dc8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d01d      	beq.n	8004e0c <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004dd0:	4604      	mov	r4, r0
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004dd8:	2324      	movs	r3, #36	@ 0x24
 8004dda:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dde:	6803      	ldr	r3, [r0, #0]
 8004de0:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004dea:	6802      	ldr	r2, [r0, #0]
 8004dec:	6893      	ldr	r3, [r2, #8]
 8004dee:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8004df2:	4319      	orrs	r1, r3
 8004df4:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004df6:	f7ff ffa1 	bl	8004d3c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	2320      	movs	r3, #32
 8004e00:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004e04:	2000      	movs	r0, #0
 8004e06:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004e0a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004e0c:	2002      	movs	r0, #2
 8004e0e:	e7fc      	b.n	8004e0a <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004e10 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8004e10:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8004e12:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d01d      	beq.n	8004e56 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004e1a:	4604      	mov	r4, r0
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004e22:	2324      	movs	r3, #36	@ 0x24
 8004e24:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e28:	6803      	ldr	r3, [r0, #0]
 8004e2a:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	f022 0201 	bic.w	r2, r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e34:	6802      	ldr	r2, [r0, #0]
 8004e36:	6893      	ldr	r3, [r2, #8]
 8004e38:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 8004e3c:	4319      	orrs	r1, r3
 8004e3e:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8004e40:	f7ff ff7c 	bl	8004d3c <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e44:	6823      	ldr	r3, [r4, #0]
 8004e46:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004e48:	2320      	movs	r3, #32
 8004e4a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 8004e4e:	2000      	movs	r0, #0
 8004e50:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 8004e54:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8004e56:	2002      	movs	r0, #2
 8004e58:	e7fc      	b.n	8004e54 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08004e5a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004e5a:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8004e5c:	f000 fe8c 	bl	8005b78 <vTaskStartScheduler>
  
  return osOK;
}
 8004e60:	2000      	movs	r0, #0
 8004e62:	bd08      	pop	{r3, pc}

08004e64 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	4684      	mov	ip, r0
 8004e6a:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004e6c:	6944      	ldr	r4, [r0, #20]
 8004e6e:	b1bc      	cbz	r4, 8004ea0 <osThreadCreate+0x3c>
 8004e70:	6985      	ldr	r5, [r0, #24]
 8004e72:	b1ad      	cbz	r5, 8004ea0 <osThreadCreate+0x3c>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e74:	6840      	ldr	r0, [r0, #4]
 8004e76:	f8dc 1000 	ldr.w	r1, [ip]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004e7a:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8004e7e:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8004e82:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8004e86:	bf14      	ite	ne
 8004e88:	f10c 0603 	addne.w	r6, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004e8c:	2600      	moveq	r6, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004e8e:	9502      	str	r5, [sp, #8]
 8004e90:	9401      	str	r4, [sp, #4]
 8004e92:	9600      	str	r6, [sp, #0]
 8004e94:	f000 fe02 	bl	8005a9c <xTaskCreateStatic>
 8004e98:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004e9a:	9805      	ldr	r0, [sp, #20]
}
 8004e9c:	b006      	add	sp, #24
 8004e9e:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ea0:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8004ea4:	f8dc 1000 	ldr.w	r1, [ip]
 8004ea8:	f8bc 2010 	ldrh.w	r2, [ip, #16]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004eac:	f9bc c008 	ldrsh.w	ip, [ip, #8]
  if (priority != osPriorityError) {
 8004eb0:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
    fpriority += (priority - osPriorityIdle);
 8004eb4:	bf14      	ite	ne
 8004eb6:	f10c 0403 	addne.w	r4, ip, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004eba:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ebc:	ad05      	add	r5, sp, #20
 8004ebe:	9501      	str	r5, [sp, #4]
 8004ec0:	9400      	str	r4, [sp, #0]
 8004ec2:	f000 fe26 	bl	8005b12 <xTaskCreate>
 8004ec6:	2801      	cmp	r0, #1
 8004ec8:	d0e7      	beq.n	8004e9a <osThreadCreate+0x36>
      return NULL;
 8004eca:	2000      	movs	r0, #0
 8004ecc:	e7e6      	b.n	8004e9c <osThreadCreate+0x38>

08004ece <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004ece:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004ed0:	2801      	cmp	r0, #1
 8004ed2:	bf38      	it	cc
 8004ed4:	2001      	movcc	r0, #1
 8004ed6:	f000 ffa9 	bl	8005e2c <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004eda:	2000      	movs	r0, #0
 8004edc:	bd08      	pop	{r3, pc}

08004ede <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004ede:	b508      	push	{r3, lr}
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004ee0:	6841      	ldr	r1, [r0, #4]
 8004ee2:	b119      	cbz	r1, 8004eec <osMutexCreate+0xe>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004ee4:	2001      	movs	r0, #1
 8004ee6:	f000 fac8 	bl	800547a <xQueueCreateMutexStatic>
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004eea:	bd08      	pop	{r3, pc}
    return xSemaphoreCreateMutex(); 
 8004eec:	2001      	movs	r0, #1
 8004eee:	f000 fab9 	bl	8005464 <xQueueCreateMutex>
 8004ef2:	e7fa      	b.n	8004eea <osMutexCreate+0xc>

08004ef4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004ef4:	b510      	push	{r4, lr}
 8004ef6:	b082      	sub	sp, #8
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004ef8:	2300      	movs	r3, #0
 8004efa:	9301      	str	r3, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8004efc:	b1f0      	cbz	r0, 8004f3c <osMutexWait+0x48>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004efe:	f3ef 8405 	mrs	r4, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8004f02:	b19c      	cbz	r4, 8004f2c <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f04:	aa01      	add	r2, sp, #4
 8004f06:	2100      	movs	r1, #0
 8004f08:	f000 fbf2 	bl	80056f0 <xQueueReceiveFromISR>
 8004f0c:	2801      	cmp	r0, #1
 8004f0e:	d117      	bne.n	8004f40 <osMutexWait+0x4c>
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004f10:	9b01      	ldr	r3, [sp, #4]
 8004f12:	b1bb      	cbz	r3, 8004f44 <osMutexWait+0x50>
 8004f14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	f3bf 8f6f 	isb	sy
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8004f28:	2400      	movs	r4, #0
 8004f2a:	e004      	b.n	8004f36 <osMutexWait+0x42>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004f2c:	f000 fb0d 	bl	800554a <xQueueSemaphoreTake>
    return osErrorOS;
 8004f30:	2801      	cmp	r0, #1
 8004f32:	bf18      	it	ne
 8004f34:	24ff      	movne	r4, #255	@ 0xff
}
 8004f36:	4620      	mov	r0, r4
 8004f38:	b002      	add	sp, #8
 8004f3a:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8004f3c:	2480      	movs	r4, #128	@ 0x80
 8004f3e:	e7fa      	b.n	8004f36 <osMutexWait+0x42>
      return osErrorOS;
 8004f40:	24ff      	movs	r4, #255	@ 0xff
 8004f42:	e7f8      	b.n	8004f36 <osMutexWait+0x42>
  return osOK;
 8004f44:	2400      	movs	r4, #0
 8004f46:	e7f6      	b.n	8004f36 <osMutexWait+0x42>

08004f48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	b082      	sub	sp, #8
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9301      	str	r3, [sp, #4]
 8004f50:	f3ef 8405 	mrs	r4, IPSR
  
  if (inHandlerMode()) {
 8004f54:	b194      	cbz	r4, 8004f7c <osMutexRelease+0x34>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004f56:	a901      	add	r1, sp, #4
 8004f58:	f000 fa9e 	bl	8005498 <xQueueGiveFromISR>
 8004f5c:	2801      	cmp	r0, #1
 8004f5e:	d118      	bne.n	8004f92 <osMutexRelease+0x4a>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004f60:	9b01      	ldr	r3, [sp, #4]
 8004f62:	b1c3      	cbz	r3, 8004f96 <osMutexRelease+0x4e>
 8004f64:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004f68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f6c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8004f78:	2400      	movs	r4, #0
 8004f7a:	e007      	b.n	8004f8c <osMutexRelease+0x44>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	4619      	mov	r1, r3
 8004f82:	f000 f999 	bl	80052b8 <xQueueGenericSend>
  {
    result = osErrorOS;
 8004f86:	2801      	cmp	r0, #1
 8004f88:	bf18      	it	ne
 8004f8a:	24ff      	movne	r4, #255	@ 0xff
  }
  return result;
}
 8004f8c:	4620      	mov	r0, r4
 8004f8e:	b002      	add	sp, #8
 8004f90:	bd10      	pop	{r4, pc}
      return osErrorOS;
 8004f92:	24ff      	movs	r4, #255	@ 0xff
 8004f94:	e7fa      	b.n	8004f8c <osMutexRelease+0x44>
  osStatus result = osOK;
 8004f96:	2400      	movs	r4, #0
 8004f98:	e7f8      	b.n	8004f8c <osMutexRelease+0x44>

08004f9a <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f9a:	f100 0308 	add.w	r3, r0, #8
 8004f9e:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fae:	4770      	bx	lr

08004fb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fb4:	4770      	bx	lr

08004fb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fb6:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004fb8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004fbe:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004fc0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004fc2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004fc4:	6803      	ldr	r3, [r0, #0]
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	6003      	str	r3, [r0, #0]
}
 8004fca:	4770      	bx	lr

08004fcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fcc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004fce:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004fd0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8004fd4:	d011      	beq.n	8004ffa <vListInsert+0x2e>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004fd6:	f100 0308 	add.w	r3, r0, #8
 8004fda:	461c      	mov	r4, r3
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	42aa      	cmp	r2, r5
 8004fe2:	d9fa      	bls.n	8004fda <vListInsert+0xe>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004fe4:	6863      	ldr	r3, [r4, #4]
 8004fe6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004fe8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004fea:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004fec:	6061      	str	r1, [r4, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004fee:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8004ff0:	6803      	ldr	r3, [r0, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	6003      	str	r3, [r0, #0]
}
 8004ff6:	bc30      	pop	{r4, r5}
 8004ff8:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ffa:	6904      	ldr	r4, [r0, #16]
 8004ffc:	e7f2      	b.n	8004fe4 <vListInsert+0x18>

08004ffe <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ffe:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005000:	6841      	ldr	r1, [r0, #4]
 8005002:	6882      	ldr	r2, [r0, #8]
 8005004:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005006:	6841      	ldr	r1, [r0, #4]
 8005008:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800500e:	bf04      	itt	eq
 8005010:	6882      	ldreq	r2, [r0, #8]
 8005012:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005014:	2200      	movs	r2, #0
 8005016:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	3a01      	subs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800501e:	6818      	ldr	r0, [r3, #0]
}
 8005020:	4770      	bx	lr

08005022 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005022:	b510      	push	{r4, lr}
 8005024:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005026:	f001 fa25 	bl	8006474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800502a:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800502c:	f001 fa44 	bl	80064b8 <vPortExitCritical>

	return xReturn;
}
 8005030:	fab4 f084 	clz	r0, r4
 8005034:	0940      	lsrs	r0, r0, #5
 8005036:	bd10      	pop	{r4, pc}

08005038 <prvCopyDataToQueue>:
{
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	4604      	mov	r4, r0
 800503c:	4615      	mov	r5, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503e:	6b86      	ldr	r6, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005040:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8005042:	b95a      	cbnz	r2, 800505c <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005044:	6803      	ldr	r3, [r0, #0]
 8005046:	b11b      	cbz	r3, 8005050 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
 8005048:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800504a:	3601      	adds	r6, #1
 800504c:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 800504e:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005050:	6880      	ldr	r0, [r0, #8]
 8005052:	f001 f8e3 	bl	800621c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005056:	2300      	movs	r3, #0
 8005058:	60a3      	str	r3, [r4, #8]
 800505a:	e7f6      	b.n	800504a <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
 800505c:	b96d      	cbnz	r5, 800507a <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800505e:	6840      	ldr	r0, [r0, #4]
 8005060:	f002 fc93 	bl	800798a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005064:	6863      	ldr	r3, [r4, #4]
 8005066:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005068:	4413      	add	r3, r2
 800506a:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800506c:	68a2      	ldr	r2, [r4, #8]
 800506e:	4293      	cmp	r3, r2
 8005070:	d319      	bcc.n	80050a6 <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8005076:	4628      	mov	r0, r5
 8005078:	e7e7      	b.n	800504a <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800507a:	68c0      	ldr	r0, [r0, #12]
 800507c:	f002 fc85 	bl	800798a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005080:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8005082:	4251      	negs	r1, r2
 8005084:	68e3      	ldr	r3, [r4, #12]
 8005086:	1a9b      	subs	r3, r3, r2
 8005088:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800508a:	6822      	ldr	r2, [r4, #0]
 800508c:	4293      	cmp	r3, r2
 800508e:	d202      	bcs.n	8005096 <prvCopyDataToQueue+0x5e>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005090:	68a3      	ldr	r3, [r4, #8]
 8005092:	440b      	add	r3, r1
 8005094:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8005096:	2d02      	cmp	r5, #2
 8005098:	d001      	beq.n	800509e <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
 800509a:	2000      	movs	r0, #0
 800509c:	e7d5      	b.n	800504a <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800509e:	b126      	cbz	r6, 80050aa <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
 80050a0:	3e01      	subs	r6, #1
BaseType_t xReturn = pdFALSE;
 80050a2:	2000      	movs	r0, #0
 80050a4:	e7d1      	b.n	800504a <prvCopyDataToQueue+0x12>
 80050a6:	4628      	mov	r0, r5
 80050a8:	e7cf      	b.n	800504a <prvCopyDataToQueue+0x12>
 80050aa:	2000      	movs	r0, #0
 80050ac:	e7cd      	b.n	800504a <prvCopyDataToQueue+0x12>

080050ae <prvCopyDataFromQueue>:
{
 80050ae:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050b0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80050b2:	b16a      	cbz	r2, 80050d0 <prvCopyDataFromQueue+0x22>
{
 80050b4:	b510      	push	{r4, lr}
 80050b6:	4608      	mov	r0, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050b8:	68d9      	ldr	r1, [r3, #12]
 80050ba:	4411      	add	r1, r2
 80050bc:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050be:	689c      	ldr	r4, [r3, #8]
 80050c0:	42a1      	cmp	r1, r4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050c2:	bf24      	itt	cs
 80050c4:	6819      	ldrcs	r1, [r3, #0]
 80050c6:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050c8:	68d9      	ldr	r1, [r3, #12]
 80050ca:	f002 fc5e 	bl	800798a <memcpy>
}
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	4770      	bx	lr

080050d2 <prvUnlockQueue>:
{
 80050d2:	b570      	push	{r4, r5, r6, lr}
 80050d4:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
 80050d6:	f001 f9cd 	bl	8006474 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80050da:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 80050de:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050e0:	2c00      	cmp	r4, #0
 80050e2:	dd0f      	ble.n	8005104 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e4:	f105 0624 	add.w	r6, r5, #36	@ 0x24
 80050e8:	e002      	b.n	80050f0 <prvUnlockQueue+0x1e>
			--cTxLock;
 80050ea:	3c01      	subs	r4, #1
 80050ec:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80050ee:	b14c      	cbz	r4, 8005104 <prvUnlockQueue+0x32>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f0:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80050f2:	b13b      	cbz	r3, 8005104 <prvUnlockQueue+0x32>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f4:	4630      	mov	r0, r6
 80050f6:	f000 ff95 	bl	8006024 <xTaskRemoveFromEventList>
 80050fa:	2800      	cmp	r0, #0
 80050fc:	d0f5      	beq.n	80050ea <prvUnlockQueue+0x18>
						vTaskMissedYield();
 80050fe:	f001 f823 	bl	8006148 <vTaskMissedYield>
 8005102:	e7f2      	b.n	80050ea <prvUnlockQueue+0x18>
		pxQueue->cTxLock = queueUNLOCKED;
 8005104:	23ff      	movs	r3, #255	@ 0xff
 8005106:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800510a:	f001 f9d5 	bl	80064b8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800510e:	f001 f9b1 	bl	8006474 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8005112:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8005116:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005118:	2c00      	cmp	r4, #0
 800511a:	dd0f      	ble.n	800513c <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800511c:	f105 0610 	add.w	r6, r5, #16
 8005120:	e002      	b.n	8005128 <prvUnlockQueue+0x56>
				--cRxLock;
 8005122:	3c01      	subs	r4, #1
 8005124:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005126:	b14c      	cbz	r4, 800513c <prvUnlockQueue+0x6a>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005128:	692b      	ldr	r3, [r5, #16]
 800512a:	b13b      	cbz	r3, 800513c <prvUnlockQueue+0x6a>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800512c:	4630      	mov	r0, r6
 800512e:	f000 ff79 	bl	8006024 <xTaskRemoveFromEventList>
 8005132:	2800      	cmp	r0, #0
 8005134:	d0f5      	beq.n	8005122 <prvUnlockQueue+0x50>
					vTaskMissedYield();
 8005136:	f001 f807 	bl	8006148 <vTaskMissedYield>
 800513a:	e7f2      	b.n	8005122 <prvUnlockQueue+0x50>
		pxQueue->cRxLock = queueUNLOCKED;
 800513c:	23ff      	movs	r3, #255	@ 0xff
 800513e:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
	taskEXIT_CRITICAL();
 8005142:	f001 f9b9 	bl	80064b8 <vPortExitCritical>
}
 8005146:	bd70      	pop	{r4, r5, r6, pc}

08005148 <xQueueGenericReset>:
{
 8005148:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 800514a:	b1e0      	cbz	r0, 8005186 <xQueueGenericReset+0x3e>
 800514c:	460d      	mov	r5, r1
 800514e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005150:	f001 f990 	bl	8006474 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005154:	6822      	ldr	r2, [r4, #0]
 8005156:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8005158:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	18d0      	adds	r0, r2, r3
 8005160:	60a0      	str	r0, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005162:	2000      	movs	r0, #0
 8005164:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005166:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005168:	1a5b      	subs	r3, r3, r1
 800516a:	441a      	add	r2, r3
 800516c:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800516e:	23ff      	movs	r3, #255	@ 0xff
 8005170:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005174:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8005178:	b9fd      	cbnz	r5, 80051ba <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800517a:	6923      	ldr	r3, [r4, #16]
 800517c:	b963      	cbnz	r3, 8005198 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
 800517e:	f001 f99b 	bl	80064b8 <vPortExitCritical>
}
 8005182:	2001      	movs	r0, #1
 8005184:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518a:	f383 8811 	msr	BASEPRI, r3
 800518e:	f3bf 8f6f 	isb	sy
 8005192:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005196:	e7fe      	b.n	8005196 <xQueueGenericReset+0x4e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005198:	f104 0010 	add.w	r0, r4, #16
 800519c:	f000 ff42 	bl	8006024 <xTaskRemoveFromEventList>
 80051a0:	2800      	cmp	r0, #0
 80051a2:	d0ec      	beq.n	800517e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80051a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80051a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	f3bf 8f6f 	isb	sy
 80051b8:	e7e1      	b.n	800517e <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051ba:	f104 0010 	add.w	r0, r4, #16
 80051be:	f7ff feec 	bl	8004f9a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051c2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80051c6:	f7ff fee8 	bl	8004f9a <vListInitialise>
 80051ca:	e7d8      	b.n	800517e <xQueueGenericReset+0x36>

080051cc <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051cc:	b940      	cbnz	r0, 80051e0 <xQueueGenericCreateStatic+0x14>
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	e7fe      	b.n	80051de <xQueueGenericCreateStatic+0x12>
	{
 80051e0:	b510      	push	{r4, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	461c      	mov	r4, r3
 80051e6:	4603      	mov	r3, r0
		configASSERT( pxStaticQueue != NULL );
 80051e8:	b154      	cbz	r4, 8005200 <xQueueGenericCreateStatic+0x34>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80051ea:	b192      	cbz	r2, 8005212 <xQueueGenericCreateStatic+0x46>
 80051ec:	b9d9      	cbnz	r1, 8005226 <xQueueGenericCreateStatic+0x5a>
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	e7fe      	b.n	80051fe <xQueueGenericCreateStatic+0x32>
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 8005210:	e7fe      	b.n	8005210 <xQueueGenericCreateStatic+0x44>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005212:	b321      	cbz	r1, 800525e <xQueueGenericCreateStatic+0x92>
 8005214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	e7fe      	b.n	8005224 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005226:	2048      	movs	r0, #72	@ 0x48
 8005228:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800522a:	9801      	ldr	r0, [sp, #4]
 800522c:	2848      	cmp	r0, #72	@ 0x48
 800522e:	d008      	beq.n	8005242 <xQueueGenericCreateStatic+0x76>
 8005230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	e7fe      	b.n	8005240 <xQueueGenericCreateStatic+0x74>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005242:	9801      	ldr	r0, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005244:	2001      	movs	r0, #1
 8005246:	f884 0046 	strb.w	r0, [r4, #70]	@ 0x46
 800524a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 800524c:	63e3      	str	r3, [r4, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800524e:	6421      	str	r1, [r4, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005250:	4601      	mov	r1, r0
 8005252:	4620      	mov	r0, r4
 8005254:	f7ff ff78 	bl	8005148 <xQueueGenericReset>
	}
 8005258:	4620      	mov	r0, r4
 800525a:	b002      	add	sp, #8
 800525c:	bd10      	pop	{r4, pc}
			volatile size_t xSize = sizeof( StaticQueue_t );
 800525e:	2248      	movs	r2, #72	@ 0x48
 8005260:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005262:	9a01      	ldr	r2, [sp, #4]
 8005264:	2a48      	cmp	r2, #72	@ 0x48
 8005266:	d1e3      	bne.n	8005230 <xQueueGenericCreateStatic+0x64>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005268:	9a01      	ldr	r2, [sp, #4]
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800526a:	4622      	mov	r2, r4
 800526c:	e7ea      	b.n	8005244 <xQueueGenericCreateStatic+0x78>

0800526e <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526e:	b940      	cbnz	r0, 8005282 <xQueueGenericCreate+0x14>
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	e7fe      	b.n	8005280 <xQueueGenericCreate+0x12>
	{
 8005282:	b570      	push	{r4, r5, r6, lr}
 8005284:	460c      	mov	r4, r1
 8005286:	4606      	mov	r6, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005288:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800528c:	3048      	adds	r0, #72	@ 0x48
 800528e:	f001 fa77 	bl	8006780 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8005292:	4605      	mov	r5, r0
 8005294:	b160      	cbz	r0, 80052b0 <xQueueGenericCreate+0x42>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005296:	2300      	movs	r3, #0
 8005298:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800529c:	b154      	cbz	r4, 80052b4 <xQueueGenericCreate+0x46>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800529e:	f100 0348 	add.w	r3, r0, #72	@ 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80052a2:	602b      	str	r3, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80052a4:	63ee      	str	r6, [r5, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80052a6:	642c      	str	r4, [r5, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80052a8:	2101      	movs	r1, #1
 80052aa:	4628      	mov	r0, r5
 80052ac:	f7ff ff4c 	bl	8005148 <xQueueGenericReset>
	}
 80052b0:	4628      	mov	r0, r5
 80052b2:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80052b4:	4603      	mov	r3, r0
 80052b6:	e7f4      	b.n	80052a2 <xQueueGenericCreate+0x34>

080052b8 <xQueueGenericSend>:
{
 80052b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80052bc:	b085      	sub	sp, #20
 80052be:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80052c0:	b188      	cbz	r0, 80052e6 <xQueueGenericSend+0x2e>
 80052c2:	460e      	mov	r6, r1
 80052c4:	461d      	mov	r5, r3
 80052c6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c8:	b1b1      	cbz	r1, 80052f8 <xQueueGenericSend+0x40>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ca:	2d02      	cmp	r5, #2
 80052cc:	d120      	bne.n	8005310 <xQueueGenericSend+0x58>
 80052ce:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d01d      	beq.n	8005310 <xQueueGenericSend+0x58>
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	e7fe      	b.n	80052e4 <xQueueGenericSend+0x2c>
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80052f6:	e7fe      	b.n	80052f6 <xQueueGenericSend+0x3e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052f8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d0e5      	beq.n	80052ca <xQueueGenericSend+0x12>
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	e7fe      	b.n	800530e <xQueueGenericSend+0x56>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005310:	f000 ff20 	bl	8006154 <xTaskGetSchedulerState>
 8005314:	4680      	mov	r8, r0
 8005316:	b950      	cbnz	r0, 800532e <xQueueGenericSend+0x76>
 8005318:	9b01      	ldr	r3, [sp, #4]
 800531a:	b153      	cbz	r3, 8005332 <xQueueGenericSend+0x7a>
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	e7fe      	b.n	800532c <xQueueGenericSend+0x74>
 800532e:	f04f 0800 	mov.w	r8, #0
		prvLockQueue( pxQueue );
 8005332:	2700      	movs	r7, #0
 8005334:	e037      	b.n	80053a6 <xQueueGenericSend+0xee>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005336:	462a      	mov	r2, r5
 8005338:	4631      	mov	r1, r6
 800533a:	4620      	mov	r0, r4
 800533c:	f7ff fe7c 	bl	8005038 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005340:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8005342:	b983      	cbnz	r3, 8005366 <xQueueGenericSend+0xae>
					else if( xYieldRequired != pdFALSE )
 8005344:	b148      	cbz	r0, 800535a <xQueueGenericSend+0xa2>
						queueYIELD_IF_USING_PREEMPTION();
 8005346:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800534a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800534e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800535a:	f001 f8ad 	bl	80064b8 <vPortExitCritical>
				return pdPASS;
 800535e:	2001      	movs	r0, #1
}
 8005360:	b005      	add	sp, #20
 8005362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005366:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800536a:	f000 fe5b 	bl	8006024 <xTaskRemoveFromEventList>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0f3      	beq.n	800535a <xQueueGenericSend+0xa2>
							queueYIELD_IF_USING_PREEMPTION();
 8005372:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800537e:	f3bf 8f4f 	dsb	sy
 8005382:	f3bf 8f6f 	isb	sy
 8005386:	e7e8      	b.n	800535a <xQueueGenericSend+0xa2>
					taskEXIT_CRITICAL();
 8005388:	f001 f896 	bl	80064b8 <vPortExitCritical>
					return errQUEUE_FULL;
 800538c:	2000      	movs	r0, #0
 800538e:	e7e7      	b.n	8005360 <xQueueGenericSend+0xa8>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005390:	a802      	add	r0, sp, #8
 8005392:	f000 fe8b 	bl	80060ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005396:	e014      	b.n	80053c2 <xQueueGenericSend+0x10a>
				prvUnlockQueue( pxQueue );
 8005398:	4620      	mov	r0, r4
 800539a:	f7ff fe9a 	bl	80050d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800539e:	f000 fcc5 	bl	8005d2c <xTaskResumeAll>
 80053a2:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 80053a6:	f001 f865 	bl	8006474 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053aa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80053ac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3c1      	bcc.n	8005336 <xQueueGenericSend+0x7e>
 80053b2:	2d02      	cmp	r5, #2
 80053b4:	d0bf      	beq.n	8005336 <xQueueGenericSend+0x7e>
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b6:	9b01      	ldr	r3, [sp, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d0e5      	beq.n	8005388 <xQueueGenericSend+0xd0>
				else if( xEntryTimeSet == pdFALSE )
 80053bc:	f1b8 0f00 	cmp.w	r8, #0
 80053c0:	d0e6      	beq.n	8005390 <xQueueGenericSend+0xd8>
		taskEXIT_CRITICAL();
 80053c2:	f001 f879 	bl	80064b8 <vPortExitCritical>
		vTaskSuspendAll();
 80053c6:	f000 fc0d 	bl	8005be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053ca:	f001 f853 	bl	8006474 <vPortEnterCritical>
 80053ce:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80053d2:	b252      	sxtb	r2, r2
 80053d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80053d8:	bf08      	it	eq
 80053da:	f884 7044 	strbeq.w	r7, [r4, #68]	@ 0x44
 80053de:	f894 2045 	ldrb.w	r2, [r4, #69]	@ 0x45
 80053e2:	b252      	sxtb	r2, r2
 80053e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80053e8:	bf08      	it	eq
 80053ea:	f884 7045 	strbeq.w	r7, [r4, #69]	@ 0x45
 80053ee:	f001 f863 	bl	80064b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053f2:	a901      	add	r1, sp, #4
 80053f4:	a802      	add	r0, sp, #8
 80053f6:	f000 fe65 	bl	80060c4 <xTaskCheckForTimeOut>
 80053fa:	bb00      	cbnz	r0, 800543e <xQueueGenericSend+0x186>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80053fc:	f001 f83a 	bl	8006474 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005400:	f8d4 9038 	ldr.w	r9, [r4, #56]	@ 0x38
 8005404:	f8d4 803c 	ldr.w	r8, [r4, #60]	@ 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8005408:	f001 f856 	bl	80064b8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800540c:	45c1      	cmp	r9, r8
 800540e:	d1c3      	bne.n	8005398 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005410:	9901      	ldr	r1, [sp, #4]
 8005412:	f104 0010 	add.w	r0, r4, #16
 8005416:	f000 fded 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800541a:	4620      	mov	r0, r4
 800541c:	f7ff fe59 	bl	80050d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005420:	f000 fc84 	bl	8005d2c <xTaskResumeAll>
 8005424:	2800      	cmp	r0, #0
 8005426:	d1bc      	bne.n	80053a2 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8005428:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800542c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005430:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	e7b1      	b.n	80053a2 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800543e:	4620      	mov	r0, r4
 8005440:	f7ff fe47 	bl	80050d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005444:	f000 fc72 	bl	8005d2c <xTaskResumeAll>
			return errQUEUE_FULL;
 8005448:	2000      	movs	r0, #0
 800544a:	e789      	b.n	8005360 <xQueueGenericSend+0xa8>

0800544c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800544c:	b148      	cbz	r0, 8005462 <prvInitialiseMutex+0x16>
	{
 800544e:	b508      	push	{r3, lr}
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005450:	2100      	movs	r1, #0
 8005452:	6081      	str	r1, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005454:	6001      	str	r1, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005456:	60c1      	str	r1, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005458:	460b      	mov	r3, r1
 800545a:	460a      	mov	r2, r1
 800545c:	f7ff ff2c 	bl	80052b8 <xQueueGenericSend>
	}
 8005460:	bd08      	pop	{r3, pc}
 8005462:	4770      	bx	lr

08005464 <xQueueCreateMutex>:
	{
 8005464:	b510      	push	{r4, lr}
 8005466:	4602      	mov	r2, r0
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005468:	2100      	movs	r1, #0
 800546a:	2001      	movs	r0, #1
 800546c:	f7ff feff 	bl	800526e <xQueueGenericCreate>
 8005470:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005472:	f7ff ffeb 	bl	800544c <prvInitialiseMutex>
	}
 8005476:	4620      	mov	r0, r4
 8005478:	bd10      	pop	{r4, pc}

0800547a <xQueueCreateMutexStatic>:
	{
 800547a:	b510      	push	{r4, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005480:	9000      	str	r0, [sp, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	4611      	mov	r1, r2
 8005486:	2001      	movs	r0, #1
 8005488:	f7ff fea0 	bl	80051cc <xQueueGenericCreateStatic>
 800548c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800548e:	f7ff ffdd 	bl	800544c <prvInitialiseMutex>
	}
 8005492:	4620      	mov	r0, r4
 8005494:	b002      	add	sp, #8
 8005496:	bd10      	pop	{r4, pc}

08005498 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8005498:	b168      	cbz	r0, 80054b6 <xQueueGiveFromISR+0x1e>
{
 800549a:	b570      	push	{r4, r5, r6, lr}
 800549c:	460c      	mov	r4, r1
 800549e:	4605      	mov	r5, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 80054a0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80054a2:	b18b      	cbz	r3, 80054c8 <xQueueGiveFromISR+0x30>
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	e7fe      	b.n	80054b4 <xQueueGiveFromISR+0x1c>
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 80054c6:	e7fe      	b.n	80054c6 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80054c8:	6803      	ldr	r3, [r0, #0]
 80054ca:	b1eb      	cbz	r3, 8005508 <xQueueGiveFromISR+0x70>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054cc:	f001 f8fa 	bl	80066c4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054d0:	f3ef 8611 	mrs	r6, BASEPRI
 80054d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d8:	f383 8811 	msr	BASEPRI, r3
 80054dc:	f3bf 8f6f 	isb	sy
 80054e0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e4:	6baa      	ldr	r2, [r5, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80054e6:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d926      	bls.n	800553a <xQueueGiveFromISR+0xa2>
			const int8_t cTxLock = pxQueue->cTxLock;
 80054ec:	f895 3045 	ldrb.w	r3, [r5, #69]	@ 0x45
 80054f0:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80054f2:	3201      	adds	r2, #1
 80054f4:	63aa      	str	r2, [r5, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d011      	beq.n	8005520 <xQueueGiveFromISR+0x88>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054fc:	3301      	adds	r3, #1
 80054fe:	b25b      	sxtb	r3, r3
 8005500:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
			xReturn = pdPASS;
 8005504:	2001      	movs	r0, #1
 8005506:	e019      	b.n	800553c <xQueueGiveFromISR+0xa4>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005508:	6883      	ldr	r3, [r0, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0de      	beq.n	80054cc <xQueueGiveFromISR+0x34>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	e7fe      	b.n	800551e <xQueueGiveFromISR+0x86>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005520:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8005522:	b90b      	cbnz	r3, 8005528 <xQueueGiveFromISR+0x90>
			xReturn = pdPASS;
 8005524:	2001      	movs	r0, #1
 8005526:	e009      	b.n	800553c <xQueueGiveFromISR+0xa4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005528:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 800552c:	f000 fd7a 	bl	8006024 <xTaskRemoveFromEventList>
 8005530:	b138      	cbz	r0, 8005542 <xQueueGiveFromISR+0xaa>
							if( pxHigherPriorityTaskWoken != NULL )
 8005532:	b144      	cbz	r4, 8005546 <xQueueGiveFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005534:	2001      	movs	r0, #1
 8005536:	6020      	str	r0, [r4, #0]
 8005538:	e000      	b.n	800553c <xQueueGiveFromISR+0xa4>
			xReturn = errQUEUE_FULL;
 800553a:	2000      	movs	r0, #0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800553c:	f386 8811 	msr	BASEPRI, r6
}
 8005540:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdPASS;
 8005542:	2001      	movs	r0, #1
 8005544:	e7fa      	b.n	800553c <xQueueGiveFromISR+0xa4>
 8005546:	2001      	movs	r0, #1
 8005548:	e7f8      	b.n	800553c <xQueueGiveFromISR+0xa4>

0800554a <xQueueSemaphoreTake>:
{
 800554a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800554c:	b085      	sub	sp, #20
 800554e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005550:	b158      	cbz	r0, 800556a <xQueueSemaphoreTake+0x20>
 8005552:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8005554:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005556:	b18b      	cbz	r3, 800557c <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	e7fe      	b.n	8005568 <xQueueSemaphoreTake+0x1e>
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800557a:	e7fe      	b.n	800557a <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800557c:	f000 fdea 	bl	8006154 <xTaskGetSchedulerState>
 8005580:	4607      	mov	r7, r0
 8005582:	b950      	cbnz	r0, 800559a <xQueueSemaphoreTake+0x50>
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	b163      	cbz	r3, 80055a2 <xQueueSemaphoreTake+0x58>
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	e7fe      	b.n	8005598 <xQueueSemaphoreTake+0x4e>
 800559a:	2600      	movs	r6, #0
 800559c:	4637      	mov	r7, r6
		prvLockQueue( pxQueue );
 800559e:	2500      	movs	r5, #0
 80055a0:	e04d      	b.n	800563e <xQueueSemaphoreTake+0xf4>
 80055a2:	4606      	mov	r6, r0
 80055a4:	e7fb      	b.n	800559e <xQueueSemaphoreTake+0x54>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80055a6:	3b01      	subs	r3, #1
 80055a8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055aa:	6823      	ldr	r3, [r4, #0]
 80055ac:	b13b      	cbz	r3, 80055be <xQueueSemaphoreTake+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055ae:	6923      	ldr	r3, [r4, #16]
 80055b0:	b94b      	cbnz	r3, 80055c6 <xQueueSemaphoreTake+0x7c>
				taskEXIT_CRITICAL();
 80055b2:	f000 ff81 	bl	80064b8 <vPortExitCritical>
				return pdPASS;
 80055b6:	2601      	movs	r6, #1
}
 80055b8:	4630      	mov	r0, r6
 80055ba:	b005      	add	sp, #20
 80055bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80055be:	f000 fedf 	bl	8006380 <pvTaskIncrementMutexHeldCount>
 80055c2:	60a0      	str	r0, [r4, #8]
 80055c4:	e7f3      	b.n	80055ae <xQueueSemaphoreTake+0x64>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c6:	f104 0010 	add.w	r0, r4, #16
 80055ca:	f000 fd2b 	bl	8006024 <xTaskRemoveFromEventList>
 80055ce:	2800      	cmp	r0, #0
 80055d0:	d0ef      	beq.n	80055b2 <xQueueSemaphoreTake+0x68>
						queueYIELD_IF_USING_PREEMPTION();
 80055d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80055d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	e7e4      	b.n	80055b2 <xQueueSemaphoreTake+0x68>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80055e8:	b146      	cbz	r6, 80055fc <xQueueSemaphoreTake+0xb2>
 80055ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	e7fe      	b.n	80055fa <xQueueSemaphoreTake+0xb0>
					taskEXIT_CRITICAL();
 80055fc:	f000 ff5c 	bl	80064b8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8005600:	e7da      	b.n	80055b8 <xQueueSemaphoreTake+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005602:	a802      	add	r0, sp, #8
 8005604:	f000 fd52 	bl	80060ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005608:	e023      	b.n	8005652 <xQueueSemaphoreTake+0x108>
						taskENTER_CRITICAL();
 800560a:	f000 ff33 	bl	8006474 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800560e:	68a0      	ldr	r0, [r4, #8]
 8005610:	f000 fdb0 	bl	8006174 <xTaskPriorityInherit>
 8005614:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8005616:	f000 ff4f 	bl	80064b8 <vPortExitCritical>
 800561a:	e040      	b.n	800569e <xQueueSemaphoreTake+0x154>
				prvUnlockQueue( pxQueue );
 800561c:	4620      	mov	r0, r4
 800561e:	f7ff fd58 	bl	80050d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005622:	f000 fb83 	bl	8005d2c <xTaskResumeAll>
 8005626:	e009      	b.n	800563c <xQueueSemaphoreTake+0xf2>
			prvUnlockQueue( pxQueue );
 8005628:	4620      	mov	r0, r4
 800562a:	f7ff fd52 	bl	80050d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562e:	f000 fb7d 	bl	8005d2c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005632:	4620      	mov	r0, r4
 8005634:	f7ff fcf5 	bl	8005022 <prvIsQueueEmpty>
 8005638:	2800      	cmp	r0, #0
 800563a:	d147      	bne.n	80056cc <xQueueSemaphoreTake+0x182>
 800563c:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
 800563e:	f000 ff19 	bl	8006474 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005642:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ae      	bne.n	80055a6 <xQueueSemaphoreTake+0x5c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005648:	9b01      	ldr	r3, [sp, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d0cc      	beq.n	80055e8 <xQueueSemaphoreTake+0x9e>
				else if( xEntryTimeSet == pdFALSE )
 800564e:	2f00      	cmp	r7, #0
 8005650:	d0d7      	beq.n	8005602 <xQueueSemaphoreTake+0xb8>
		taskEXIT_CRITICAL();
 8005652:	f000 ff31 	bl	80064b8 <vPortExitCritical>
		vTaskSuspendAll();
 8005656:	f000 fac5 	bl	8005be4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800565a:	f000 ff0b 	bl	8006474 <vPortEnterCritical>
 800565e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8005662:	b25b      	sxtb	r3, r3
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	bf08      	it	eq
 800566a:	f884 5044 	strbeq.w	r5, [r4, #68]	@ 0x44
 800566e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005672:	b25b      	sxtb	r3, r3
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	bf08      	it	eq
 800567a:	f884 5045 	strbeq.w	r5, [r4, #69]	@ 0x45
 800567e:	f000 ff1b 	bl	80064b8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005682:	a901      	add	r1, sp, #4
 8005684:	a802      	add	r0, sp, #8
 8005686:	f000 fd1d 	bl	80060c4 <xTaskCheckForTimeOut>
 800568a:	2800      	cmp	r0, #0
 800568c:	d1cc      	bne.n	8005628 <xQueueSemaphoreTake+0xde>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800568e:	4620      	mov	r0, r4
 8005690:	f7ff fcc7 	bl	8005022 <prvIsQueueEmpty>
 8005694:	2800      	cmp	r0, #0
 8005696:	d0c1      	beq.n	800561c <xQueueSemaphoreTake+0xd2>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005698:	6823      	ldr	r3, [r4, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d0b5      	beq.n	800560a <xQueueSemaphoreTake+0xc0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800569e:	9901      	ldr	r1, [sp, #4]
 80056a0:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80056a4:	f000 fca6 	bl	8005ff4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056a8:	4620      	mov	r0, r4
 80056aa:	f7ff fd12 	bl	80050d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056ae:	f000 fb3d 	bl	8005d2c <xTaskResumeAll>
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d1c2      	bne.n	800563c <xQueueSemaphoreTake+0xf2>
					portYIELD_WITHIN_API();
 80056b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80056ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	f3bf 8f6f 	isb	sy
 80056ca:	e7b7      	b.n	800563c <xQueueSemaphoreTake+0xf2>
					if( xInheritanceOccurred != pdFALSE )
 80056cc:	2e00      	cmp	r6, #0
 80056ce:	f43f af73 	beq.w	80055b8 <xQueueSemaphoreTake+0x6e>
						taskENTER_CRITICAL();
 80056d2:	f000 fecf 	bl	8006474 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056d6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80056d8:	b119      	cbz	r1, 80056e2 <xQueueSemaphoreTake+0x198>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056da:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80056dc:	6819      	ldr	r1, [r3, #0]
 80056de:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80056e2:	68a0      	ldr	r0, [r4, #8]
 80056e4:	f000 fdf2 	bl	80062cc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80056e8:	f000 fee6 	bl	80064b8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80056ec:	2600      	movs	r6, #0
 80056ee:	e763      	b.n	80055b8 <xQueueSemaphoreTake+0x6e>

080056f0 <xQueueReceiveFromISR>:
{
 80056f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 80056f4:	b1b0      	cbz	r0, 8005724 <xQueueReceiveFromISR+0x34>
 80056f6:	460d      	mov	r5, r1
 80056f8:	4690      	mov	r8, r2
 80056fa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056fc:	b1d9      	cbz	r1, 8005736 <xQueueReceiveFromISR+0x46>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056fe:	f000 ffe1 	bl	80066c4 <vPortValidateInterruptPriority>
	__asm volatile
 8005702:	f3ef 8711 	mrs	r7, BASEPRI
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005716:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005718:	b9ce      	cbnz	r6, 800574e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
 800571a:	2000      	movs	r0, #0
	__asm volatile
 800571c:	f387 8811 	msr	BASEPRI, r7
}
 8005720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8005724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005728:	f383 8811 	msr	BASEPRI, r3
 800572c:	f3bf 8f6f 	isb	sy
 8005730:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 8005734:	e7fe      	b.n	8005734 <xQueueReceiveFromISR+0x44>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005736:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0e0      	beq.n	80056fe <xQueueReceiveFromISR+0xe>
 800573c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	e7fe      	b.n	800574c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800574e:	f894 9044 	ldrb.w	r9, [r4, #68]	@ 0x44
 8005752:	fa4f f989 	sxtb.w	r9, r9
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005756:	4629      	mov	r1, r5
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff fca8 	bl	80050ae <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800575e:	1e73      	subs	r3, r6, #1
 8005760:	63a3      	str	r3, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8005762:	f1b9 3fff 	cmp.w	r9, #4294967295
 8005766:	d006      	beq.n	8005776 <xQueueReceiveFromISR+0x86>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005768:	f109 0301 	add.w	r3, r9, #1
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
			xReturn = pdPASS;
 8005772:	2001      	movs	r0, #1
 8005774:	e7d2      	b.n	800571c <xQueueReceiveFromISR+0x2c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005776:	6923      	ldr	r3, [r4, #16]
 8005778:	b90b      	cbnz	r3, 800577e <xQueueReceiveFromISR+0x8e>
			xReturn = pdPASS;
 800577a:	2001      	movs	r0, #1
 800577c:	e7ce      	b.n	800571c <xQueueReceiveFromISR+0x2c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800577e:	f104 0010 	add.w	r0, r4, #16
 8005782:	f000 fc4f 	bl	8006024 <xTaskRemoveFromEventList>
 8005786:	b130      	cbz	r0, 8005796 <xQueueReceiveFromISR+0xa6>
						if( pxHigherPriorityTaskWoken != NULL )
 8005788:	f1b8 0f00 	cmp.w	r8, #0
 800578c:	d005      	beq.n	800579a <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800578e:	2001      	movs	r0, #1
 8005790:	f8c8 0000 	str.w	r0, [r8]
 8005794:	e7c2      	b.n	800571c <xQueueReceiveFromISR+0x2c>
			xReturn = pdPASS;
 8005796:	2001      	movs	r0, #1
 8005798:	e7c0      	b.n	800571c <xQueueReceiveFromISR+0x2c>
 800579a:	2001      	movs	r0, #1
 800579c:	e7be      	b.n	800571c <xQueueReceiveFromISR+0x2c>
	...

080057a0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a0:	4b08      	ldr	r3, [pc, #32]	@ (80057c4 <prvResetNextTaskUnblockTime+0x24>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	b923      	cbnz	r3, 80057b2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057a8:	4b07      	ldr	r3, [pc, #28]	@ (80057c8 <prvResetNextTaskUnblockTime+0x28>)
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	601a      	str	r2, [r3, #0]
 80057b0:	4770      	bx	lr
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b2:	4b04      	ldr	r3, [pc, #16]	@ (80057c4 <prvResetNextTaskUnblockTime+0x24>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	4b02      	ldr	r3, [pc, #8]	@ (80057c8 <prvResetNextTaskUnblockTime+0x28>)
 80057be:	601a      	str	r2, [r3, #0]
	}
}
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	2000094c 	.word	0x2000094c
 80057c8:	200008e4 	.word	0x200008e4

080057cc <prvInitialiseNewTask>:
{
 80057cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057d0:	4606      	mov	r6, r0
 80057d2:	461f      	mov	r7, r3
 80057d4:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 80057d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80057da:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80057de:	3a01      	subs	r2, #1
 80057e0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80057e2:	eb05 0582 	add.w	r5, r5, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80057e6:	f025 0507 	bic.w	r5, r5, #7
	if( pcName != NULL )
 80057ea:	2900      	cmp	r1, #0
 80057ec:	d037      	beq.n	800585e <prvInitialiseNewTask+0x92>
 80057ee:	460b      	mov	r3, r1
 80057f0:	f101 3cff 	add.w	ip, r1, #4294967295
 80057f4:	f104 0e33 	add.w	lr, r4, #51	@ 0x33
 80057f8:	330f      	adds	r3, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057fa:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 80057fe:	f80e 2f01 	strb.w	r2, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 8005802:	b10a      	cbz	r2, 8005808 <prvInitialiseNewTask+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005804:	459c      	cmp	ip, r3
 8005806:	d1f8      	bne.n	80057fa <prvInitialiseNewTask+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005808:	2300      	movs	r3, #0
 800580a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800580e:	9b08      	ldr	r3, [sp, #32]
 8005810:	2b06      	cmp	r3, #6
 8005812:	bf28      	it	cs
 8005814:	2306      	movcs	r3, #6
 8005816:	4699      	mov	r9, r3
	pxNewTCB->uxPriority = uxPriority;
 8005818:	62e3      	str	r3, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800581a:	6463      	str	r3, [r4, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800581c:	f04f 0a00 	mov.w	sl, #0
 8005820:	f8c4 a048 	str.w	sl, [r4, #72]	@ 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005824:	1d20      	adds	r0, r4, #4
 8005826:	f7ff fbc3 	bl	8004fb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800582a:	f104 0018 	add.w	r0, r4, #24
 800582e:	f7ff fbbf 	bl	8004fb0 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005832:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	f1c9 0307 	rsb	r3, r9, #7
 8005838:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800583a:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ulNotifiedValue = 0;
 800583c:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005840:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005844:	463a      	mov	r2, r7
 8005846:	4631      	mov	r1, r6
 8005848:	4628      	mov	r0, r5
 800584a:	f000 fde5 	bl	8006418 <pxPortInitialiseStack>
 800584e:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005850:	f1b8 0f00 	cmp.w	r8, #0
 8005854:	d001      	beq.n	800585a <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005856:	f8c8 4000 	str.w	r4, [r8]
}
 800585a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800585e:	2300      	movs	r3, #0
 8005860:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
 8005864:	e7d3      	b.n	800580e <prvInitialiseNewTask+0x42>
	...

08005868 <prvAddNewTaskToReadyList>:
{
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800586c:	f000 fe02 	bl	8006474 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8005870:	4a2f      	ldr	r2, [pc, #188]	@ (8005930 <prvAddNewTaskToReadyList+0xc8>)
 8005872:	6813      	ldr	r3, [r2, #0]
 8005874:	3301      	adds	r3, #1
 8005876:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005878:	4b2e      	ldr	r3, [pc, #184]	@ (8005934 <prvAddNewTaskToReadyList+0xcc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d033      	beq.n	80058e8 <prvAddNewTaskToReadyList+0x80>
			if( xSchedulerRunning == pdFALSE )
 8005880:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <prvAddNewTaskToReadyList+0xd0>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	b93b      	cbnz	r3, 8005896 <prvAddNewTaskToReadyList+0x2e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005886:	4b2b      	ldr	r3, [pc, #172]	@ (8005934 <prvAddNewTaskToReadyList+0xcc>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800588c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800588e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005890:	bf9c      	itt	ls
 8005892:	4b28      	ldrls	r3, [pc, #160]	@ (8005934 <prvAddNewTaskToReadyList+0xcc>)
 8005894:	601c      	strls	r4, [r3, #0]
		uxTaskNumber++;
 8005896:	4a29      	ldr	r2, [pc, #164]	@ (800593c <prvAddNewTaskToReadyList+0xd4>)
 8005898:	6813      	ldr	r3, [r2, #0]
 800589a:	3301      	adds	r3, #1
 800589c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800589e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80058a0:	4a27      	ldr	r2, [pc, #156]	@ (8005940 <prvAddNewTaskToReadyList+0xd8>)
 80058a2:	6811      	ldr	r1, [r2, #0]
 80058a4:	2301      	movs	r3, #1
 80058a6:	4083      	lsls	r3, r0
 80058a8:	430b      	orrs	r3, r1
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80058b0:	1d21      	adds	r1, r4, #4
 80058b2:	4b24      	ldr	r3, [pc, #144]	@ (8005944 <prvAddNewTaskToReadyList+0xdc>)
 80058b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80058b8:	f7ff fb7d 	bl	8004fb6 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80058bc:	f000 fdfc 	bl	80064b8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80058c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005938 <prvAddNewTaskToReadyList+0xd0>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	b17b      	cbz	r3, 80058e6 <prvAddNewTaskToReadyList+0x7e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80058c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005934 <prvAddNewTaskToReadyList+0xcc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d209      	bcs.n	80058e6 <prvAddNewTaskToReadyList+0x7e>
			taskYIELD_IF_USING_PREEMPTION();
 80058d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80058d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	f3bf 8f6f 	isb	sy
}
 80058e6:	bd70      	pop	{r4, r5, r6, pc}
			pxCurrentTCB = pxNewTCB;
 80058e8:	4b12      	ldr	r3, [pc, #72]	@ (8005934 <prvAddNewTaskToReadyList+0xcc>)
 80058ea:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80058ec:	6813      	ldr	r3, [r2, #0]
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d1d1      	bne.n	8005896 <prvAddNewTaskToReadyList+0x2e>
 80058f2:	4d14      	ldr	r5, [pc, #80]	@ (8005944 <prvAddNewTaskToReadyList+0xdc>)
 80058f4:	f105 068c 	add.w	r6, r5, #140	@ 0x8c
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80058f8:	4628      	mov	r0, r5
 80058fa:	f7ff fb4e 	bl	8004f9a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058fe:	3514      	adds	r5, #20
 8005900:	42b5      	cmp	r5, r6
 8005902:	d1f9      	bne.n	80058f8 <prvAddNewTaskToReadyList+0x90>
	vListInitialise( &xDelayedTaskList1 );
 8005904:	4e10      	ldr	r6, [pc, #64]	@ (8005948 <prvAddNewTaskToReadyList+0xe0>)
 8005906:	4630      	mov	r0, r6
 8005908:	f7ff fb47 	bl	8004f9a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800590c:	4d0f      	ldr	r5, [pc, #60]	@ (800594c <prvAddNewTaskToReadyList+0xe4>)
 800590e:	4628      	mov	r0, r5
 8005910:	f7ff fb43 	bl	8004f9a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005914:	480e      	ldr	r0, [pc, #56]	@ (8005950 <prvAddNewTaskToReadyList+0xe8>)
 8005916:	f7ff fb40 	bl	8004f9a <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 800591a:	480e      	ldr	r0, [pc, #56]	@ (8005954 <prvAddNewTaskToReadyList+0xec>)
 800591c:	f7ff fb3d 	bl	8004f9a <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8005920:	480d      	ldr	r0, [pc, #52]	@ (8005958 <prvAddNewTaskToReadyList+0xf0>)
 8005922:	f7ff fb3a 	bl	8004f9a <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8005926:	4b0d      	ldr	r3, [pc, #52]	@ (800595c <prvAddNewTaskToReadyList+0xf4>)
 8005928:	601e      	str	r6, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800592a:	4b0d      	ldr	r3, [pc, #52]	@ (8005960 <prvAddNewTaskToReadyList+0xf8>)
 800592c:	601d      	str	r5, [r3, #0]
}
 800592e:	e7b2      	b.n	8005896 <prvAddNewTaskToReadyList+0x2e>
 8005930:	20000904 	.word	0x20000904
 8005934:	20000a04 	.word	0x20000a04
 8005938:	200008f8 	.word	0x200008f8
 800593c:	200008e8 	.word	0x200008e8
 8005940:	200008fc 	.word	0x200008fc
 8005944:	20000978 	.word	0x20000978
 8005948:	20000964 	.word	0x20000964
 800594c:	20000950 	.word	0x20000950
 8005950:	20000934 	.word	0x20000934
 8005954:	20000920 	.word	0x20000920
 8005958:	20000908 	.word	0x20000908
 800595c:	2000094c 	.word	0x2000094c
 8005960:	20000948 	.word	0x20000948

08005964 <prvDeleteTCB>:
	{
 8005964:	b510      	push	{r4, lr}
 8005966:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005968:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
 800596c:	b163      	cbz	r3, 8005988 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800596e:	2b01      	cmp	r3, #1
 8005970:	d011      	beq.n	8005996 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005972:	2b02      	cmp	r3, #2
 8005974:	d00e      	beq.n	8005994 <prvDeleteTCB+0x30>
 8005976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597a:	f383 8811 	msr	BASEPRI, r3
 800597e:	f3bf 8f6f 	isb	sy
 8005982:	f3bf 8f4f 	dsb	sy
 8005986:	e7fe      	b.n	8005986 <prvDeleteTCB+0x22>
				vPortFree( pxTCB->pxStack );
 8005988:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800598a:	f000 ff95 	bl	80068b8 <vPortFree>
				vPortFree( pxTCB );
 800598e:	4620      	mov	r0, r4
 8005990:	f000 ff92 	bl	80068b8 <vPortFree>
	}
 8005994:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8005996:	f000 ff8f 	bl	80068b8 <vPortFree>
 800599a:	e7fb      	b.n	8005994 <prvDeleteTCB+0x30>

0800599c <prvIdleTask>:
{
 800599c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800599e:	4c15      	ldr	r4, [pc, #84]	@ (80059f4 <prvIdleTask+0x58>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a0:	4f15      	ldr	r7, [pc, #84]	@ (80059f8 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80059a2:	4e16      	ldr	r6, [pc, #88]	@ (80059fc <prvIdleTask+0x60>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059a4:	f8df 8058 	ldr.w	r8, [pc, #88]	@ 8005a00 <prvIdleTask+0x64>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	b1a3      	cbz	r3, 80059d6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 80059ac:	f000 fd62 	bl	8006474 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059b4:	1d28      	adds	r0, r5, #4
 80059b6:	f7ff fb22 	bl	8004ffe <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059ba:	6833      	ldr	r3, [r6, #0]
 80059bc:	3b01      	subs	r3, #1
 80059be:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	3b01      	subs	r3, #1
 80059c4:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80059c6:	f000 fd77 	bl	80064b8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80059ca:	4628      	mov	r0, r5
 80059cc:	f7ff ffca 	bl	8005964 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059d0:	6823      	ldr	r3, [r4, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d1ea      	bne.n	80059ac <prvIdleTask+0x10>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80059d6:	f8d8 3000 	ldr.w	r3, [r8]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d9e4      	bls.n	80059a8 <prvIdleTask+0xc>
				taskYIELD();
 80059de:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80059e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	f3bf 8f6f 	isb	sy
 80059f2:	e7d9      	b.n	80059a8 <prvIdleTask+0xc>
 80059f4:	2000091c 	.word	0x2000091c
 80059f8:	20000920 	.word	0x20000920
 80059fc:	20000904 	.word	0x20000904
 8005a00:	20000978 	.word	0x20000978

08005a04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a04:	b570      	push	{r4, r5, r6, lr}
 8005a06:	4604      	mov	r4, r0
 8005a08:	460d      	mov	r5, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005a80 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005a0c:	681e      	ldr	r6, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0e:	4b1d      	ldr	r3, [pc, #116]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	3004      	adds	r0, #4
 8005a14:	f7ff faf3 	bl	8004ffe <uxListRemove>
 8005a18:	b948      	cbnz	r0, 8005a2e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	491a      	ldr	r1, [pc, #104]	@ (8005a88 <prvAddCurrentTaskToDelayedList+0x84>)
 8005a20:	680b      	ldr	r3, [r1, #0]
 8005a22:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8005a24:	2201      	movs	r2, #1
 8005a26:	4082      	lsls	r2, r0
 8005a28:	ea23 0302 	bic.w	r3, r3, r2
 8005a2c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a2e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8005a32:	d00d      	beq.n	8005a50 <prvAddCurrentTaskToDelayedList+0x4c>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a34:	4434      	add	r4, r6

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a36:	4b13      	ldr	r3, [pc, #76]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8005a3c:	42a6      	cmp	r6, r4
 8005a3e:	d910      	bls.n	8005a62 <prvAddCurrentTaskToDelayedList+0x5e>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a40:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0x88>)
 8005a42:	6818      	ldr	r0, [r3, #0]
 8005a44:	4b0f      	ldr	r3, [pc, #60]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a46:	6819      	ldr	r1, [r3, #0]
 8005a48:	3104      	adds	r1, #4
 8005a4a:	f7ff fabf 	bl	8004fcc <vListInsert>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a4e:	bd70      	pop	{r4, r5, r6, pc}
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	d0ef      	beq.n	8005a34 <prvAddCurrentTaskToDelayedList+0x30>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a54:	4b0b      	ldr	r3, [pc, #44]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a56:	6819      	ldr	r1, [r3, #0]
 8005a58:	3104      	adds	r1, #4
 8005a5a:	480d      	ldr	r0, [pc, #52]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x8c>)
 8005a5c:	f7ff faab 	bl	8004fb6 <vListInsertEnd>
 8005a60:	e7f5      	b.n	8005a4e <prvAddCurrentTaskToDelayedList+0x4a>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a62:	4b0c      	ldr	r3, [pc, #48]	@ (8005a94 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	4b07      	ldr	r3, [pc, #28]	@ (8005a84 <prvAddCurrentTaskToDelayedList+0x80>)
 8005a68:	6819      	ldr	r1, [r3, #0]
 8005a6a:	3104      	adds	r1, #4
 8005a6c:	f7ff faae 	bl	8004fcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a70:	4b09      	ldr	r3, [pc, #36]	@ (8005a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	42a3      	cmp	r3, r4
					xNextTaskUnblockTime = xTimeToWake;
 8005a76:	bf84      	itt	hi
 8005a78:	4b07      	ldrhi	r3, [pc, #28]	@ (8005a98 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a7a:	601c      	strhi	r4, [r3, #0]
}
 8005a7c:	e7e7      	b.n	8005a4e <prvAddCurrentTaskToDelayedList+0x4a>
 8005a7e:	bf00      	nop
 8005a80:	20000900 	.word	0x20000900
 8005a84:	20000a04 	.word	0x20000a04
 8005a88:	200008fc 	.word	0x200008fc
 8005a8c:	20000948 	.word	0x20000948
 8005a90:	20000908 	.word	0x20000908
 8005a94:	2000094c 	.word	0x2000094c
 8005a98:	200008e4 	.word	0x200008e4

08005a9c <xTaskCreateStatic>:
	{
 8005a9c:	b530      	push	{r4, r5, lr}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8005aa2:	b17c      	cbz	r4, 8005ac4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aa4:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005aa6:	b1b5      	cbz	r5, 8005ad6 <xTaskCreateStatic+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aa8:	2554      	movs	r5, #84	@ 0x54
 8005aaa:	9504      	str	r5, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005aac:	9d04      	ldr	r5, [sp, #16]
 8005aae:	2d54      	cmp	r5, #84	@ 0x54
 8005ab0:	d01a      	beq.n	8005ae8 <xTaskCreateStatic+0x4c>
 8005ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskCreateStatic+0x26>
 8005ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 8005ad4:	e7fe      	b.n	8005ad4 <xTaskCreateStatic+0x38>
 8005ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ada:	f383 8811 	msr	BASEPRI, r3
 8005ade:	f3bf 8f6f 	isb	sy
 8005ae2:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 8005ae6:	e7fe      	b.n	8005ae6 <xTaskCreateStatic+0x4a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ae8:	9d04      	ldr	r5, [sp, #16]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005aea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8005aec:	632c      	str	r4, [r5, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005aee:	2402      	movs	r4, #2
 8005af0:	f885 4051 	strb.w	r4, [r5, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005af4:	2400      	movs	r4, #0
 8005af6:	9403      	str	r4, [sp, #12]
 8005af8:	9502      	str	r5, [sp, #8]
 8005afa:	ac05      	add	r4, sp, #20
 8005afc:	9401      	str	r4, [sp, #4]
 8005afe:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005b00:	9400      	str	r4, [sp, #0]
 8005b02:	f7ff fe63 	bl	80057cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b06:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8005b08:	f7ff feae 	bl	8005868 <prvAddNewTaskToReadyList>
	}
 8005b0c:	9805      	ldr	r0, [sp, #20]
 8005b0e:	b007      	add	sp, #28
 8005b10:	bd30      	pop	{r4, r5, pc}

08005b12 <xTaskCreate>:
	{
 8005b12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b16:	b085      	sub	sp, #20
 8005b18:	4607      	mov	r7, r0
 8005b1a:	4688      	mov	r8, r1
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	461e      	mov	r6, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b20:	0090      	lsls	r0, r2, #2
 8005b22:	f000 fe2d 	bl	8006780 <pvPortMalloc>
			if( pxStack != NULL )
 8005b26:	b308      	cbz	r0, 8005b6c <xTaskCreate+0x5a>
 8005b28:	4681      	mov	r9, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b2a:	2054      	movs	r0, #84	@ 0x54
 8005b2c:	f000 fe28 	bl	8006780 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005b30:	4605      	mov	r5, r0
 8005b32:	b1a8      	cbz	r0, 8005b60 <xTaskCreate+0x4e>
					pxNewTCB->pxStack = pxStack;
 8005b34:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b3e:	9303      	str	r3, [sp, #12]
 8005b40:	9002      	str	r0, [sp, #8]
 8005b42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b44:	9301      	str	r3, [sp, #4]
 8005b46:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b48:	9300      	str	r3, [sp, #0]
 8005b4a:	4633      	mov	r3, r6
 8005b4c:	4622      	mov	r2, r4
 8005b4e:	4641      	mov	r1, r8
 8005b50:	4638      	mov	r0, r7
 8005b52:	f7ff fe3b 	bl	80057cc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b56:	4628      	mov	r0, r5
 8005b58:	f7ff fe86 	bl	8005868 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b5c:	2001      	movs	r0, #1
 8005b5e:	e007      	b.n	8005b70 <xTaskCreate+0x5e>
					vPortFree( pxStack );
 8005b60:	4648      	mov	r0, r9
 8005b62:	f000 fea9 	bl	80068b8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b66:	f04f 30ff 	mov.w	r0, #4294967295
 8005b6a:	e001      	b.n	8005b70 <xTaskCreate+0x5e>
 8005b6c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8005b70:	b005      	add	sp, #20
 8005b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005b78 <vTaskStartScheduler>:
{
 8005b78:	b510      	push	{r4, lr}
 8005b7a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b7c:	2400      	movs	r4, #0
 8005b7e:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b80:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b82:	aa07      	add	r2, sp, #28
 8005b84:	a906      	add	r1, sp, #24
 8005b86:	a805      	add	r0, sp, #20
 8005b88:	f7fb fa44 	bl	8001014 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b8c:	9b05      	ldr	r3, [sp, #20]
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	9b06      	ldr	r3, [sp, #24]
 8005b92:	9301      	str	r3, [sp, #4]
 8005b94:	9400      	str	r4, [sp, #0]
 8005b96:	4623      	mov	r3, r4
 8005b98:	9a07      	ldr	r2, [sp, #28]
 8005b9a:	490d      	ldr	r1, [pc, #52]	@ (8005bd0 <vTaskStartScheduler+0x58>)
 8005b9c:	480d      	ldr	r0, [pc, #52]	@ (8005bd4 <vTaskStartScheduler+0x5c>)
 8005b9e:	f7ff ff7d 	bl	8005a9c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005ba2:	b190      	cbz	r0, 8005bca <vTaskStartScheduler+0x52>
 8005ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ba8:	f383 8811 	msr	BASEPRI, r3
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bb4:	4b08      	ldr	r3, [pc, #32]	@ (8005bd8 <vTaskStartScheduler+0x60>)
 8005bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8005bba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bbc:	4b07      	ldr	r3, [pc, #28]	@ (8005bdc <vTaskStartScheduler+0x64>)
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bc2:	4b07      	ldr	r3, [pc, #28]	@ (8005be0 <vTaskStartScheduler+0x68>)
 8005bc4:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8005bc6:	f000 fcef 	bl	80065a8 <xPortStartScheduler>
}
 8005bca:	b008      	add	sp, #32
 8005bcc:	bd10      	pop	{r4, pc}
 8005bce:	bf00      	nop
 8005bd0:	0800b9c8 	.word	0x0800b9c8
 8005bd4:	0800599d 	.word	0x0800599d
 8005bd8:	200008e4 	.word	0x200008e4
 8005bdc:	200008f8 	.word	0x200008f8
 8005be0:	20000900 	.word	0x20000900

08005be4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8005be4:	4a02      	ldr	r2, [pc, #8]	@ (8005bf0 <vTaskSuspendAll+0xc>)
 8005be6:	6813      	ldr	r3, [r2, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	6013      	str	r3, [r2, #0]
}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	200008e0 	.word	0x200008e0

08005bf4 <xTaskIncrementTick>:
{
 8005bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bf8:	4b41      	ldr	r3, [pc, #260]	@ (8005d00 <xTaskIncrementTick+0x10c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d176      	bne.n	8005cee <xTaskIncrementTick+0xfa>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005c00:	4b40      	ldr	r3, [pc, #256]	@ (8005d04 <xTaskIncrementTick+0x110>)
 8005c02:	681e      	ldr	r6, [r3, #0]
 8005c04:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8005c06:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005c08:	b9c6      	cbnz	r6, 8005c3c <xTaskIncrementTick+0x48>
			taskSWITCH_DELAYED_LISTS();
 8005c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8005d08 <xTaskIncrementTick+0x114>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b143      	cbz	r3, 8005c24 <xTaskIncrementTick+0x30>
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	e7fe      	b.n	8005c22 <xTaskIncrementTick+0x2e>
 8005c24:	4a38      	ldr	r2, [pc, #224]	@ (8005d08 <xTaskIncrementTick+0x114>)
 8005c26:	6811      	ldr	r1, [r2, #0]
 8005c28:	4b38      	ldr	r3, [pc, #224]	@ (8005d0c <xTaskIncrementTick+0x118>)
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	6010      	str	r0, [r2, #0]
 8005c2e:	6019      	str	r1, [r3, #0]
 8005c30:	4a37      	ldr	r2, [pc, #220]	@ (8005d10 <xTaskIncrementTick+0x11c>)
 8005c32:	6813      	ldr	r3, [r2, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	f7ff fdb2 	bl	80057a0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c3c:	4b35      	ldr	r3, [pc, #212]	@ (8005d14 <xTaskIncrementTick+0x120>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	42b3      	cmp	r3, r6
 8005c42:	d842      	bhi.n	8005cca <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c44:	4b30      	ldr	r3, [pc, #192]	@ (8005d08 <xTaskIncrementTick+0x114>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	b13b      	cbz	r3, 8005c5c <xTaskIncrementTick+0x68>
BaseType_t xSwitchRequired = pdFALSE;
 8005c4c:	2500      	movs	r5, #0
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c4e:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8005d08 <xTaskIncrementTick+0x114>
					prvAddTaskToReadyList( pxTCB );
 8005c52:	f8df 90d4 	ldr.w	r9, [pc, #212]	@ 8005d28 <xTaskIncrementTick+0x134>
 8005c56:	f8df a0c4 	ldr.w	sl, [pc, #196]	@ 8005d1c <xTaskIncrementTick+0x128>
 8005c5a:	e023      	b.n	8005ca4 <xTaskIncrementTick+0xb0>
BaseType_t xSwitchRequired = pdFALSE;
 8005c5c:	2500      	movs	r5, #0
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005d14 <xTaskIncrementTick+0x120>)
 8005c60:	f04f 32ff 	mov.w	r2, #4294967295
 8005c64:	601a      	str	r2, [r3, #0]
					break;
 8005c66:	e031      	b.n	8005ccc <xTaskIncrementTick+0xd8>
						xNextTaskUnblockTime = xItemValue;
 8005c68:	4a2a      	ldr	r2, [pc, #168]	@ (8005d14 <xTaskIncrementTick+0x120>)
 8005c6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c6c:	e02e      	b.n	8005ccc <xTaskIncrementTick+0xd8>
					prvAddTaskToReadyList( pxTCB );
 8005c6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005c70:	f8d9 2000 	ldr.w	r2, [r9]
 8005c74:	2301      	movs	r3, #1
 8005c76:	4083      	lsls	r3, r0
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c9 3000 	str.w	r3, [r9]
 8005c7e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005c82:	4639      	mov	r1, r7
 8005c84:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8005c88:	f7ff f995 	bl	8004fb6 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c8c:	4b22      	ldr	r3, [pc, #136]	@ (8005d18 <xTaskIncrementTick+0x124>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8005c94:	429a      	cmp	r2, r3
 8005c96:	bf28      	it	cs
 8005c98:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c9a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0dc      	beq.n	8005c5e <xTaskIncrementTick+0x6a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ca4:	f8d8 3000 	ldr.w	r3, [r8]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005cac:	6863      	ldr	r3, [r4, #4]
					if( xConstTickCount < xItemValue )
 8005cae:	429e      	cmp	r6, r3
 8005cb0:	d3da      	bcc.n	8005c68 <xTaskIncrementTick+0x74>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cb2:	1d27      	adds	r7, r4, #4
 8005cb4:	4638      	mov	r0, r7
 8005cb6:	f7ff f9a2 	bl	8004ffe <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005cba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d0d6      	beq.n	8005c6e <xTaskIncrementTick+0x7a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc0:	f104 0018 	add.w	r0, r4, #24
 8005cc4:	f7ff f99b 	bl	8004ffe <uxListRemove>
 8005cc8:	e7d1      	b.n	8005c6e <xTaskIncrementTick+0x7a>
BaseType_t xSwitchRequired = pdFALSE;
 8005cca:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ccc:	4b12      	ldr	r3, [pc, #72]	@ (8005d18 <xTaskIncrementTick+0x124>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4a10      	ldr	r2, [pc, #64]	@ (8005d1c <xTaskIncrementTick+0x128>)
 8005cda:	58d3      	ldr	r3, [r2, r3]
				xSwitchRequired = pdTRUE;
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	bf28      	it	cs
 8005ce0:	2501      	movcs	r5, #1
			if( xYieldPending != pdFALSE )
 8005ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8005d20 <xTaskIncrementTick+0x12c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
				xSwitchRequired = pdTRUE;
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf18      	it	ne
 8005cea:	2501      	movne	r5, #1
 8005cec:	e004      	b.n	8005cf8 <xTaskIncrementTick+0x104>
		++xPendedTicks;
 8005cee:	4a0d      	ldr	r2, [pc, #52]	@ (8005d24 <xTaskIncrementTick+0x130>)
 8005cf0:	6813      	ldr	r3, [r2, #0]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8005cf6:	2500      	movs	r5, #0
}
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	bf00      	nop
 8005d00:	200008e0 	.word	0x200008e0
 8005d04:	20000900 	.word	0x20000900
 8005d08:	2000094c 	.word	0x2000094c
 8005d0c:	20000948 	.word	0x20000948
 8005d10:	200008ec 	.word	0x200008ec
 8005d14:	200008e4 	.word	0x200008e4
 8005d18:	20000a04 	.word	0x20000a04
 8005d1c:	20000978 	.word	0x20000978
 8005d20:	200008f0 	.word	0x200008f0
 8005d24:	200008f4 	.word	0x200008f4
 8005d28:	200008fc 	.word	0x200008fc

08005d2c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 8005d2c:	4b37      	ldr	r3, [pc, #220]	@ (8005e0c <xTaskResumeAll+0xe0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	b943      	cbnz	r3, 8005d44 <xTaskResumeAll+0x18>
 8005d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d36:	f383 8811 	msr	BASEPRI, r3
 8005d3a:	f3bf 8f6f 	isb	sy
 8005d3e:	f3bf 8f4f 	dsb	sy
 8005d42:	e7fe      	b.n	8005d42 <xTaskResumeAll+0x16>
{
 8005d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	taskENTER_CRITICAL();
 8005d48:	f000 fb94 	bl	8006474 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8005d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8005e0c <xTaskResumeAll+0xe0>)
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	3a01      	subs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d150      	bne.n	8005dfc <xTaskResumeAll+0xd0>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e10 <xTaskResumeAll+0xe4>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d052      	beq.n	8005e08 <xTaskResumeAll+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d62:	4b2c      	ldr	r3, [pc, #176]	@ (8005e14 <xTaskResumeAll+0xe8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	b34b      	cbz	r3, 8005dbc <xTaskResumeAll+0x90>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d68:	4f2a      	ldr	r7, [pc, #168]	@ (8005e14 <xTaskResumeAll+0xe8>)
					prvAddTaskToReadyList( pxTCB );
 8005d6a:	4e2b      	ldr	r6, [pc, #172]	@ (8005e18 <xTaskResumeAll+0xec>)
 8005d6c:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8005e28 <xTaskResumeAll+0xfc>
 8005d70:	e001      	b.n	8005d76 <xTaskResumeAll+0x4a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	b303      	cbz	r3, 8005db8 <xTaskResumeAll+0x8c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d7a:	f104 0018 	add.w	r0, r4, #24
 8005d7e:	f7ff f93e 	bl	8004ffe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d82:	1d25      	adds	r5, r4, #4
 8005d84:	4628      	mov	r0, r5
 8005d86:	f7ff f93a 	bl	8004ffe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d8a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8005d8c:	6832      	ldr	r2, [r6, #0]
 8005d8e:	2301      	movs	r3, #1
 8005d90:	4083      	lsls	r3, r0
 8005d92:	4313      	orrs	r3, r2
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8005d9a:	4629      	mov	r1, r5
 8005d9c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8005da0:	f7ff f909 	bl	8004fb6 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005da4:	4b1d      	ldr	r3, [pc, #116]	@ (8005e1c <xTaskResumeAll+0xf0>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d3e0      	bcc.n	8005d72 <xTaskResumeAll+0x46>
						xYieldPending = pdTRUE;
 8005db0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <xTaskResumeAll+0xf4>)
 8005db2:	2201      	movs	r2, #1
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e7dc      	b.n	8005d72 <xTaskResumeAll+0x46>
					prvResetNextTaskUnblockTime();
 8005db8:	f7ff fcf2 	bl	80057a0 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dbc:	4b19      	ldr	r3, [pc, #100]	@ (8005e24 <xTaskResumeAll+0xf8>)
 8005dbe:	681c      	ldr	r4, [r3, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 8005dc0:	b16c      	cbz	r4, 8005dde <xTaskResumeAll+0xb2>
								xYieldPending = pdTRUE;
 8005dc2:	4e17      	ldr	r6, [pc, #92]	@ (8005e20 <xTaskResumeAll+0xf4>)
 8005dc4:	2501      	movs	r5, #1
 8005dc6:	e001      	b.n	8005dcc <xTaskResumeAll+0xa0>
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005dc8:	3c01      	subs	r4, #1
 8005dca:	d005      	beq.n	8005dd8 <xTaskResumeAll+0xac>
							if( xTaskIncrementTick() != pdFALSE )
 8005dcc:	f7ff ff12 	bl	8005bf4 <xTaskIncrementTick>
 8005dd0:	2800      	cmp	r0, #0
 8005dd2:	d0f9      	beq.n	8005dc8 <xTaskResumeAll+0x9c>
								xYieldPending = pdTRUE;
 8005dd4:	6035      	str	r5, [r6, #0]
 8005dd6:	e7f7      	b.n	8005dc8 <xTaskResumeAll+0x9c>
						xPendedTicks = 0;
 8005dd8:	4b12      	ldr	r3, [pc, #72]	@ (8005e24 <xTaskResumeAll+0xf8>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
 8005dde:	4b10      	ldr	r3, [pc, #64]	@ (8005e20 <xTaskResumeAll+0xf4>)
 8005de0:	681c      	ldr	r4, [r3, #0]
 8005de2:	b164      	cbz	r4, 8005dfe <xTaskResumeAll+0xd2>
					taskYIELD_IF_USING_PREEMPTION();
 8005de4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005df8:	2401      	movs	r4, #1
 8005dfa:	e000      	b.n	8005dfe <xTaskResumeAll+0xd2>
BaseType_t xAlreadyYielded = pdFALSE;
 8005dfc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005dfe:	f000 fb5b 	bl	80064b8 <vPortExitCritical>
}
 8005e02:	4620      	mov	r0, r4
 8005e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 8005e08:	2400      	movs	r4, #0
 8005e0a:	e7f8      	b.n	8005dfe <xTaskResumeAll+0xd2>
 8005e0c:	200008e0 	.word	0x200008e0
 8005e10:	20000904 	.word	0x20000904
 8005e14:	20000934 	.word	0x20000934
 8005e18:	200008fc 	.word	0x200008fc
 8005e1c:	20000a04 	.word	0x20000a04
 8005e20:	200008f0 	.word	0x200008f0
 8005e24:	200008f4 	.word	0x200008f4
 8005e28:	20000978 	.word	0x20000978

08005e2c <vTaskDelay>:
	{
 8005e2c:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e2e:	b1a8      	cbz	r0, 8005e5c <vTaskDelay+0x30>
 8005e30:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
 8005e32:	4b10      	ldr	r3, [pc, #64]	@ (8005e74 <vTaskDelay+0x48>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	b143      	cbz	r3, 8005e4a <vTaskDelay+0x1e>
 8005e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	e7fe      	b.n	8005e48 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005e4a:	f7ff fecb 	bl	8005be4 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4620      	mov	r0, r4
 8005e52:	f7ff fdd7 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005e56:	f7ff ff69 	bl	8005d2c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005e5a:	b948      	cbnz	r0, 8005e70 <vTaskDelay+0x44>
			portYIELD_WITHIN_API();
 8005e5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005e60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
	}
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	200008e0 	.word	0x200008e0

08005e78 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005e78:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef8 <vTaskSwitchContext+0x80>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b11b      	cbz	r3, 8005e86 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8005efc <vTaskSwitchContext+0x84>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8005e86:	4b1d      	ldr	r3, [pc, #116]	@ (8005efc <vTaskSwitchContext+0x84>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f00 <vTaskSwitchContext+0x88>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005e90:	fab3 f383 	clz	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	f1c3 031f 	rsb	r3, r3, #31
 8005e9a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8005e9e:	0092      	lsls	r2, r2, #2
 8005ea0:	4918      	ldr	r1, [pc, #96]	@ (8005f04 <vTaskSwitchContext+0x8c>)
 8005ea2:	588a      	ldr	r2, [r1, r2]
 8005ea4:	b942      	cbnz	r2, 8005eb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	e7fe      	b.n	8005eb6 <vTaskSwitchContext+0x3e>
 8005eb8:	4a12      	ldr	r2, [pc, #72]	@ (8005f04 <vTaskSwitchContext+0x8c>)
 8005eba:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005ebe:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005ec2:	6848      	ldr	r0, [r1, #4]
 8005ec4:	6840      	ldr	r0, [r0, #4]
 8005ec6:	6048      	str	r0, [r1, #4]
 8005ec8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8005ecc:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	4290      	cmp	r0, r2
 8005ed4:	d009      	beq.n	8005eea <vTaskSwitchContext+0x72>
 8005ed6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005eda:	4a0a      	ldr	r2, [pc, #40]	@ (8005f04 <vTaskSwitchContext+0x8c>)
 8005edc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	4b08      	ldr	r3, [pc, #32]	@ (8005f08 <vTaskSwitchContext+0x90>)
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eea:	6840      	ldr	r0, [r0, #4]
 8005eec:	4a05      	ldr	r2, [pc, #20]	@ (8005f04 <vTaskSwitchContext+0x8c>)
 8005eee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8005ef2:	6050      	str	r0, [r2, #4]
 8005ef4:	e7ef      	b.n	8005ed6 <vTaskSwitchContext+0x5e>
 8005ef6:	bf00      	nop
 8005ef8:	200008e0 	.word	0x200008e0
 8005efc:	200008f0 	.word	0x200008f0
 8005f00:	200008fc 	.word	0x200008fc
 8005f04:	20000978 	.word	0x20000978
 8005f08:	20000a04 	.word	0x20000a04

08005f0c <vTaskSuspend>:
	{
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 8005f10:	f000 fab0 	bl	8006474 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f14:	b37c      	cbz	r4, 8005f76 <vTaskSuspend+0x6a>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f16:	1d25      	adds	r5, r4, #4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f7ff f870 	bl	8004ffe <uxListRemove>
 8005f1e:	b970      	cbnz	r0, 8005f3e <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f20:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8005f22:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	492b      	ldr	r1, [pc, #172]	@ (8005fd8 <vTaskSuspend+0xcc>)
 8005f2a:	58cb      	ldr	r3, [r1, r3]
 8005f2c:	b93b      	cbnz	r3, 8005f3e <vTaskSuspend+0x32>
 8005f2e:	482b      	ldr	r0, [pc, #172]	@ (8005fdc <vTaskSuspend+0xd0>)
 8005f30:	6803      	ldr	r3, [r0, #0]
 8005f32:	2101      	movs	r1, #1
 8005f34:	fa01 f202 	lsl.w	r2, r1, r2
 8005f38:	ea23 0302 	bic.w	r3, r3, r2
 8005f3c:	6003      	str	r3, [r0, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f3e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005f40:	b11b      	cbz	r3, 8005f4a <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f42:	f104 0018 	add.w	r0, r4, #24
 8005f46:	f7ff f85a 	bl	8004ffe <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4824      	ldr	r0, [pc, #144]	@ (8005fe0 <vTaskSuspend+0xd4>)
 8005f4e:	f7ff f832 	bl	8004fb6 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8005f52:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f5a:	bf04      	itt	eq
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	f884 3050 	strbeq.w	r3, [r4, #80]	@ 0x50
		taskEXIT_CRITICAL();
 8005f62:	f000 faa9 	bl	80064b8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8005f66:	4b1f      	ldr	r3, [pc, #124]	@ (8005fe4 <vTaskSuspend+0xd8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b93b      	cbnz	r3, 8005f7c <vTaskSuspend+0x70>
		if( pxTCB == pxCurrentTCB )
 8005f6c:	4b1e      	ldr	r3, [pc, #120]	@ (8005fe8 <vTaskSuspend+0xdc>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	42a3      	cmp	r3, r4
 8005f72:	d00a      	beq.n	8005f8a <vTaskSuspend+0x7e>
	}
 8005f74:	bd38      	pop	{r3, r4, r5, pc}
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005f76:	4b1c      	ldr	r3, [pc, #112]	@ (8005fe8 <vTaskSuspend+0xdc>)
 8005f78:	681c      	ldr	r4, [r3, #0]
 8005f7a:	e7cc      	b.n	8005f16 <vTaskSuspend+0xa>
			taskENTER_CRITICAL();
 8005f7c:	f000 fa7a 	bl	8006474 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8005f80:	f7ff fc0e 	bl	80057a0 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8005f84:	f000 fa98 	bl	80064b8 <vPortExitCritical>
 8005f88:	e7f0      	b.n	8005f6c <vTaskSuspend+0x60>
			if( xSchedulerRunning != pdFALSE )
 8005f8a:	4b16      	ldr	r3, [pc, #88]	@ (8005fe4 <vTaskSuspend+0xd8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	b1b3      	cbz	r3, 8005fbe <vTaskSuspend+0xb2>
				configASSERT( uxSchedulerSuspended == 0 );
 8005f90:	4b16      	ldr	r3, [pc, #88]	@ (8005fec <vTaskSuspend+0xe0>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	b143      	cbz	r3, 8005fa8 <vTaskSuspend+0x9c>
 8005f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f9a:	f383 8811 	msr	BASEPRI, r3
 8005f9e:	f3bf 8f6f 	isb	sy
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	e7fe      	b.n	8005fa6 <vTaskSuspend+0x9a>
				portYIELD_WITHIN_API();
 8005fa8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8005fac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	e7da      	b.n	8005f74 <vTaskSuspend+0x68>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005fbe:	4b08      	ldr	r3, [pc, #32]	@ (8005fe0 <vTaskSuspend+0xd4>)
 8005fc0:	681a      	ldr	r2, [r3, #0]
 8005fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <vTaskSuspend+0xe4>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d103      	bne.n	8005fd2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005fca:	4b07      	ldr	r3, [pc, #28]	@ (8005fe8 <vTaskSuspend+0xdc>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
 8005fd0:	e7d0      	b.n	8005f74 <vTaskSuspend+0x68>
					vTaskSwitchContext();
 8005fd2:	f7ff ff51 	bl	8005e78 <vTaskSwitchContext>
	}
 8005fd6:	e7cd      	b.n	8005f74 <vTaskSuspend+0x68>
 8005fd8:	20000978 	.word	0x20000978
 8005fdc:	200008fc 	.word	0x200008fc
 8005fe0:	20000908 	.word	0x20000908
 8005fe4:	200008f8 	.word	0x200008f8
 8005fe8:	20000a04 	.word	0x20000a04
 8005fec:	200008e0 	.word	0x200008e0
 8005ff0:	20000904 	.word	0x20000904

08005ff4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8005ff4:	b158      	cbz	r0, 800600e <vTaskPlaceOnEventList+0x1a>
{
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ffa:	4a09      	ldr	r2, [pc, #36]	@ (8006020 <vTaskPlaceOnEventList+0x2c>)
 8005ffc:	6811      	ldr	r1, [r2, #0]
 8005ffe:	3118      	adds	r1, #24
 8006000:	f7fe ffe4 	bl	8004fcc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006004:	2101      	movs	r1, #1
 8006006:	4620      	mov	r0, r4
 8006008:	f7ff fcfc 	bl	8005a04 <prvAddCurrentTaskToDelayedList>
}
 800600c:	bd10      	pop	{r4, pc}
 800600e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800601e:	e7fe      	b.n	800601e <vTaskPlaceOnEventList+0x2a>
 8006020:	20000a04 	.word	0x20000a04

08006024 <xTaskRemoveFromEventList>:
{
 8006024:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006026:	68c3      	ldr	r3, [r0, #12]
 8006028:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800602a:	b32c      	cbz	r4, 8006078 <xTaskRemoveFromEventList+0x54>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800602c:	f104 0518 	add.w	r5, r4, #24
 8006030:	4628      	mov	r0, r5
 8006032:	f7fe ffe4 	bl	8004ffe <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006036:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <xTaskRemoveFromEventList+0x70>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	bb33      	cbnz	r3, 800608a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800603c:	1d25      	adds	r5, r4, #4
 800603e:	4628      	mov	r0, r5
 8006040:	f7fe ffdd 	bl	8004ffe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006044:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006046:	4a14      	ldr	r2, [pc, #80]	@ (8006098 <xTaskRemoveFromEventList+0x74>)
 8006048:	6811      	ldr	r1, [r2, #0]
 800604a:	2301      	movs	r3, #1
 800604c:	4083      	lsls	r3, r0
 800604e:	430b      	orrs	r3, r1
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006056:	4629      	mov	r1, r5
 8006058:	4b10      	ldr	r3, [pc, #64]	@ (800609c <xTaskRemoveFromEventList+0x78>)
 800605a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800605e:	f7fe ffaa 	bl	8004fb6 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006062:	4b0f      	ldr	r3, [pc, #60]	@ (80060a0 <xTaskRemoveFromEventList+0x7c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8006068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606a:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 800606c:	bf83      	ittte	hi
 800606e:	2001      	movhi	r0, #1
 8006070:	4b0c      	ldrhi	r3, [pc, #48]	@ (80060a4 <xTaskRemoveFromEventList+0x80>)
 8006072:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8006074:	2000      	movls	r0, #0
}
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 8006088:	e7fe      	b.n	8006088 <xTaskRemoveFromEventList+0x64>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800608a:	4629      	mov	r1, r5
 800608c:	4806      	ldr	r0, [pc, #24]	@ (80060a8 <xTaskRemoveFromEventList+0x84>)
 800608e:	f7fe ff92 	bl	8004fb6 <vListInsertEnd>
 8006092:	e7e6      	b.n	8006062 <xTaskRemoveFromEventList+0x3e>
 8006094:	200008e0 	.word	0x200008e0
 8006098:	200008fc 	.word	0x200008fc
 800609c:	20000978 	.word	0x20000978
 80060a0:	20000a04 	.word	0x20000a04
 80060a4:	200008f0 	.word	0x200008f0
 80060a8:	20000934 	.word	0x20000934

080060ac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060ac:	4b03      	ldr	r3, [pc, #12]	@ (80060bc <vTaskInternalSetTimeOutState+0x10>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060b2:	4b03      	ldr	r3, [pc, #12]	@ (80060c0 <vTaskInternalSetTimeOutState+0x14>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	6043      	str	r3, [r0, #4]
}
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	200008ec 	.word	0x200008ec
 80060c0:	20000900 	.word	0x20000900

080060c4 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 80060c4:	b1d0      	cbz	r0, 80060fc <xTaskCheckForTimeOut+0x38>
{
 80060c6:	b570      	push	{r4, r5, r6, lr}
 80060c8:	460c      	mov	r4, r1
 80060ca:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
 80060cc:	b1f9      	cbz	r1, 800610e <xTaskCheckForTimeOut+0x4a>
	taskENTER_CRITICAL();
 80060ce:	f000 f9d1 	bl	8006474 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80060d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006140 <xTaskCheckForTimeOut+0x7c>)
 80060d4:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80060d6:	6823      	ldr	r3, [r4, #0]
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d028      	beq.n	8006130 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060de:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80060e0:	4818      	ldr	r0, [pc, #96]	@ (8006144 <xTaskCheckForTimeOut+0x80>)
 80060e2:	6800      	ldr	r0, [r0, #0]
 80060e4:	682e      	ldr	r6, [r5, #0]
 80060e6:	4286      	cmp	r6, r0
 80060e8:	d001      	beq.n	80060ee <xTaskCheckForTimeOut+0x2a>
 80060ea:	4291      	cmp	r1, r2
 80060ec:	d925      	bls.n	800613a <xTaskCheckForTimeOut+0x76>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80060ee:	1a50      	subs	r0, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80060f0:	4283      	cmp	r3, r0
 80060f2:	d815      	bhi.n	8006120 <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
 80060f4:	2300      	movs	r3, #0
 80060f6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80060f8:	2401      	movs	r4, #1
 80060fa:	e01a      	b.n	8006132 <xTaskCheckForTimeOut+0x6e>
 80060fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800610c:	e7fe      	b.n	800610c <xTaskCheckForTimeOut+0x48>
 800610e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800611e:	e7fe      	b.n	800611e <xTaskCheckForTimeOut+0x5a>
			*pxTicksToWait -= xElapsedTime;
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	440b      	add	r3, r1
 8006124:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006126:	4628      	mov	r0, r5
 8006128:	f7ff ffc0 	bl	80060ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800612c:	2400      	movs	r4, #0
 800612e:	e000      	b.n	8006132 <xTaskCheckForTimeOut+0x6e>
				xReturn = pdFALSE;
 8006130:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8006132:	f000 f9c1 	bl	80064b8 <vPortExitCritical>
}
 8006136:	4620      	mov	r0, r4
 8006138:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = pdTRUE;
 800613a:	2401      	movs	r4, #1
 800613c:	e7f9      	b.n	8006132 <xTaskCheckForTimeOut+0x6e>
 800613e:	bf00      	nop
 8006140:	20000900 	.word	0x20000900
 8006144:	200008ec 	.word	0x200008ec

08006148 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8006148:	4b01      	ldr	r3, [pc, #4]	@ (8006150 <vTaskMissedYield+0x8>)
 800614a:	2201      	movs	r2, #1
 800614c:	601a      	str	r2, [r3, #0]
}
 800614e:	4770      	bx	lr
 8006150:	200008f0 	.word	0x200008f0

08006154 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8006154:	4b05      	ldr	r3, [pc, #20]	@ (800616c <xTaskGetSchedulerState+0x18>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	b133      	cbz	r3, 8006168 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800615a:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <xTaskGetSchedulerState+0x1c>)
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	fab0 f080 	clz	r0, r0
 8006162:	0940      	lsrs	r0, r0, #5
 8006164:	0040      	lsls	r0, r0, #1
 8006166:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006168:	2001      	movs	r0, #1
	}
 800616a:	4770      	bx	lr
 800616c:	200008f8 	.word	0x200008f8
 8006170:	200008e0 	.word	0x200008e0

08006174 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8006174:	2800      	cmp	r0, #0
 8006176:	d049      	beq.n	800620c <xTaskPriorityInherit+0x98>
	{
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4604      	mov	r4, r0
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800617c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800617e:	4a24      	ldr	r2, [pc, #144]	@ (8006210 <xTaskPriorityInherit+0x9c>)
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006184:	4293      	cmp	r3, r2
 8006186:	d238      	bcs.n	80061fa <xTaskPriorityInherit+0x86>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006188:	6982      	ldr	r2, [r0, #24]
 800618a:	2a00      	cmp	r2, #0
 800618c:	db05      	blt.n	800619a <xTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800618e:	4a20      	ldr	r2, [pc, #128]	@ (8006210 <xTaskPriorityInherit+0x9c>)
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006194:	f1c2 0207 	rsb	r2, r2, #7
 8006198:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800619a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800619e:	4a1d      	ldr	r2, [pc, #116]	@ (8006214 <xTaskPriorityInherit+0xa0>)
 80061a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80061a4:	6962      	ldr	r2, [r4, #20]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d005      	beq.n	80061b6 <xTaskPriorityInherit+0x42>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061aa:	4b19      	ldr	r3, [pc, #100]	@ (8006210 <xTaskPriorityInherit+0x9c>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
				xReturn = pdTRUE;
 80061b2:	2001      	movs	r0, #1
 80061b4:	e029      	b.n	800620a <xTaskPriorityInherit+0x96>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b6:	1d25      	adds	r5, r4, #4
 80061b8:	4628      	mov	r0, r5
 80061ba:	f7fe ff20 	bl	8004ffe <uxListRemove>
 80061be:	b938      	cbnz	r0, 80061d0 <xTaskPriorityInherit+0x5c>
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80061c0:	4915      	ldr	r1, [pc, #84]	@ (8006218 <xTaskPriorityInherit+0xa4>)
 80061c2:	680b      	ldr	r3, [r1, #0]
 80061c4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80061c6:	2201      	movs	r2, #1
 80061c8:	4082      	lsls	r2, r0
 80061ca:	ea23 0302 	bic.w	r3, r3, r2
 80061ce:	600b      	str	r3, [r1, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80061d0:	4b0f      	ldr	r3, [pc, #60]	@ (8006210 <xTaskPriorityInherit+0x9c>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80061d6:	62e0      	str	r0, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80061d8:	4a0f      	ldr	r2, [pc, #60]	@ (8006218 <xTaskPriorityInherit+0xa4>)
 80061da:	6811      	ldr	r1, [r2, #0]
 80061dc:	2401      	movs	r4, #1
 80061de:	fa04 f300 	lsl.w	r3, r4, r0
 80061e2:	430b      	orrs	r3, r1
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80061ea:	4629      	mov	r1, r5
 80061ec:	4b09      	ldr	r3, [pc, #36]	@ (8006214 <xTaskPriorityInherit+0xa0>)
 80061ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80061f2:	f7fe fee0 	bl	8004fb6 <vListInsertEnd>
				xReturn = pdTRUE;
 80061f6:	4620      	mov	r0, r4
 80061f8:	e007      	b.n	800620a <xTaskPriorityInherit+0x96>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80061fa:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <xTaskPriorityInherit+0x9c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8006200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006202:	4298      	cmp	r0, r3
 8006204:	bf2c      	ite	cs
 8006206:	2000      	movcs	r0, #0
 8006208:	2001      	movcc	r0, #1
	}
 800620a:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800620c:	2000      	movs	r0, #0
	}
 800620e:	4770      	bx	lr
 8006210:	20000a04 	.word	0x20000a04
 8006214:	20000978 	.word	0x20000978
 8006218:	200008fc 	.word	0x200008fc

0800621c <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800621c:	2800      	cmp	r0, #0
 800621e:	d04b      	beq.n	80062b8 <xTaskPriorityDisinherit+0x9c>
	{
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
 8006224:	4b26      	ldr	r3, [pc, #152]	@ (80062c0 <xTaskPriorityDisinherit+0xa4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4283      	cmp	r3, r0
 800622a:	d008      	beq.n	800623e <xTaskPriorityDisinherit+0x22>
 800622c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	e7fe      	b.n	800623c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800623e:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8006240:	b943      	cbnz	r3, 8006254 <xTaskPriorityDisinherit+0x38>
 8006242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	e7fe      	b.n	8006252 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
 8006254:	3b01      	subs	r3, #1
 8006256:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006258:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800625a:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800625c:	4291      	cmp	r1, r2
 800625e:	d02d      	beq.n	80062bc <xTaskPriorityDisinherit+0xa0>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006260:	b10b      	cbz	r3, 8006266 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 8006262:	2000      	movs	r0, #0
	}
 8006264:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006266:	1d05      	adds	r5, r0, #4
 8006268:	4628      	mov	r0, r5
 800626a:	f7fe fec8 	bl	8004ffe <uxListRemove>
 800626e:	b968      	cbnz	r0, 800628c <xTaskPriorityDisinherit+0x70>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006270:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006272:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4a12      	ldr	r2, [pc, #72]	@ (80062c4 <xTaskPriorityDisinherit+0xa8>)
 800627a:	58d3      	ldr	r3, [r2, r3]
 800627c:	b933      	cbnz	r3, 800628c <xTaskPriorityDisinherit+0x70>
 800627e:	4812      	ldr	r0, [pc, #72]	@ (80062c8 <xTaskPriorityDisinherit+0xac>)
 8006280:	6803      	ldr	r3, [r0, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	408a      	lsls	r2, r1
 8006286:	ea23 0302 	bic.w	r3, r3, r2
 800628a:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800628c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800628e:	62e0      	str	r0, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006290:	f1c0 0307 	rsb	r3, r0, #7
 8006294:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8006296:	4a0c      	ldr	r2, [pc, #48]	@ (80062c8 <xTaskPriorityDisinherit+0xac>)
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	2401      	movs	r4, #1
 800629c:	fa04 f300 	lsl.w	r3, r4, r0
 80062a0:	430b      	orrs	r3, r1
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80062a8:	4629      	mov	r1, r5
 80062aa:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <xTaskPriorityDisinherit+0xa8>)
 80062ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062b0:	f7fe fe81 	bl	8004fb6 <vListInsertEnd>
					xReturn = pdTRUE;
 80062b4:	4620      	mov	r0, r4
 80062b6:	e7d5      	b.n	8006264 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
 80062b8:	2000      	movs	r0, #0
	}
 80062ba:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 80062bc:	2000      	movs	r0, #0
 80062be:	e7d1      	b.n	8006264 <xTaskPriorityDisinherit+0x48>
 80062c0:	20000a04 	.word	0x20000a04
 80062c4:	20000978 	.word	0x20000978
 80062c8:	200008fc 	.word	0x200008fc

080062cc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80062cc:	2800      	cmp	r0, #0
 80062ce:	d04f      	beq.n	8006370 <vTaskPriorityDisinheritAfterTimeout+0xa4>
	{
 80062d0:	b538      	push	{r3, r4, r5, lr}
 80062d2:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80062d4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80062d6:	b943      	cbnz	r3, 80062ea <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80062d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062dc:	f383 8811 	msr	BASEPRI, r3
 80062e0:	f3bf 8f6f 	isb	sy
 80062e4:	f3bf 8f4f 	dsb	sy
 80062e8:	e7fe      	b.n	80062e8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80062ea:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80062ec:	4291      	cmp	r1, r2
 80062ee:	bf38      	it	cc
 80062f0:	4611      	movcc	r1, r2
			if( pxTCB->uxPriority != uxPriorityToUse )
 80062f2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80062f4:	428a      	cmp	r2, r1
 80062f6:	d001      	beq.n	80062fc <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d000      	beq.n	80062fe <vTaskPriorityDisinheritAfterTimeout+0x32>
	}
 80062fc:	bd38      	pop	{r3, r4, r5, pc}
					configASSERT( pxTCB != pxCurrentTCB );
 80062fe:	4b1d      	ldr	r3, [pc, #116]	@ (8006374 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4283      	cmp	r3, r0
 8006304:	d02b      	beq.n	800635e <vTaskPriorityDisinheritAfterTimeout+0x92>
					pxTCB->uxPriority = uxPriorityToUse;
 8006306:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006308:	6983      	ldr	r3, [r0, #24]
 800630a:	2b00      	cmp	r3, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800630c:	bfa4      	itt	ge
 800630e:	f1c1 0107 	rsbge	r1, r1, #7
 8006312:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006314:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006318:	4b17      	ldr	r3, [pc, #92]	@ (8006378 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 800631a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800631e:	6942      	ldr	r2, [r0, #20]
 8006320:	429a      	cmp	r2, r3
 8006322:	d1eb      	bne.n	80062fc <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006324:	1d05      	adds	r5, r0, #4
 8006326:	4628      	mov	r0, r5
 8006328:	f7fe fe69 	bl	8004ffe <uxListRemove>
 800632c:	b938      	cbnz	r0, 800633e <vTaskPriorityDisinheritAfterTimeout+0x72>
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800632e:	4913      	ldr	r1, [pc, #76]	@ (800637c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006330:	680b      	ldr	r3, [r1, #0]
 8006332:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006334:	2201      	movs	r2, #1
 8006336:	4082      	lsls	r2, r0
 8006338:	ea23 0302 	bic.w	r3, r3, r2
 800633c:	600b      	str	r3, [r1, #0]
						prvAddTaskToReadyList( pxTCB );
 800633e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8006340:	4a0e      	ldr	r2, [pc, #56]	@ (800637c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8006342:	6811      	ldr	r1, [r2, #0]
 8006344:	2301      	movs	r3, #1
 8006346:	4083      	lsls	r3, r0
 8006348:	430b      	orrs	r3, r1
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006350:	4629      	mov	r1, r5
 8006352:	4b09      	ldr	r3, [pc, #36]	@ (8006378 <vTaskPriorityDisinheritAfterTimeout+0xac>)
 8006354:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006358:	f7fe fe2d 	bl	8004fb6 <vListInsertEnd>
	}
 800635c:	e7ce      	b.n	80062fc <vTaskPriorityDisinheritAfterTimeout+0x30>
 800635e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
 800636e:	e7fe      	b.n	800636e <vTaskPriorityDisinheritAfterTimeout+0xa2>
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20000a04 	.word	0x20000a04
 8006378:	20000978 	.word	0x20000978
 800637c:	200008fc 	.word	0x200008fc

08006380 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8006380:	4b05      	ldr	r3, [pc, #20]	@ (8006398 <pvTaskIncrementMutexHeldCount+0x18>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	b123      	cbz	r3, 8006390 <pvTaskIncrementMutexHeldCount+0x10>
			( pxCurrentTCB->uxMutexesHeld )++;
 8006386:	4b04      	ldr	r3, [pc, #16]	@ (8006398 <pvTaskIncrementMutexHeldCount+0x18>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800638c:	3301      	adds	r3, #1
 800638e:	6493      	str	r3, [r2, #72]	@ 0x48
		return pxCurrentTCB;
 8006390:	4b01      	ldr	r3, [pc, #4]	@ (8006398 <pvTaskIncrementMutexHeldCount+0x18>)
 8006392:	6818      	ldr	r0, [r3, #0]
	}
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	20000a04 	.word	0x20000a04

0800639c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800639c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063a2:	4b0d      	ldr	r3, [pc, #52]	@ (80063d8 <prvTaskExitError+0x3c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d008      	beq.n	80063be <prvTaskExitError+0x22>
 80063ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	e7fe      	b.n	80063bc <prvTaskExitError+0x20>
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0fc      	beq.n	80063ce <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063d4:	b002      	add	sp, #8
 80063d6:	4770      	bx	lr
 80063d8:	200000c8 	.word	0x200000c8

080063dc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80063dc:	4808      	ldr	r0, [pc, #32]	@ (8006400 <prvPortStartFirstTask+0x24>)
 80063de:	6800      	ldr	r0, [r0, #0]
 80063e0:	6800      	ldr	r0, [r0, #0]
 80063e2:	f380 8808 	msr	MSP, r0
 80063e6:	f04f 0000 	mov.w	r0, #0
 80063ea:	f380 8814 	msr	CONTROL, r0
 80063ee:	b662      	cpsie	i
 80063f0:	b661      	cpsie	f
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	df00      	svc	0
 80063fc:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80063fe:	0000      	.short	0x0000
 8006400:	e000ed08 	.word	0xe000ed08

08006404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006414 <vPortEnableVFP+0x10>
 8006408:	6801      	ldr	r1, [r0, #0]
 800640a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800640e:	6001      	str	r1, [r0, #0]
 8006410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006412:	0000      	.short	0x0000
 8006414:	e000ed88 	.word	0xe000ed88

08006418 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006418:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800641c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006420:	f021 0101 	bic.w	r1, r1, #1
 8006424:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006428:	4b05      	ldr	r3, [pc, #20]	@ (8006440 <pxPortInitialiseStack+0x28>)
 800642a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800642e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006432:	f06f 0302 	mvn.w	r3, #2
 8006436:	f840 3c24 	str.w	r3, [r0, #-36]
}
 800643a:	3844      	subs	r0, #68	@ 0x44
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	0800639d 	.word	0x0800639d
	...

08006450 <SVC_Handler>:
	__asm volatile (
 8006450:	4b07      	ldr	r3, [pc, #28]	@ (8006470 <pxCurrentTCBConst2>)
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	6808      	ldr	r0, [r1, #0]
 8006456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645a:	f380 8809 	msr	PSP, r0
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f04f 0000 	mov.w	r0, #0
 8006466:	f380 8811 	msr	BASEPRI, r0
 800646a:	4770      	bx	lr
 800646c:	f3af 8000 	nop.w

08006470 <pxCurrentTCBConst2>:
 8006470:	20000a04 	.word	0x20000a04

08006474 <vPortEnterCritical>:
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8006484:	4a0b      	ldr	r2, [pc, #44]	@ (80064b4 <vPortEnterCritical+0x40>)
 8006486:	6813      	ldr	r3, [r2, #0]
 8006488:	3301      	adds	r3, #1
 800648a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800648c:	2b01      	cmp	r3, #1
 800648e:	d000      	beq.n	8006492 <vPortEnterCritical+0x1e>
}
 8006490:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006492:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006496:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800649a:	f013 0fff 	tst.w	r3, #255	@ 0xff
 800649e:	d0f7      	beq.n	8006490 <vPortEnterCritical+0x1c>
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	e7fe      	b.n	80064b0 <vPortEnterCritical+0x3c>
 80064b2:	bf00      	nop
 80064b4:	200000c8 	.word	0x200000c8

080064b8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80064b8:	4b09      	ldr	r3, [pc, #36]	@ (80064e0 <vPortExitCritical+0x28>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	b943      	cbnz	r3, 80064d0 <vPortExitCritical+0x18>
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	e7fe      	b.n	80064ce <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80064d0:	3b01      	subs	r3, #1
 80064d2:	4a03      	ldr	r2, [pc, #12]	@ (80064e0 <vPortExitCritical+0x28>)
 80064d4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80064d6:	b90b      	cbnz	r3, 80064dc <vPortExitCritical+0x24>
	__asm volatile
 80064d8:	f383 8811 	msr	BASEPRI, r3
}
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	200000c8 	.word	0x200000c8
	...

080064f0 <PendSV_Handler>:
	__asm volatile
 80064f0:	f3ef 8009 	mrs	r0, PSP
 80064f4:	f3bf 8f6f 	isb	sy
 80064f8:	4b15      	ldr	r3, [pc, #84]	@ (8006550 <pxCurrentTCBConst>)
 80064fa:	681a      	ldr	r2, [r3, #0]
 80064fc:	f01e 0f10 	tst.w	lr, #16
 8006500:	bf08      	it	eq
 8006502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650a:	6010      	str	r0, [r2, #0]
 800650c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006514:	f380 8811 	msr	BASEPRI, r0
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	f3bf 8f6f 	isb	sy
 8006520:	f7ff fcaa 	bl	8005e78 <vTaskSwitchContext>
 8006524:	f04f 0000 	mov.w	r0, #0
 8006528:	f380 8811 	msr	BASEPRI, r0
 800652c:	bc09      	pop	{r0, r3}
 800652e:	6819      	ldr	r1, [r3, #0]
 8006530:	6808      	ldr	r0, [r1, #0]
 8006532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006536:	f01e 0f10 	tst.w	lr, #16
 800653a:	bf08      	it	eq
 800653c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006540:	f380 8809 	msr	PSP, r0
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	f3af 8000 	nop.w

08006550 <pxCurrentTCBConst>:
 8006550:	20000a04 	.word	0x20000a04

08006554 <SysTick_Handler>:
{
 8006554:	b508      	push	{r3, lr}
	__asm volatile
 8006556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8006566:	f7ff fb45 	bl	8005bf4 <xTaskIncrementTick>
 800656a:	b128      	cbz	r0, 8006578 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800656c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8006570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006574:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8006578:	2300      	movs	r3, #0
 800657a:	f383 8811 	msr	BASEPRI, r3
}
 800657e:	bd08      	pop	{r3, pc}

08006580 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006580:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8006584:	2300      	movs	r3, #0
 8006586:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006588:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800658a:	4b05      	ldr	r3, [pc, #20]	@ (80065a0 <vPortSetupTimerInterrupt+0x20>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4905      	ldr	r1, [pc, #20]	@ (80065a4 <vPortSetupTimerInterrupt+0x24>)
 8006590:	fba1 1303 	umull	r1, r3, r1, r3
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	3b01      	subs	r3, #1
 8006598:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800659a:	2307      	movs	r3, #7
 800659c:	6113      	str	r3, [r2, #16]
}
 800659e:	4770      	bx	lr
 80065a0:	20000014 	.word	0x20000014
 80065a4:	10624dd3 	.word	0x10624dd3

080065a8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80065a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065ac:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80065b0:	4b3e      	ldr	r3, [pc, #248]	@ (80066ac <xPortStartScheduler+0x104>)
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d03b      	beq.n	800662e <xPortStartScheduler+0x86>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80065ba:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80065be:	4b3c      	ldr	r3, [pc, #240]	@ (80066b0 <xPortStartScheduler+0x108>)
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d03d      	beq.n	8006640 <xPortStartScheduler+0x98>
{
 80065c4:	b530      	push	{r4, r5, lr}
 80065c6:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065c8:	4b3a      	ldr	r3, [pc, #232]	@ (80066b4 <xPortStartScheduler+0x10c>)
 80065ca:	781a      	ldrb	r2, [r3, #0]
 80065cc:	b2d2      	uxtb	r2, r2
 80065ce:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065d0:	22ff      	movs	r2, #255	@ 0xff
 80065d2:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80065e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80065e4:	4a34      	ldr	r2, [pc, #208]	@ (80066b8 <xPortStartScheduler+0x110>)
 80065e6:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065e8:	4b34      	ldr	r3, [pc, #208]	@ (80066bc <xPortStartScheduler+0x114>)
 80065ea:	2207      	movs	r2, #7
 80065ec:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80065ee:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80065f2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80065f6:	d011      	beq.n	800661c <xPortStartScheduler+0x74>
 80065f8:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80065fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	b2db      	uxtb	r3, r3
 8006602:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006606:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800660a:	4611      	mov	r1, r2
 800660c:	3a01      	subs	r2, #1
 800660e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006612:	d1f2      	bne.n	80065fa <xPortStartScheduler+0x52>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006614:	2903      	cmp	r1, #3
 8006616:	d01c      	beq.n	8006652 <xPortStartScheduler+0xaa>
 8006618:	4b28      	ldr	r3, [pc, #160]	@ (80066bc <xPortStartScheduler+0x114>)
 800661a:	6019      	str	r1, [r3, #0]
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	e7fe      	b.n	800662c <xPortStartScheduler+0x84>
 800662e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006632:	f383 8811 	msr	BASEPRI, r3
 8006636:	f3bf 8f6f 	isb	sy
 800663a:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800663e:	e7fe      	b.n	800663e <xPortStartScheduler+0x96>
 8006640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006644:	f383 8811 	msr	BASEPRI, r3
 8006648:	f3bf 8f6f 	isb	sy
 800664c:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006650:	e7fe      	b.n	8006650 <xPortStartScheduler+0xa8>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006652:	4b1a      	ldr	r3, [pc, #104]	@ (80066bc <xPortStartScheduler+0x114>)
 8006654:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8006658:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800665a:	9b01      	ldr	r3, [sp, #4]
 800665c:	b2db      	uxtb	r3, r3
 800665e:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <xPortStartScheduler+0x10c>)
 8006660:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006662:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8006666:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800666a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800666e:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006672:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8006676:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800667a:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800667e:	f7ff ff7f 	bl	8006580 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8006682:	2500      	movs	r5, #0
 8006684:	4b0e      	ldr	r3, [pc, #56]	@ (80066c0 <xPortStartScheduler+0x118>)
 8006686:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 8006688:	f7ff febc 	bl	8006404 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800668c:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8006690:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006694:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 8006698:	f7ff fea0 	bl	80063dc <prvPortStartFirstTask>
	vTaskSwitchContext();
 800669c:	f7ff fbec 	bl	8005e78 <vTaskSwitchContext>
	prvTaskExitError();
 80066a0:	f7ff fe7c 	bl	800639c <prvTaskExitError>
}
 80066a4:	4628      	mov	r0, r5
 80066a6:	b003      	add	sp, #12
 80066a8:	bd30      	pop	{r4, r5, pc}
 80066aa:	bf00      	nop
 80066ac:	410fc271 	.word	0x410fc271
 80066b0:	410fc270 	.word	0x410fc270
 80066b4:	e000e400 	.word	0xe000e400
 80066b8:	20000a0c 	.word	0x20000a0c
 80066bc:	20000a08 	.word	0x20000a08
 80066c0:	200000c8 	.word	0x200000c8

080066c4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066c4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066c8:	2b0f      	cmp	r3, #15
 80066ca:	d90f      	bls.n	80066ec <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066cc:	4a11      	ldr	r2, [pc, #68]	@ (8006714 <vPortValidateInterruptPriority+0x50>)
 80066ce:	5c9b      	ldrb	r3, [r3, r2]
 80066d0:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066d2:	4a11      	ldr	r2, [pc, #68]	@ (8006718 <vPortValidateInterruptPriority+0x54>)
 80066d4:	7812      	ldrb	r2, [r2, #0]
 80066d6:	429a      	cmp	r2, r3
 80066d8:	d908      	bls.n	80066ec <vPortValidateInterruptPriority+0x28>
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	e7fe      	b.n	80066ea <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066ec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80066f0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80066f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066f8:	4a08      	ldr	r2, [pc, #32]	@ (800671c <vPortValidateInterruptPriority+0x58>)
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d908      	bls.n	8006712 <vPortValidateInterruptPriority+0x4e>
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	e7fe      	b.n	8006710 <vPortValidateInterruptPriority+0x4c>
	}
 8006712:	4770      	bx	lr
 8006714:	e000e3f0 	.word	0xe000e3f0
 8006718:	20000a0c 	.word	0x20000a0c
 800671c:	20000a08 	.word	0x20000a08

08006720 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006720:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006722:	4b15      	ldr	r3, [pc, #84]	@ (8006778 <prvInsertBlockIntoFreeList+0x58>)
 8006724:	461a      	mov	r2, r3
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4283      	cmp	r3, r0
 800672a:	d3fb      	bcc.n	8006724 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800672c:	6854      	ldr	r4, [r2, #4]
 800672e:	1911      	adds	r1, r2, r4
 8006730:	4288      	cmp	r0, r1
 8006732:	d00a      	beq.n	800674a <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006734:	6844      	ldr	r4, [r0, #4]
 8006736:	1901      	adds	r1, r0, r4
 8006738:	428b      	cmp	r3, r1
 800673a:	d010      	beq.n	800675e <prvInsertBlockIntoFreeList+0x3e>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800673c:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800673e:	4282      	cmp	r2, r0
 8006740:	d000      	beq.n	8006744 <prvInsertBlockIntoFreeList+0x24>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006742:	6010      	str	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006744:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006748:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800674a:	6841      	ldr	r1, [r0, #4]
 800674c:	4421      	add	r1, r4
 800674e:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006750:	460c      	mov	r4, r1
 8006752:	4411      	add	r1, r2
 8006754:	428b      	cmp	r3, r1
 8006756:	d001      	beq.n	800675c <prvInsertBlockIntoFreeList+0x3c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006758:	6013      	str	r3, [r2, #0]
	if( pxIterator != pxBlockToInsert )
 800675a:	e7f3      	b.n	8006744 <prvInsertBlockIntoFreeList+0x24>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800675c:	4610      	mov	r0, r2
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800675e:	4907      	ldr	r1, [pc, #28]	@ (800677c <prvInsertBlockIntoFreeList+0x5c>)
 8006760:	6809      	ldr	r1, [r1, #0]
 8006762:	428b      	cmp	r3, r1
 8006764:	d005      	beq.n	8006772 <prvInsertBlockIntoFreeList+0x52>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4423      	add	r3, r4
 800676a:	6043      	str	r3, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800676c:	6813      	ldr	r3, [r2, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	e7e4      	b.n	800673c <prvInsertBlockIntoFreeList+0x1c>
 8006772:	460b      	mov	r3, r1
 8006774:	e7e2      	b.n	800673c <prvInsertBlockIntoFreeList+0x1c>
 8006776:	bf00      	nop
 8006778:	20000a28 	.word	0x20000a28
 800677c:	20000a24 	.word	0x20000a24

08006780 <pvPortMalloc>:
{
 8006780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006782:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8006784:	f7ff fa2e 	bl	8005be4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8006788:	4b44      	ldr	r3, [pc, #272]	@ (800689c <pvPortMalloc+0x11c>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	b1b3      	cbz	r3, 80067bc <pvPortMalloc+0x3c>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800678e:	4b44      	ldr	r3, [pc, #272]	@ (80068a0 <pvPortMalloc+0x120>)
 8006790:	681d      	ldr	r5, [r3, #0]
 8006792:	4225      	tst	r5, r4
 8006794:	d17d      	bne.n	8006892 <pvPortMalloc+0x112>
			if( xWantedSize > 0 )
 8006796:	2c00      	cmp	r4, #0
 8006798:	d07b      	beq.n	8006892 <pvPortMalloc+0x112>
				xWantedSize += xHeapStructSize;
 800679a:	f104 0208 	add.w	r2, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800679e:	f014 0f07 	tst.w	r4, #7
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067a2:	bf1c      	itt	ne
 80067a4:	f022 0207 	bicne.w	r2, r2, #7
 80067a8:	3208      	addne	r2, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	d071      	beq.n	8006892 <pvPortMalloc+0x112>
 80067ae:	4b3d      	ldr	r3, [pc, #244]	@ (80068a4 <pvPortMalloc+0x124>)
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	4296      	cmp	r6, r2
 80067b4:	d36d      	bcc.n	8006892 <pvPortMalloc+0x112>
				pxBlock = xStart.pxNextFreeBlock;
 80067b6:	493c      	ldr	r1, [pc, #240]	@ (80068a8 <pvPortMalloc+0x128>)
 80067b8:	680c      	ldr	r4, [r1, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ba:	e027      	b.n	800680c <pvPortMalloc+0x8c>
	uxAddress = ( size_t ) ucHeap;
 80067bc:	4a3b      	ldr	r2, [pc, #236]	@ (80068ac <pvPortMalloc+0x12c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80067be:	f012 0f07 	tst.w	r2, #7
 80067c2:	d007      	beq.n	80067d4 <pvPortMalloc+0x54>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80067c4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067c6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80067ca:	f602 32b8 	addw	r2, r2, #3000	@ 0xbb8
 80067ce:	1a53      	subs	r3, r2, r1
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067d0:	460a      	mov	r2, r1
 80067d2:	e001      	b.n	80067d8 <pvPortMalloc+0x58>
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80067d4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067d8:	4833      	ldr	r0, [pc, #204]	@ (80068a8 <pvPortMalloc+0x128>)
 80067da:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067dc:	2100      	movs	r1, #0
 80067de:	6041      	str	r1, [r0, #4]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067e0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80067e2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067e4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 80067e8:	482c      	ldr	r0, [pc, #176]	@ (800689c <pvPortMalloc+0x11c>)
 80067ea:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
 80067ec:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067ee:	6019      	str	r1, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067f0:	1a99      	subs	r1, r3, r2
 80067f2:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067f4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067f6:	4b2e      	ldr	r3, [pc, #184]	@ (80068b0 <pvPortMalloc+0x130>)
 80067f8:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067fa:	4b2a      	ldr	r3, [pc, #168]	@ (80068a4 <pvPortMalloc+0x124>)
 80067fc:	6019      	str	r1, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067fe:	4b28      	ldr	r3, [pc, #160]	@ (80068a0 <pvPortMalloc+0x120>)
 8006800:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006804:	601a      	str	r2, [r3, #0]
}
 8006806:	e7c2      	b.n	800678e <pvPortMalloc+0xe>
 8006808:	4621      	mov	r1, r4
					pxBlock = pxBlock->pxNextFreeBlock;
 800680a:	461c      	mov	r4, r3
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800680c:	6863      	ldr	r3, [r4, #4]
 800680e:	4293      	cmp	r3, r2
 8006810:	d202      	bcs.n	8006818 <pvPortMalloc+0x98>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1f7      	bne.n	8006808 <pvPortMalloc+0x88>
				if( pxBlock != pxEnd )
 8006818:	4b20      	ldr	r3, [pc, #128]	@ (800689c <pvPortMalloc+0x11c>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	42a3      	cmp	r3, r4
 800681e:	d038      	beq.n	8006892 <pvPortMalloc+0x112>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006820:	680f      	ldr	r7, [r1, #0]
 8006822:	3708      	adds	r7, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	600b      	str	r3, [r1, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	1a9b      	subs	r3, r3, r2
 800682c:	2b10      	cmp	r3, #16
 800682e:	d910      	bls.n	8006852 <pvPortMalloc+0xd2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006830:	18a0      	adds	r0, r4, r2
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006832:	f010 0f07 	tst.w	r0, #7
 8006836:	d008      	beq.n	800684a <pvPortMalloc+0xca>
 8006838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683c:	f383 8811 	msr	BASEPRI, r3
 8006840:	f3bf 8f6f 	isb	sy
 8006844:	f3bf 8f4f 	dsb	sy
 8006848:	e7fe      	b.n	8006848 <pvPortMalloc+0xc8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800684a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800684c:	6062      	str	r2, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800684e:	f7ff ff67 	bl	8006720 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006852:	6863      	ldr	r3, [r4, #4]
 8006854:	1af6      	subs	r6, r6, r3
 8006856:	4a13      	ldr	r2, [pc, #76]	@ (80068a4 <pvPortMalloc+0x124>)
 8006858:	6016      	str	r6, [r2, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800685a:	4a15      	ldr	r2, [pc, #84]	@ (80068b0 <pvPortMalloc+0x130>)
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4296      	cmp	r6, r2
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006860:	bf3c      	itt	cc
 8006862:	4a13      	ldrcc	r2, [pc, #76]	@ (80068b0 <pvPortMalloc+0x130>)
 8006864:	6016      	strcc	r6, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006866:	432b      	orrs	r3, r5
 8006868:	6063      	str	r3, [r4, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	6023      	str	r3, [r4, #0]
					xNumberOfSuccessfulAllocations++;
 800686e:	4a11      	ldr	r2, [pc, #68]	@ (80068b4 <pvPortMalloc+0x134>)
 8006870:	6813      	ldr	r3, [r2, #0]
 8006872:	3301      	adds	r3, #1
 8006874:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 8006876:	f7ff fa59 	bl	8005d2c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800687a:	f017 0f07 	tst.w	r7, #7
 800687e:	d00b      	beq.n	8006898 <pvPortMalloc+0x118>
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	e7fe      	b.n	8006890 <pvPortMalloc+0x110>
	( void ) xTaskResumeAll();
 8006892:	f7ff fa4b 	bl	8005d2c <xTaskResumeAll>
 8006896:	2700      	movs	r7, #0
}
 8006898:	4638      	mov	r0, r7
 800689a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800689c:	20000a24 	.word	0x20000a24
 80068a0:	20000a10 	.word	0x20000a10
 80068a4:	20000a20 	.word	0x20000a20
 80068a8:	20000a28 	.word	0x20000a28
 80068ac:	20000a30 	.word	0x20000a30
 80068b0:	20000a1c 	.word	0x20000a1c
 80068b4:	20000a18 	.word	0x20000a18

080068b8 <vPortFree>:
	if( pv != NULL )
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d033      	beq.n	8006924 <vPortFree+0x6c>
{
 80068bc:	b510      	push	{r4, lr}
 80068be:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068c0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80068c4:	4a18      	ldr	r2, [pc, #96]	@ (8006928 <vPortFree+0x70>)
 80068c6:	6812      	ldr	r2, [r2, #0]
 80068c8:	4213      	tst	r3, r2
 80068ca:	d108      	bne.n	80068de <vPortFree+0x26>
 80068cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	e7fe      	b.n	80068dc <vPortFree+0x24>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068de:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80068e2:	b141      	cbz	r1, 80068f6 <vPortFree+0x3e>
 80068e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	e7fe      	b.n	80068f4 <vPortFree+0x3c>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068f6:	ea23 0302 	bic.w	r3, r3, r2
 80068fa:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80068fe:	f7ff f971 	bl	8005be4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006902:	4a0a      	ldr	r2, [pc, #40]	@ (800692c <vPortFree+0x74>)
 8006904:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006908:	6811      	ldr	r1, [r2, #0]
 800690a:	440b      	add	r3, r1
 800690c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800690e:	f1a4 0008 	sub.w	r0, r4, #8
 8006912:	f7ff ff05 	bl	8006720 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006916:	4a06      	ldr	r2, [pc, #24]	@ (8006930 <vPortFree+0x78>)
 8006918:	6813      	ldr	r3, [r2, #0]
 800691a:	3301      	adds	r3, #1
 800691c:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800691e:	f7ff fa05 	bl	8005d2c <xTaskResumeAll>
}
 8006922:	bd10      	pop	{r4, pc}
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	20000a10 	.word	0x20000a10
 800692c:	20000a20 	.word	0x20000a20
 8006930:	20000a14 	.word	0x20000a14

08006934 <__cvt>:
 8006934:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006938:	ec57 6b10 	vmov	r6, r7, d0
 800693c:	2f00      	cmp	r7, #0
 800693e:	460c      	mov	r4, r1
 8006940:	4619      	mov	r1, r3
 8006942:	463b      	mov	r3, r7
 8006944:	bfbb      	ittet	lt
 8006946:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800694a:	461f      	movlt	r7, r3
 800694c:	2300      	movge	r3, #0
 800694e:	232d      	movlt	r3, #45	@ 0x2d
 8006950:	700b      	strb	r3, [r1, #0]
 8006952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006954:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006958:	4691      	mov	r9, r2
 800695a:	f023 0820 	bic.w	r8, r3, #32
 800695e:	bfbc      	itt	lt
 8006960:	4632      	movlt	r2, r6
 8006962:	4616      	movlt	r6, r2
 8006964:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006968:	d005      	beq.n	8006976 <__cvt+0x42>
 800696a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800696e:	d100      	bne.n	8006972 <__cvt+0x3e>
 8006970:	3401      	adds	r4, #1
 8006972:	2102      	movs	r1, #2
 8006974:	e000      	b.n	8006978 <__cvt+0x44>
 8006976:	2103      	movs	r1, #3
 8006978:	ab03      	add	r3, sp, #12
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	ab02      	add	r3, sp, #8
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	ec47 6b10 	vmov	d0, r6, r7
 8006984:	4653      	mov	r3, sl
 8006986:	4622      	mov	r2, r4
 8006988:	f001 f89e 	bl	8007ac8 <_dtoa_r>
 800698c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006990:	4605      	mov	r5, r0
 8006992:	d119      	bne.n	80069c8 <__cvt+0x94>
 8006994:	f019 0f01 	tst.w	r9, #1
 8006998:	d00e      	beq.n	80069b8 <__cvt+0x84>
 800699a:	eb00 0904 	add.w	r9, r0, r4
 800699e:	2200      	movs	r2, #0
 80069a0:	2300      	movs	r3, #0
 80069a2:	4630      	mov	r0, r6
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7fa f8a7 	bl	8000af8 <__aeabi_dcmpeq>
 80069aa:	b108      	cbz	r0, 80069b0 <__cvt+0x7c>
 80069ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80069b0:	2230      	movs	r2, #48	@ 0x30
 80069b2:	9b03      	ldr	r3, [sp, #12]
 80069b4:	454b      	cmp	r3, r9
 80069b6:	d31e      	bcc.n	80069f6 <__cvt+0xc2>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069bc:	1b5b      	subs	r3, r3, r5
 80069be:	4628      	mov	r0, r5
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	b004      	add	sp, #16
 80069c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80069cc:	eb00 0904 	add.w	r9, r0, r4
 80069d0:	d1e5      	bne.n	800699e <__cvt+0x6a>
 80069d2:	7803      	ldrb	r3, [r0, #0]
 80069d4:	2b30      	cmp	r3, #48	@ 0x30
 80069d6:	d10a      	bne.n	80069ee <__cvt+0xba>
 80069d8:	2200      	movs	r2, #0
 80069da:	2300      	movs	r3, #0
 80069dc:	4630      	mov	r0, r6
 80069de:	4639      	mov	r1, r7
 80069e0:	f7fa f88a 	bl	8000af8 <__aeabi_dcmpeq>
 80069e4:	b918      	cbnz	r0, 80069ee <__cvt+0xba>
 80069e6:	f1c4 0401 	rsb	r4, r4, #1
 80069ea:	f8ca 4000 	str.w	r4, [sl]
 80069ee:	f8da 3000 	ldr.w	r3, [sl]
 80069f2:	4499      	add	r9, r3
 80069f4:	e7d3      	b.n	800699e <__cvt+0x6a>
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	9103      	str	r1, [sp, #12]
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	e7d9      	b.n	80069b2 <__cvt+0x7e>

080069fe <__exponent>:
 80069fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a00:	2900      	cmp	r1, #0
 8006a02:	bfba      	itte	lt
 8006a04:	4249      	neglt	r1, r1
 8006a06:	232d      	movlt	r3, #45	@ 0x2d
 8006a08:	232b      	movge	r3, #43	@ 0x2b
 8006a0a:	2909      	cmp	r1, #9
 8006a0c:	7002      	strb	r2, [r0, #0]
 8006a0e:	7043      	strb	r3, [r0, #1]
 8006a10:	dd29      	ble.n	8006a66 <__exponent+0x68>
 8006a12:	f10d 0307 	add.w	r3, sp, #7
 8006a16:	461d      	mov	r5, r3
 8006a18:	270a      	movs	r7, #10
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006a20:	fb07 1416 	mls	r4, r7, r6, r1
 8006a24:	3430      	adds	r4, #48	@ 0x30
 8006a26:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006a2a:	460c      	mov	r4, r1
 8006a2c:	2c63      	cmp	r4, #99	@ 0x63
 8006a2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006a32:	4631      	mov	r1, r6
 8006a34:	dcf1      	bgt.n	8006a1a <__exponent+0x1c>
 8006a36:	3130      	adds	r1, #48	@ 0x30
 8006a38:	1e94      	subs	r4, r2, #2
 8006a3a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006a3e:	1c41      	adds	r1, r0, #1
 8006a40:	4623      	mov	r3, r4
 8006a42:	42ab      	cmp	r3, r5
 8006a44:	d30a      	bcc.n	8006a5c <__exponent+0x5e>
 8006a46:	f10d 0309 	add.w	r3, sp, #9
 8006a4a:	1a9b      	subs	r3, r3, r2
 8006a4c:	42ac      	cmp	r4, r5
 8006a4e:	bf88      	it	hi
 8006a50:	2300      	movhi	r3, #0
 8006a52:	3302      	adds	r3, #2
 8006a54:	4403      	add	r3, r0
 8006a56:	1a18      	subs	r0, r3, r0
 8006a58:	b003      	add	sp, #12
 8006a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a5c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006a60:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006a64:	e7ed      	b.n	8006a42 <__exponent+0x44>
 8006a66:	2330      	movs	r3, #48	@ 0x30
 8006a68:	3130      	adds	r1, #48	@ 0x30
 8006a6a:	7083      	strb	r3, [r0, #2]
 8006a6c:	70c1      	strb	r1, [r0, #3]
 8006a6e:	1d03      	adds	r3, r0, #4
 8006a70:	e7f1      	b.n	8006a56 <__exponent+0x58>
	...

08006a74 <_printf_float>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	b08d      	sub	sp, #52	@ 0x34
 8006a7a:	460c      	mov	r4, r1
 8006a7c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006a80:	4616      	mov	r6, r2
 8006a82:	461f      	mov	r7, r3
 8006a84:	4605      	mov	r5, r0
 8006a86:	f000 ff09 	bl	800789c <_localeconv_r>
 8006a8a:	6803      	ldr	r3, [r0, #0]
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7f9 fc06 	bl	80002a0 <strlen>
 8006a94:	2300      	movs	r3, #0
 8006a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a98:	f8d8 3000 	ldr.w	r3, [r8]
 8006a9c:	9005      	str	r0, [sp, #20]
 8006a9e:	3307      	adds	r3, #7
 8006aa0:	f023 0307 	bic.w	r3, r3, #7
 8006aa4:	f103 0208 	add.w	r2, r3, #8
 8006aa8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006aac:	f8d4 b000 	ldr.w	fp, [r4]
 8006ab0:	f8c8 2000 	str.w	r2, [r8]
 8006ab4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ab8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006abc:	9307      	str	r3, [sp, #28]
 8006abe:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ac2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006ac6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006aca:	4b9c      	ldr	r3, [pc, #624]	@ (8006d3c <_printf_float+0x2c8>)
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	f7fa f844 	bl	8000b5c <__aeabi_dcmpun>
 8006ad4:	bb70      	cbnz	r0, 8006b34 <_printf_float+0xc0>
 8006ad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ada:	4b98      	ldr	r3, [pc, #608]	@ (8006d3c <_printf_float+0x2c8>)
 8006adc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae0:	f7fa f81e 	bl	8000b20 <__aeabi_dcmple>
 8006ae4:	bb30      	cbnz	r0, 8006b34 <_printf_float+0xc0>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4640      	mov	r0, r8
 8006aec:	4649      	mov	r1, r9
 8006aee:	f7fa f80d 	bl	8000b0c <__aeabi_dcmplt>
 8006af2:	b110      	cbz	r0, 8006afa <_printf_float+0x86>
 8006af4:	232d      	movs	r3, #45	@ 0x2d
 8006af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006afa:	4a91      	ldr	r2, [pc, #580]	@ (8006d40 <_printf_float+0x2cc>)
 8006afc:	4b91      	ldr	r3, [pc, #580]	@ (8006d44 <_printf_float+0x2d0>)
 8006afe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006b02:	bf94      	ite	ls
 8006b04:	4690      	movls	r8, r2
 8006b06:	4698      	movhi	r8, r3
 8006b08:	2303      	movs	r3, #3
 8006b0a:	6123      	str	r3, [r4, #16]
 8006b0c:	f02b 0304 	bic.w	r3, fp, #4
 8006b10:	6023      	str	r3, [r4, #0]
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	9700      	str	r7, [sp, #0]
 8006b18:	4633      	mov	r3, r6
 8006b1a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006b1c:	4621      	mov	r1, r4
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f9d2 	bl	8006ec8 <_printf_common>
 8006b24:	3001      	adds	r0, #1
 8006b26:	f040 808d 	bne.w	8006c44 <_printf_float+0x1d0>
 8006b2a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b2e:	b00d      	add	sp, #52	@ 0x34
 8006b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b34:	4642      	mov	r2, r8
 8006b36:	464b      	mov	r3, r9
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7fa f80e 	bl	8000b5c <__aeabi_dcmpun>
 8006b40:	b140      	cbz	r0, 8006b54 <_printf_float+0xe0>
 8006b42:	464b      	mov	r3, r9
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bfbc      	itt	lt
 8006b48:	232d      	movlt	r3, #45	@ 0x2d
 8006b4a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8006d48 <_printf_float+0x2d4>)
 8006b50:	4b7e      	ldr	r3, [pc, #504]	@ (8006d4c <_printf_float+0x2d8>)
 8006b52:	e7d4      	b.n	8006afe <_printf_float+0x8a>
 8006b54:	6863      	ldr	r3, [r4, #4]
 8006b56:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006b5a:	9206      	str	r2, [sp, #24]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	d13b      	bne.n	8006bd8 <_printf_float+0x164>
 8006b60:	2306      	movs	r3, #6
 8006b62:	6063      	str	r3, [r4, #4]
 8006b64:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006b68:	2300      	movs	r3, #0
 8006b6a:	6022      	str	r2, [r4, #0]
 8006b6c:	9303      	str	r3, [sp, #12]
 8006b6e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006b70:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006b74:	ab09      	add	r3, sp, #36	@ 0x24
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	6861      	ldr	r1, [r4, #4]
 8006b7a:	ec49 8b10 	vmov	d0, r8, r9
 8006b7e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006b82:	4628      	mov	r0, r5
 8006b84:	f7ff fed6 	bl	8006934 <__cvt>
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b8c:	2b47      	cmp	r3, #71	@ 0x47
 8006b8e:	4680      	mov	r8, r0
 8006b90:	d129      	bne.n	8006be6 <_printf_float+0x172>
 8006b92:	1cc8      	adds	r0, r1, #3
 8006b94:	db02      	blt.n	8006b9c <_printf_float+0x128>
 8006b96:	6863      	ldr	r3, [r4, #4]
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	dd41      	ble.n	8006c20 <_printf_float+0x1ac>
 8006b9c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ba0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ba4:	3901      	subs	r1, #1
 8006ba6:	4652      	mov	r2, sl
 8006ba8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006bac:	9109      	str	r1, [sp, #36]	@ 0x24
 8006bae:	f7ff ff26 	bl	80069fe <__exponent>
 8006bb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bb4:	1813      	adds	r3, r2, r0
 8006bb6:	2a01      	cmp	r2, #1
 8006bb8:	4681      	mov	r9, r0
 8006bba:	6123      	str	r3, [r4, #16]
 8006bbc:	dc02      	bgt.n	8006bc4 <_printf_float+0x150>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	07d2      	lsls	r2, r2, #31
 8006bc2:	d501      	bpl.n	8006bc8 <_printf_float+0x154>
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d0a2      	beq.n	8006b16 <_printf_float+0xa2>
 8006bd0:	232d      	movs	r3, #45	@ 0x2d
 8006bd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd6:	e79e      	b.n	8006b16 <_printf_float+0xa2>
 8006bd8:	9a06      	ldr	r2, [sp, #24]
 8006bda:	2a47      	cmp	r2, #71	@ 0x47
 8006bdc:	d1c2      	bne.n	8006b64 <_printf_float+0xf0>
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1c0      	bne.n	8006b64 <_printf_float+0xf0>
 8006be2:	2301      	movs	r3, #1
 8006be4:	e7bd      	b.n	8006b62 <_printf_float+0xee>
 8006be6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bea:	d9db      	bls.n	8006ba4 <_printf_float+0x130>
 8006bec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006bf0:	d118      	bne.n	8006c24 <_printf_float+0x1b0>
 8006bf2:	2900      	cmp	r1, #0
 8006bf4:	6863      	ldr	r3, [r4, #4]
 8006bf6:	dd0b      	ble.n	8006c10 <_printf_float+0x19c>
 8006bf8:	6121      	str	r1, [r4, #16]
 8006bfa:	b913      	cbnz	r3, 8006c02 <_printf_float+0x18e>
 8006bfc:	6822      	ldr	r2, [r4, #0]
 8006bfe:	07d0      	lsls	r0, r2, #31
 8006c00:	d502      	bpl.n	8006c08 <_printf_float+0x194>
 8006c02:	3301      	adds	r3, #1
 8006c04:	440b      	add	r3, r1
 8006c06:	6123      	str	r3, [r4, #16]
 8006c08:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006c0a:	f04f 0900 	mov.w	r9, #0
 8006c0e:	e7db      	b.n	8006bc8 <_printf_float+0x154>
 8006c10:	b913      	cbnz	r3, 8006c18 <_printf_float+0x1a4>
 8006c12:	6822      	ldr	r2, [r4, #0]
 8006c14:	07d2      	lsls	r2, r2, #31
 8006c16:	d501      	bpl.n	8006c1c <_printf_float+0x1a8>
 8006c18:	3302      	adds	r3, #2
 8006c1a:	e7f4      	b.n	8006c06 <_printf_float+0x192>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e7f2      	b.n	8006c06 <_printf_float+0x192>
 8006c20:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006c24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c26:	4299      	cmp	r1, r3
 8006c28:	db05      	blt.n	8006c36 <_printf_float+0x1c2>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	6121      	str	r1, [r4, #16]
 8006c2e:	07d8      	lsls	r0, r3, #31
 8006c30:	d5ea      	bpl.n	8006c08 <_printf_float+0x194>
 8006c32:	1c4b      	adds	r3, r1, #1
 8006c34:	e7e7      	b.n	8006c06 <_printf_float+0x192>
 8006c36:	2900      	cmp	r1, #0
 8006c38:	bfd4      	ite	le
 8006c3a:	f1c1 0202 	rsble	r2, r1, #2
 8006c3e:	2201      	movgt	r2, #1
 8006c40:	4413      	add	r3, r2
 8006c42:	e7e0      	b.n	8006c06 <_printf_float+0x192>
 8006c44:	6823      	ldr	r3, [r4, #0]
 8006c46:	055a      	lsls	r2, r3, #21
 8006c48:	d407      	bmi.n	8006c5a <_printf_float+0x1e6>
 8006c4a:	6923      	ldr	r3, [r4, #16]
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	4631      	mov	r1, r6
 8006c50:	4628      	mov	r0, r5
 8006c52:	47b8      	blx	r7
 8006c54:	3001      	adds	r0, #1
 8006c56:	d12b      	bne.n	8006cb0 <_printf_float+0x23c>
 8006c58:	e767      	b.n	8006b2a <_printf_float+0xb6>
 8006c5a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006c5e:	f240 80dd 	bls.w	8006e1c <_printf_float+0x3a8>
 8006c62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c66:	2200      	movs	r2, #0
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f7f9 ff45 	bl	8000af8 <__aeabi_dcmpeq>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d033      	beq.n	8006cda <_printf_float+0x266>
 8006c72:	4a37      	ldr	r2, [pc, #220]	@ (8006d50 <_printf_float+0x2dc>)
 8006c74:	2301      	movs	r3, #1
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	f43f af54 	beq.w	8006b2a <_printf_float+0xb6>
 8006c82:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006c86:	4543      	cmp	r3, r8
 8006c88:	db02      	blt.n	8006c90 <_printf_float+0x21c>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	07d8      	lsls	r0, r3, #31
 8006c8e:	d50f      	bpl.n	8006cb0 <_printf_float+0x23c>
 8006c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c94:	4631      	mov	r1, r6
 8006c96:	4628      	mov	r0, r5
 8006c98:	47b8      	blx	r7
 8006c9a:	3001      	adds	r0, #1
 8006c9c:	f43f af45 	beq.w	8006b2a <_printf_float+0xb6>
 8006ca0:	f04f 0900 	mov.w	r9, #0
 8006ca4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006ca8:	f104 0a1a 	add.w	sl, r4, #26
 8006cac:	45c8      	cmp	r8, r9
 8006cae:	dc09      	bgt.n	8006cc4 <_printf_float+0x250>
 8006cb0:	6823      	ldr	r3, [r4, #0]
 8006cb2:	079b      	lsls	r3, r3, #30
 8006cb4:	f100 8103 	bmi.w	8006ebe <_printf_float+0x44a>
 8006cb8:	68e0      	ldr	r0, [r4, #12]
 8006cba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cbc:	4298      	cmp	r0, r3
 8006cbe:	bfb8      	it	lt
 8006cc0:	4618      	movlt	r0, r3
 8006cc2:	e734      	b.n	8006b2e <_printf_float+0xba>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	4652      	mov	r2, sl
 8006cc8:	4631      	mov	r1, r6
 8006cca:	4628      	mov	r0, r5
 8006ccc:	47b8      	blx	r7
 8006cce:	3001      	adds	r0, #1
 8006cd0:	f43f af2b 	beq.w	8006b2a <_printf_float+0xb6>
 8006cd4:	f109 0901 	add.w	r9, r9, #1
 8006cd8:	e7e8      	b.n	8006cac <_printf_float+0x238>
 8006cda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dc39      	bgt.n	8006d54 <_printf_float+0x2e0>
 8006ce0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d50 <_printf_float+0x2dc>)
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4631      	mov	r1, r6
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	47b8      	blx	r7
 8006cea:	3001      	adds	r0, #1
 8006cec:	f43f af1d 	beq.w	8006b2a <_printf_float+0xb6>
 8006cf0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006cf4:	ea59 0303 	orrs.w	r3, r9, r3
 8006cf8:	d102      	bne.n	8006d00 <_printf_float+0x28c>
 8006cfa:	6823      	ldr	r3, [r4, #0]
 8006cfc:	07d9      	lsls	r1, r3, #31
 8006cfe:	d5d7      	bpl.n	8006cb0 <_printf_float+0x23c>
 8006d00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d04:	4631      	mov	r1, r6
 8006d06:	4628      	mov	r0, r5
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f af0d 	beq.w	8006b2a <_printf_float+0xb6>
 8006d10:	f04f 0a00 	mov.w	sl, #0
 8006d14:	f104 0b1a 	add.w	fp, r4, #26
 8006d18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1a:	425b      	negs	r3, r3
 8006d1c:	4553      	cmp	r3, sl
 8006d1e:	dc01      	bgt.n	8006d24 <_printf_float+0x2b0>
 8006d20:	464b      	mov	r3, r9
 8006d22:	e793      	b.n	8006c4c <_printf_float+0x1d8>
 8006d24:	2301      	movs	r3, #1
 8006d26:	465a      	mov	r2, fp
 8006d28:	4631      	mov	r1, r6
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	47b8      	blx	r7
 8006d2e:	3001      	adds	r0, #1
 8006d30:	f43f aefb 	beq.w	8006b2a <_printf_float+0xb6>
 8006d34:	f10a 0a01 	add.w	sl, sl, #1
 8006d38:	e7ee      	b.n	8006d18 <_printf_float+0x2a4>
 8006d3a:	bf00      	nop
 8006d3c:	7fefffff 	.word	0x7fefffff
 8006d40:	0800b9cd 	.word	0x0800b9cd
 8006d44:	0800b9d1 	.word	0x0800b9d1
 8006d48:	0800b9d5 	.word	0x0800b9d5
 8006d4c:	0800b9d9 	.word	0x0800b9d9
 8006d50:	0800b9dd 	.word	0x0800b9dd
 8006d54:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d56:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006d5a:	4553      	cmp	r3, sl
 8006d5c:	bfa8      	it	ge
 8006d5e:	4653      	movge	r3, sl
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	4699      	mov	r9, r3
 8006d64:	dc36      	bgt.n	8006dd4 <_printf_float+0x360>
 8006d66:	f04f 0b00 	mov.w	fp, #0
 8006d6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d6e:	f104 021a 	add.w	r2, r4, #26
 8006d72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d74:	9306      	str	r3, [sp, #24]
 8006d76:	eba3 0309 	sub.w	r3, r3, r9
 8006d7a:	455b      	cmp	r3, fp
 8006d7c:	dc31      	bgt.n	8006de2 <_printf_float+0x36e>
 8006d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d80:	459a      	cmp	sl, r3
 8006d82:	dc3a      	bgt.n	8006dfa <_printf_float+0x386>
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	07da      	lsls	r2, r3, #31
 8006d88:	d437      	bmi.n	8006dfa <_printf_float+0x386>
 8006d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d8c:	ebaa 0903 	sub.w	r9, sl, r3
 8006d90:	9b06      	ldr	r3, [sp, #24]
 8006d92:	ebaa 0303 	sub.w	r3, sl, r3
 8006d96:	4599      	cmp	r9, r3
 8006d98:	bfa8      	it	ge
 8006d9a:	4699      	movge	r9, r3
 8006d9c:	f1b9 0f00 	cmp.w	r9, #0
 8006da0:	dc33      	bgt.n	8006e0a <_printf_float+0x396>
 8006da2:	f04f 0800 	mov.w	r8, #0
 8006da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006daa:	f104 0b1a 	add.w	fp, r4, #26
 8006dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db0:	ebaa 0303 	sub.w	r3, sl, r3
 8006db4:	eba3 0309 	sub.w	r3, r3, r9
 8006db8:	4543      	cmp	r3, r8
 8006dba:	f77f af79 	ble.w	8006cb0 <_printf_float+0x23c>
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	465a      	mov	r2, fp
 8006dc2:	4631      	mov	r1, r6
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	47b8      	blx	r7
 8006dc8:	3001      	adds	r0, #1
 8006dca:	f43f aeae 	beq.w	8006b2a <_printf_float+0xb6>
 8006dce:	f108 0801 	add.w	r8, r8, #1
 8006dd2:	e7ec      	b.n	8006dae <_printf_float+0x33a>
 8006dd4:	4642      	mov	r2, r8
 8006dd6:	4631      	mov	r1, r6
 8006dd8:	4628      	mov	r0, r5
 8006dda:	47b8      	blx	r7
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d1c2      	bne.n	8006d66 <_printf_float+0x2f2>
 8006de0:	e6a3      	b.n	8006b2a <_printf_float+0xb6>
 8006de2:	2301      	movs	r3, #1
 8006de4:	4631      	mov	r1, r6
 8006de6:	4628      	mov	r0, r5
 8006de8:	9206      	str	r2, [sp, #24]
 8006dea:	47b8      	blx	r7
 8006dec:	3001      	adds	r0, #1
 8006dee:	f43f ae9c 	beq.w	8006b2a <_printf_float+0xb6>
 8006df2:	9a06      	ldr	r2, [sp, #24]
 8006df4:	f10b 0b01 	add.w	fp, fp, #1
 8006df8:	e7bb      	b.n	8006d72 <_printf_float+0x2fe>
 8006dfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4628      	mov	r0, r5
 8006e02:	47b8      	blx	r7
 8006e04:	3001      	adds	r0, #1
 8006e06:	d1c0      	bne.n	8006d8a <_printf_float+0x316>
 8006e08:	e68f      	b.n	8006b2a <_printf_float+0xb6>
 8006e0a:	9a06      	ldr	r2, [sp, #24]
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	4442      	add	r2, r8
 8006e10:	4631      	mov	r1, r6
 8006e12:	4628      	mov	r0, r5
 8006e14:	47b8      	blx	r7
 8006e16:	3001      	adds	r0, #1
 8006e18:	d1c3      	bne.n	8006da2 <_printf_float+0x32e>
 8006e1a:	e686      	b.n	8006b2a <_printf_float+0xb6>
 8006e1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006e20:	f1ba 0f01 	cmp.w	sl, #1
 8006e24:	dc01      	bgt.n	8006e2a <_printf_float+0x3b6>
 8006e26:	07db      	lsls	r3, r3, #31
 8006e28:	d536      	bpl.n	8006e98 <_printf_float+0x424>
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	4642      	mov	r2, r8
 8006e2e:	4631      	mov	r1, r6
 8006e30:	4628      	mov	r0, r5
 8006e32:	47b8      	blx	r7
 8006e34:	3001      	adds	r0, #1
 8006e36:	f43f ae78 	beq.w	8006b2a <_printf_float+0xb6>
 8006e3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e3e:	4631      	mov	r1, r6
 8006e40:	4628      	mov	r0, r5
 8006e42:	47b8      	blx	r7
 8006e44:	3001      	adds	r0, #1
 8006e46:	f43f ae70 	beq.w	8006b2a <_printf_float+0xb6>
 8006e4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2300      	movs	r3, #0
 8006e52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e56:	f7f9 fe4f 	bl	8000af8 <__aeabi_dcmpeq>
 8006e5a:	b9c0      	cbnz	r0, 8006e8e <_printf_float+0x41a>
 8006e5c:	4653      	mov	r3, sl
 8006e5e:	f108 0201 	add.w	r2, r8, #1
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	d10c      	bne.n	8006e86 <_printf_float+0x412>
 8006e6c:	e65d      	b.n	8006b2a <_printf_float+0xb6>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	465a      	mov	r2, fp
 8006e72:	4631      	mov	r1, r6
 8006e74:	4628      	mov	r0, r5
 8006e76:	47b8      	blx	r7
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f43f ae56 	beq.w	8006b2a <_printf_float+0xb6>
 8006e7e:	f108 0801 	add.w	r8, r8, #1
 8006e82:	45d0      	cmp	r8, sl
 8006e84:	dbf3      	blt.n	8006e6e <_printf_float+0x3fa>
 8006e86:	464b      	mov	r3, r9
 8006e88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e8c:	e6df      	b.n	8006c4e <_printf_float+0x1da>
 8006e8e:	f04f 0800 	mov.w	r8, #0
 8006e92:	f104 0b1a 	add.w	fp, r4, #26
 8006e96:	e7f4      	b.n	8006e82 <_printf_float+0x40e>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	e7e1      	b.n	8006e62 <_printf_float+0x3ee>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	464a      	mov	r2, r9
 8006ea2:	4631      	mov	r1, r6
 8006ea4:	4628      	mov	r0, r5
 8006ea6:	47b8      	blx	r7
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f43f ae3e 	beq.w	8006b2a <_printf_float+0xb6>
 8006eae:	f108 0801 	add.w	r8, r8, #1
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006eb6:	1a5b      	subs	r3, r3, r1
 8006eb8:	4543      	cmp	r3, r8
 8006eba:	dcf0      	bgt.n	8006e9e <_printf_float+0x42a>
 8006ebc:	e6fc      	b.n	8006cb8 <_printf_float+0x244>
 8006ebe:	f04f 0800 	mov.w	r8, #0
 8006ec2:	f104 0919 	add.w	r9, r4, #25
 8006ec6:	e7f4      	b.n	8006eb2 <_printf_float+0x43e>

08006ec8 <_printf_common>:
 8006ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	4616      	mov	r6, r2
 8006ece:	4698      	mov	r8, r3
 8006ed0:	688a      	ldr	r2, [r1, #8]
 8006ed2:	690b      	ldr	r3, [r1, #16]
 8006ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfb8      	it	lt
 8006edc:	4613      	movlt	r3, r2
 8006ede:	6033      	str	r3, [r6, #0]
 8006ee0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	b10a      	cbz	r2, 8006eee <_printf_common+0x26>
 8006eea:	3301      	adds	r3, #1
 8006eec:	6033      	str	r3, [r6, #0]
 8006eee:	6823      	ldr	r3, [r4, #0]
 8006ef0:	0699      	lsls	r1, r3, #26
 8006ef2:	bf42      	ittt	mi
 8006ef4:	6833      	ldrmi	r3, [r6, #0]
 8006ef6:	3302      	addmi	r3, #2
 8006ef8:	6033      	strmi	r3, [r6, #0]
 8006efa:	6825      	ldr	r5, [r4, #0]
 8006efc:	f015 0506 	ands.w	r5, r5, #6
 8006f00:	d106      	bne.n	8006f10 <_printf_common+0x48>
 8006f02:	f104 0a19 	add.w	sl, r4, #25
 8006f06:	68e3      	ldr	r3, [r4, #12]
 8006f08:	6832      	ldr	r2, [r6, #0]
 8006f0a:	1a9b      	subs	r3, r3, r2
 8006f0c:	42ab      	cmp	r3, r5
 8006f0e:	dc26      	bgt.n	8006f5e <_printf_common+0x96>
 8006f10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f14:	6822      	ldr	r2, [r4, #0]
 8006f16:	3b00      	subs	r3, #0
 8006f18:	bf18      	it	ne
 8006f1a:	2301      	movne	r3, #1
 8006f1c:	0692      	lsls	r2, r2, #26
 8006f1e:	d42b      	bmi.n	8006f78 <_printf_common+0xb0>
 8006f20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f24:	4641      	mov	r1, r8
 8006f26:	4638      	mov	r0, r7
 8006f28:	47c8      	blx	r9
 8006f2a:	3001      	adds	r0, #1
 8006f2c:	d01e      	beq.n	8006f6c <_printf_common+0xa4>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	6922      	ldr	r2, [r4, #16]
 8006f32:	f003 0306 	and.w	r3, r3, #6
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	bf02      	ittt	eq
 8006f3a:	68e5      	ldreq	r5, [r4, #12]
 8006f3c:	6833      	ldreq	r3, [r6, #0]
 8006f3e:	1aed      	subeq	r5, r5, r3
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	bf0c      	ite	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	2500      	movne	r5, #0
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	bfc4      	itt	gt
 8006f4e:	1a9b      	subgt	r3, r3, r2
 8006f50:	18ed      	addgt	r5, r5, r3
 8006f52:	2600      	movs	r6, #0
 8006f54:	341a      	adds	r4, #26
 8006f56:	42b5      	cmp	r5, r6
 8006f58:	d11a      	bne.n	8006f90 <_printf_common+0xc8>
 8006f5a:	2000      	movs	r0, #0
 8006f5c:	e008      	b.n	8006f70 <_printf_common+0xa8>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	4652      	mov	r2, sl
 8006f62:	4641      	mov	r1, r8
 8006f64:	4638      	mov	r0, r7
 8006f66:	47c8      	blx	r9
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d103      	bne.n	8006f74 <_printf_common+0xac>
 8006f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f74:	3501      	adds	r5, #1
 8006f76:	e7c6      	b.n	8006f06 <_printf_common+0x3e>
 8006f78:	18e1      	adds	r1, r4, r3
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	2030      	movs	r0, #48	@ 0x30
 8006f7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f82:	4422      	add	r2, r4
 8006f84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	e7c7      	b.n	8006f20 <_printf_common+0x58>
 8006f90:	2301      	movs	r3, #1
 8006f92:	4622      	mov	r2, r4
 8006f94:	4641      	mov	r1, r8
 8006f96:	4638      	mov	r0, r7
 8006f98:	47c8      	blx	r9
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d0e6      	beq.n	8006f6c <_printf_common+0xa4>
 8006f9e:	3601      	adds	r6, #1
 8006fa0:	e7d9      	b.n	8006f56 <_printf_common+0x8e>
	...

08006fa4 <_printf_i>:
 8006fa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa8:	7e0f      	ldrb	r7, [r1, #24]
 8006faa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fac:	2f78      	cmp	r7, #120	@ 0x78
 8006fae:	4691      	mov	r9, r2
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	469a      	mov	sl, r3
 8006fb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fba:	d807      	bhi.n	8006fcc <_printf_i+0x28>
 8006fbc:	2f62      	cmp	r7, #98	@ 0x62
 8006fbe:	d80a      	bhi.n	8006fd6 <_printf_i+0x32>
 8006fc0:	2f00      	cmp	r7, #0
 8006fc2:	f000 80d2 	beq.w	800716a <_printf_i+0x1c6>
 8006fc6:	2f58      	cmp	r7, #88	@ 0x58
 8006fc8:	f000 80b9 	beq.w	800713e <_printf_i+0x19a>
 8006fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fd4:	e03a      	b.n	800704c <_printf_i+0xa8>
 8006fd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fda:	2b15      	cmp	r3, #21
 8006fdc:	d8f6      	bhi.n	8006fcc <_printf_i+0x28>
 8006fde:	a101      	add	r1, pc, #4	@ (adr r1, 8006fe4 <_printf_i+0x40>)
 8006fe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fe4:	0800703d 	.word	0x0800703d
 8006fe8:	08007051 	.word	0x08007051
 8006fec:	08006fcd 	.word	0x08006fcd
 8006ff0:	08006fcd 	.word	0x08006fcd
 8006ff4:	08006fcd 	.word	0x08006fcd
 8006ff8:	08006fcd 	.word	0x08006fcd
 8006ffc:	08007051 	.word	0x08007051
 8007000:	08006fcd 	.word	0x08006fcd
 8007004:	08006fcd 	.word	0x08006fcd
 8007008:	08006fcd 	.word	0x08006fcd
 800700c:	08006fcd 	.word	0x08006fcd
 8007010:	08007151 	.word	0x08007151
 8007014:	0800707b 	.word	0x0800707b
 8007018:	0800710b 	.word	0x0800710b
 800701c:	08006fcd 	.word	0x08006fcd
 8007020:	08006fcd 	.word	0x08006fcd
 8007024:	08007173 	.word	0x08007173
 8007028:	08006fcd 	.word	0x08006fcd
 800702c:	0800707b 	.word	0x0800707b
 8007030:	08006fcd 	.word	0x08006fcd
 8007034:	08006fcd 	.word	0x08006fcd
 8007038:	08007113 	.word	0x08007113
 800703c:	6833      	ldr	r3, [r6, #0]
 800703e:	1d1a      	adds	r2, r3, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6032      	str	r2, [r6, #0]
 8007044:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007048:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800704c:	2301      	movs	r3, #1
 800704e:	e09d      	b.n	800718c <_printf_i+0x1e8>
 8007050:	6833      	ldr	r3, [r6, #0]
 8007052:	6820      	ldr	r0, [r4, #0]
 8007054:	1d19      	adds	r1, r3, #4
 8007056:	6031      	str	r1, [r6, #0]
 8007058:	0606      	lsls	r6, r0, #24
 800705a:	d501      	bpl.n	8007060 <_printf_i+0xbc>
 800705c:	681d      	ldr	r5, [r3, #0]
 800705e:	e003      	b.n	8007068 <_printf_i+0xc4>
 8007060:	0645      	lsls	r5, r0, #25
 8007062:	d5fb      	bpl.n	800705c <_printf_i+0xb8>
 8007064:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007068:	2d00      	cmp	r5, #0
 800706a:	da03      	bge.n	8007074 <_printf_i+0xd0>
 800706c:	232d      	movs	r3, #45	@ 0x2d
 800706e:	426d      	negs	r5, r5
 8007070:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007074:	4859      	ldr	r0, [pc, #356]	@ (80071dc <_printf_i+0x238>)
 8007076:	230a      	movs	r3, #10
 8007078:	e011      	b.n	800709e <_printf_i+0xfa>
 800707a:	6821      	ldr	r1, [r4, #0]
 800707c:	6833      	ldr	r3, [r6, #0]
 800707e:	0608      	lsls	r0, r1, #24
 8007080:	f853 5b04 	ldr.w	r5, [r3], #4
 8007084:	d402      	bmi.n	800708c <_printf_i+0xe8>
 8007086:	0649      	lsls	r1, r1, #25
 8007088:	bf48      	it	mi
 800708a:	b2ad      	uxthmi	r5, r5
 800708c:	2f6f      	cmp	r7, #111	@ 0x6f
 800708e:	4853      	ldr	r0, [pc, #332]	@ (80071dc <_printf_i+0x238>)
 8007090:	6033      	str	r3, [r6, #0]
 8007092:	bf14      	ite	ne
 8007094:	230a      	movne	r3, #10
 8007096:	2308      	moveq	r3, #8
 8007098:	2100      	movs	r1, #0
 800709a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800709e:	6866      	ldr	r6, [r4, #4]
 80070a0:	60a6      	str	r6, [r4, #8]
 80070a2:	2e00      	cmp	r6, #0
 80070a4:	bfa2      	ittt	ge
 80070a6:	6821      	ldrge	r1, [r4, #0]
 80070a8:	f021 0104 	bicge.w	r1, r1, #4
 80070ac:	6021      	strge	r1, [r4, #0]
 80070ae:	b90d      	cbnz	r5, 80070b4 <_printf_i+0x110>
 80070b0:	2e00      	cmp	r6, #0
 80070b2:	d04b      	beq.n	800714c <_printf_i+0x1a8>
 80070b4:	4616      	mov	r6, r2
 80070b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80070ba:	fb03 5711 	mls	r7, r3, r1, r5
 80070be:	5dc7      	ldrb	r7, [r0, r7]
 80070c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070c4:	462f      	mov	r7, r5
 80070c6:	42bb      	cmp	r3, r7
 80070c8:	460d      	mov	r5, r1
 80070ca:	d9f4      	bls.n	80070b6 <_printf_i+0x112>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	d10b      	bne.n	80070e8 <_printf_i+0x144>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	07df      	lsls	r7, r3, #31
 80070d4:	d508      	bpl.n	80070e8 <_printf_i+0x144>
 80070d6:	6923      	ldr	r3, [r4, #16]
 80070d8:	6861      	ldr	r1, [r4, #4]
 80070da:	4299      	cmp	r1, r3
 80070dc:	bfde      	ittt	le
 80070de:	2330      	movle	r3, #48	@ 0x30
 80070e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070e8:	1b92      	subs	r2, r2, r6
 80070ea:	6122      	str	r2, [r4, #16]
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	464b      	mov	r3, r9
 80070f2:	aa03      	add	r2, sp, #12
 80070f4:	4621      	mov	r1, r4
 80070f6:	4640      	mov	r0, r8
 80070f8:	f7ff fee6 	bl	8006ec8 <_printf_common>
 80070fc:	3001      	adds	r0, #1
 80070fe:	d14a      	bne.n	8007196 <_printf_i+0x1f2>
 8007100:	f04f 30ff 	mov.w	r0, #4294967295
 8007104:	b004      	add	sp, #16
 8007106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800710a:	6823      	ldr	r3, [r4, #0]
 800710c:	f043 0320 	orr.w	r3, r3, #32
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	4833      	ldr	r0, [pc, #204]	@ (80071e0 <_printf_i+0x23c>)
 8007114:	2778      	movs	r7, #120	@ 0x78
 8007116:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	6831      	ldr	r1, [r6, #0]
 800711e:	061f      	lsls	r7, r3, #24
 8007120:	f851 5b04 	ldr.w	r5, [r1], #4
 8007124:	d402      	bmi.n	800712c <_printf_i+0x188>
 8007126:	065f      	lsls	r7, r3, #25
 8007128:	bf48      	it	mi
 800712a:	b2ad      	uxthmi	r5, r5
 800712c:	6031      	str	r1, [r6, #0]
 800712e:	07d9      	lsls	r1, r3, #31
 8007130:	bf44      	itt	mi
 8007132:	f043 0320 	orrmi.w	r3, r3, #32
 8007136:	6023      	strmi	r3, [r4, #0]
 8007138:	b11d      	cbz	r5, 8007142 <_printf_i+0x19e>
 800713a:	2310      	movs	r3, #16
 800713c:	e7ac      	b.n	8007098 <_printf_i+0xf4>
 800713e:	4827      	ldr	r0, [pc, #156]	@ (80071dc <_printf_i+0x238>)
 8007140:	e7e9      	b.n	8007116 <_printf_i+0x172>
 8007142:	6823      	ldr	r3, [r4, #0]
 8007144:	f023 0320 	bic.w	r3, r3, #32
 8007148:	6023      	str	r3, [r4, #0]
 800714a:	e7f6      	b.n	800713a <_printf_i+0x196>
 800714c:	4616      	mov	r6, r2
 800714e:	e7bd      	b.n	80070cc <_printf_i+0x128>
 8007150:	6833      	ldr	r3, [r6, #0]
 8007152:	6825      	ldr	r5, [r4, #0]
 8007154:	6961      	ldr	r1, [r4, #20]
 8007156:	1d18      	adds	r0, r3, #4
 8007158:	6030      	str	r0, [r6, #0]
 800715a:	062e      	lsls	r6, r5, #24
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	d501      	bpl.n	8007164 <_printf_i+0x1c0>
 8007160:	6019      	str	r1, [r3, #0]
 8007162:	e002      	b.n	800716a <_printf_i+0x1c6>
 8007164:	0668      	lsls	r0, r5, #25
 8007166:	d5fb      	bpl.n	8007160 <_printf_i+0x1bc>
 8007168:	8019      	strh	r1, [r3, #0]
 800716a:	2300      	movs	r3, #0
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	4616      	mov	r6, r2
 8007170:	e7bc      	b.n	80070ec <_printf_i+0x148>
 8007172:	6833      	ldr	r3, [r6, #0]
 8007174:	1d1a      	adds	r2, r3, #4
 8007176:	6032      	str	r2, [r6, #0]
 8007178:	681e      	ldr	r6, [r3, #0]
 800717a:	6862      	ldr	r2, [r4, #4]
 800717c:	2100      	movs	r1, #0
 800717e:	4630      	mov	r0, r6
 8007180:	f7f9 f83e 	bl	8000200 <memchr>
 8007184:	b108      	cbz	r0, 800718a <_printf_i+0x1e6>
 8007186:	1b80      	subs	r0, r0, r6
 8007188:	6060      	str	r0, [r4, #4]
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	2300      	movs	r3, #0
 8007190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007194:	e7aa      	b.n	80070ec <_printf_i+0x148>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	4632      	mov	r2, r6
 800719a:	4649      	mov	r1, r9
 800719c:	4640      	mov	r0, r8
 800719e:	47d0      	blx	sl
 80071a0:	3001      	adds	r0, #1
 80071a2:	d0ad      	beq.n	8007100 <_printf_i+0x15c>
 80071a4:	6823      	ldr	r3, [r4, #0]
 80071a6:	079b      	lsls	r3, r3, #30
 80071a8:	d413      	bmi.n	80071d2 <_printf_i+0x22e>
 80071aa:	68e0      	ldr	r0, [r4, #12]
 80071ac:	9b03      	ldr	r3, [sp, #12]
 80071ae:	4298      	cmp	r0, r3
 80071b0:	bfb8      	it	lt
 80071b2:	4618      	movlt	r0, r3
 80071b4:	e7a6      	b.n	8007104 <_printf_i+0x160>
 80071b6:	2301      	movs	r3, #1
 80071b8:	4632      	mov	r2, r6
 80071ba:	4649      	mov	r1, r9
 80071bc:	4640      	mov	r0, r8
 80071be:	47d0      	blx	sl
 80071c0:	3001      	adds	r0, #1
 80071c2:	d09d      	beq.n	8007100 <_printf_i+0x15c>
 80071c4:	3501      	adds	r5, #1
 80071c6:	68e3      	ldr	r3, [r4, #12]
 80071c8:	9903      	ldr	r1, [sp, #12]
 80071ca:	1a5b      	subs	r3, r3, r1
 80071cc:	42ab      	cmp	r3, r5
 80071ce:	dcf2      	bgt.n	80071b6 <_printf_i+0x212>
 80071d0:	e7eb      	b.n	80071aa <_printf_i+0x206>
 80071d2:	2500      	movs	r5, #0
 80071d4:	f104 0619 	add.w	r6, r4, #25
 80071d8:	e7f5      	b.n	80071c6 <_printf_i+0x222>
 80071da:	bf00      	nop
 80071dc:	0800b9df 	.word	0x0800b9df
 80071e0:	0800b9f0 	.word	0x0800b9f0

080071e4 <_scanf_float>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	b087      	sub	sp, #28
 80071ea:	4617      	mov	r7, r2
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	688b      	ldr	r3, [r1, #8]
 80071f0:	1e5a      	subs	r2, r3, #1
 80071f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80071f6:	bf81      	itttt	hi
 80071f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80071fc:	eb03 0b05 	addhi.w	fp, r3, r5
 8007200:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007204:	608b      	strhi	r3, [r1, #8]
 8007206:	680b      	ldr	r3, [r1, #0]
 8007208:	460a      	mov	r2, r1
 800720a:	f04f 0500 	mov.w	r5, #0
 800720e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007212:	f842 3b1c 	str.w	r3, [r2], #28
 8007216:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800721a:	4680      	mov	r8, r0
 800721c:	460c      	mov	r4, r1
 800721e:	bf98      	it	ls
 8007220:	f04f 0b00 	movls.w	fp, #0
 8007224:	9201      	str	r2, [sp, #4]
 8007226:	4616      	mov	r6, r2
 8007228:	46aa      	mov	sl, r5
 800722a:	46a9      	mov	r9, r5
 800722c:	9502      	str	r5, [sp, #8]
 800722e:	68a2      	ldr	r2, [r4, #8]
 8007230:	b152      	cbz	r2, 8007248 <_scanf_float+0x64>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b4e      	cmp	r3, #78	@ 0x4e
 8007238:	d864      	bhi.n	8007304 <_scanf_float+0x120>
 800723a:	2b40      	cmp	r3, #64	@ 0x40
 800723c:	d83c      	bhi.n	80072b8 <_scanf_float+0xd4>
 800723e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007242:	b2c8      	uxtb	r0, r1
 8007244:	280e      	cmp	r0, #14
 8007246:	d93a      	bls.n	80072be <_scanf_float+0xda>
 8007248:	f1b9 0f00 	cmp.w	r9, #0
 800724c:	d003      	beq.n	8007256 <_scanf_float+0x72>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007254:	6023      	str	r3, [r4, #0]
 8007256:	f10a 3aff 	add.w	sl, sl, #4294967295
 800725a:	f1ba 0f01 	cmp.w	sl, #1
 800725e:	f200 8117 	bhi.w	8007490 <_scanf_float+0x2ac>
 8007262:	9b01      	ldr	r3, [sp, #4]
 8007264:	429e      	cmp	r6, r3
 8007266:	f200 8108 	bhi.w	800747a <_scanf_float+0x296>
 800726a:	2001      	movs	r0, #1
 800726c:	b007      	add	sp, #28
 800726e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007272:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007276:	2a0d      	cmp	r2, #13
 8007278:	d8e6      	bhi.n	8007248 <_scanf_float+0x64>
 800727a:	a101      	add	r1, pc, #4	@ (adr r1, 8007280 <_scanf_float+0x9c>)
 800727c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007280:	080073c7 	.word	0x080073c7
 8007284:	08007249 	.word	0x08007249
 8007288:	08007249 	.word	0x08007249
 800728c:	08007249 	.word	0x08007249
 8007290:	08007427 	.word	0x08007427
 8007294:	080073ff 	.word	0x080073ff
 8007298:	08007249 	.word	0x08007249
 800729c:	08007249 	.word	0x08007249
 80072a0:	080073d5 	.word	0x080073d5
 80072a4:	08007249 	.word	0x08007249
 80072a8:	08007249 	.word	0x08007249
 80072ac:	08007249 	.word	0x08007249
 80072b0:	08007249 	.word	0x08007249
 80072b4:	0800738d 	.word	0x0800738d
 80072b8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80072bc:	e7db      	b.n	8007276 <_scanf_float+0x92>
 80072be:	290e      	cmp	r1, #14
 80072c0:	d8c2      	bhi.n	8007248 <_scanf_float+0x64>
 80072c2:	a001      	add	r0, pc, #4	@ (adr r0, 80072c8 <_scanf_float+0xe4>)
 80072c4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80072c8:	0800737d 	.word	0x0800737d
 80072cc:	08007249 	.word	0x08007249
 80072d0:	0800737d 	.word	0x0800737d
 80072d4:	08007413 	.word	0x08007413
 80072d8:	08007249 	.word	0x08007249
 80072dc:	08007325 	.word	0x08007325
 80072e0:	08007363 	.word	0x08007363
 80072e4:	08007363 	.word	0x08007363
 80072e8:	08007363 	.word	0x08007363
 80072ec:	08007363 	.word	0x08007363
 80072f0:	08007363 	.word	0x08007363
 80072f4:	08007363 	.word	0x08007363
 80072f8:	08007363 	.word	0x08007363
 80072fc:	08007363 	.word	0x08007363
 8007300:	08007363 	.word	0x08007363
 8007304:	2b6e      	cmp	r3, #110	@ 0x6e
 8007306:	d809      	bhi.n	800731c <_scanf_float+0x138>
 8007308:	2b60      	cmp	r3, #96	@ 0x60
 800730a:	d8b2      	bhi.n	8007272 <_scanf_float+0x8e>
 800730c:	2b54      	cmp	r3, #84	@ 0x54
 800730e:	d07b      	beq.n	8007408 <_scanf_float+0x224>
 8007310:	2b59      	cmp	r3, #89	@ 0x59
 8007312:	d199      	bne.n	8007248 <_scanf_float+0x64>
 8007314:	2d07      	cmp	r5, #7
 8007316:	d197      	bne.n	8007248 <_scanf_float+0x64>
 8007318:	2508      	movs	r5, #8
 800731a:	e02c      	b.n	8007376 <_scanf_float+0x192>
 800731c:	2b74      	cmp	r3, #116	@ 0x74
 800731e:	d073      	beq.n	8007408 <_scanf_float+0x224>
 8007320:	2b79      	cmp	r3, #121	@ 0x79
 8007322:	e7f6      	b.n	8007312 <_scanf_float+0x12e>
 8007324:	6821      	ldr	r1, [r4, #0]
 8007326:	05c8      	lsls	r0, r1, #23
 8007328:	d51b      	bpl.n	8007362 <_scanf_float+0x17e>
 800732a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800732e:	6021      	str	r1, [r4, #0]
 8007330:	f109 0901 	add.w	r9, r9, #1
 8007334:	f1bb 0f00 	cmp.w	fp, #0
 8007338:	d003      	beq.n	8007342 <_scanf_float+0x15e>
 800733a:	3201      	adds	r2, #1
 800733c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007340:	60a2      	str	r2, [r4, #8]
 8007342:	68a3      	ldr	r3, [r4, #8]
 8007344:	3b01      	subs	r3, #1
 8007346:	60a3      	str	r3, [r4, #8]
 8007348:	6923      	ldr	r3, [r4, #16]
 800734a:	3301      	adds	r3, #1
 800734c:	6123      	str	r3, [r4, #16]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3b01      	subs	r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	607b      	str	r3, [r7, #4]
 8007356:	f340 8087 	ble.w	8007468 <_scanf_float+0x284>
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	3301      	adds	r3, #1
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	e765      	b.n	800722e <_scanf_float+0x4a>
 8007362:	eb1a 0105 	adds.w	r1, sl, r5
 8007366:	f47f af6f 	bne.w	8007248 <_scanf_float+0x64>
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007370:	6022      	str	r2, [r4, #0]
 8007372:	460d      	mov	r5, r1
 8007374:	468a      	mov	sl, r1
 8007376:	f806 3b01 	strb.w	r3, [r6], #1
 800737a:	e7e2      	b.n	8007342 <_scanf_float+0x15e>
 800737c:	6822      	ldr	r2, [r4, #0]
 800737e:	0610      	lsls	r0, r2, #24
 8007380:	f57f af62 	bpl.w	8007248 <_scanf_float+0x64>
 8007384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007388:	6022      	str	r2, [r4, #0]
 800738a:	e7f4      	b.n	8007376 <_scanf_float+0x192>
 800738c:	f1ba 0f00 	cmp.w	sl, #0
 8007390:	d10e      	bne.n	80073b0 <_scanf_float+0x1cc>
 8007392:	f1b9 0f00 	cmp.w	r9, #0
 8007396:	d10e      	bne.n	80073b6 <_scanf_float+0x1d2>
 8007398:	6822      	ldr	r2, [r4, #0]
 800739a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800739e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073a2:	d108      	bne.n	80073b6 <_scanf_float+0x1d2>
 80073a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	f04f 0a01 	mov.w	sl, #1
 80073ae:	e7e2      	b.n	8007376 <_scanf_float+0x192>
 80073b0:	f1ba 0f02 	cmp.w	sl, #2
 80073b4:	d055      	beq.n	8007462 <_scanf_float+0x27e>
 80073b6:	2d01      	cmp	r5, #1
 80073b8:	d002      	beq.n	80073c0 <_scanf_float+0x1dc>
 80073ba:	2d04      	cmp	r5, #4
 80073bc:	f47f af44 	bne.w	8007248 <_scanf_float+0x64>
 80073c0:	3501      	adds	r5, #1
 80073c2:	b2ed      	uxtb	r5, r5
 80073c4:	e7d7      	b.n	8007376 <_scanf_float+0x192>
 80073c6:	f1ba 0f01 	cmp.w	sl, #1
 80073ca:	f47f af3d 	bne.w	8007248 <_scanf_float+0x64>
 80073ce:	f04f 0a02 	mov.w	sl, #2
 80073d2:	e7d0      	b.n	8007376 <_scanf_float+0x192>
 80073d4:	b97d      	cbnz	r5, 80073f6 <_scanf_float+0x212>
 80073d6:	f1b9 0f00 	cmp.w	r9, #0
 80073da:	f47f af38 	bne.w	800724e <_scanf_float+0x6a>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80073e4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80073e8:	f040 8108 	bne.w	80075fc <_scanf_float+0x418>
 80073ec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073f0:	6022      	str	r2, [r4, #0]
 80073f2:	2501      	movs	r5, #1
 80073f4:	e7bf      	b.n	8007376 <_scanf_float+0x192>
 80073f6:	2d03      	cmp	r5, #3
 80073f8:	d0e2      	beq.n	80073c0 <_scanf_float+0x1dc>
 80073fa:	2d05      	cmp	r5, #5
 80073fc:	e7de      	b.n	80073bc <_scanf_float+0x1d8>
 80073fe:	2d02      	cmp	r5, #2
 8007400:	f47f af22 	bne.w	8007248 <_scanf_float+0x64>
 8007404:	2503      	movs	r5, #3
 8007406:	e7b6      	b.n	8007376 <_scanf_float+0x192>
 8007408:	2d06      	cmp	r5, #6
 800740a:	f47f af1d 	bne.w	8007248 <_scanf_float+0x64>
 800740e:	2507      	movs	r5, #7
 8007410:	e7b1      	b.n	8007376 <_scanf_float+0x192>
 8007412:	6822      	ldr	r2, [r4, #0]
 8007414:	0591      	lsls	r1, r2, #22
 8007416:	f57f af17 	bpl.w	8007248 <_scanf_float+0x64>
 800741a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800741e:	6022      	str	r2, [r4, #0]
 8007420:	f8cd 9008 	str.w	r9, [sp, #8]
 8007424:	e7a7      	b.n	8007376 <_scanf_float+0x192>
 8007426:	6822      	ldr	r2, [r4, #0]
 8007428:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800742c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007430:	d006      	beq.n	8007440 <_scanf_float+0x25c>
 8007432:	0550      	lsls	r0, r2, #21
 8007434:	f57f af08 	bpl.w	8007248 <_scanf_float+0x64>
 8007438:	f1b9 0f00 	cmp.w	r9, #0
 800743c:	f000 80de 	beq.w	80075fc <_scanf_float+0x418>
 8007440:	0591      	lsls	r1, r2, #22
 8007442:	bf58      	it	pl
 8007444:	9902      	ldrpl	r1, [sp, #8]
 8007446:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800744a:	bf58      	it	pl
 800744c:	eba9 0101 	subpl.w	r1, r9, r1
 8007450:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007454:	bf58      	it	pl
 8007456:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	f04f 0900 	mov.w	r9, #0
 8007460:	e789      	b.n	8007376 <_scanf_float+0x192>
 8007462:	f04f 0a03 	mov.w	sl, #3
 8007466:	e786      	b.n	8007376 <_scanf_float+0x192>
 8007468:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800746c:	4639      	mov	r1, r7
 800746e:	4640      	mov	r0, r8
 8007470:	4798      	blx	r3
 8007472:	2800      	cmp	r0, #0
 8007474:	f43f aedb 	beq.w	800722e <_scanf_float+0x4a>
 8007478:	e6e6      	b.n	8007248 <_scanf_float+0x64>
 800747a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800747e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007482:	463a      	mov	r2, r7
 8007484:	4640      	mov	r0, r8
 8007486:	4798      	blx	r3
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	3b01      	subs	r3, #1
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	e6e8      	b.n	8007262 <_scanf_float+0x7e>
 8007490:	1e6b      	subs	r3, r5, #1
 8007492:	2b06      	cmp	r3, #6
 8007494:	d824      	bhi.n	80074e0 <_scanf_float+0x2fc>
 8007496:	2d02      	cmp	r5, #2
 8007498:	d836      	bhi.n	8007508 <_scanf_float+0x324>
 800749a:	9b01      	ldr	r3, [sp, #4]
 800749c:	429e      	cmp	r6, r3
 800749e:	f67f aee4 	bls.w	800726a <_scanf_float+0x86>
 80074a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074aa:	463a      	mov	r2, r7
 80074ac:	4640      	mov	r0, r8
 80074ae:	4798      	blx	r3
 80074b0:	6923      	ldr	r3, [r4, #16]
 80074b2:	3b01      	subs	r3, #1
 80074b4:	6123      	str	r3, [r4, #16]
 80074b6:	e7f0      	b.n	800749a <_scanf_float+0x2b6>
 80074b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074bc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80074c0:	463a      	mov	r2, r7
 80074c2:	4640      	mov	r0, r8
 80074c4:	4798      	blx	r3
 80074c6:	6923      	ldr	r3, [r4, #16]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	6123      	str	r3, [r4, #16]
 80074cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80074d0:	fa5f fa8a 	uxtb.w	sl, sl
 80074d4:	f1ba 0f02 	cmp.w	sl, #2
 80074d8:	d1ee      	bne.n	80074b8 <_scanf_float+0x2d4>
 80074da:	3d03      	subs	r5, #3
 80074dc:	b2ed      	uxtb	r5, r5
 80074de:	1b76      	subs	r6, r6, r5
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	05da      	lsls	r2, r3, #23
 80074e4:	d530      	bpl.n	8007548 <_scanf_float+0x364>
 80074e6:	055b      	lsls	r3, r3, #21
 80074e8:	d511      	bpl.n	800750e <_scanf_float+0x32a>
 80074ea:	9b01      	ldr	r3, [sp, #4]
 80074ec:	429e      	cmp	r6, r3
 80074ee:	f67f aebc 	bls.w	800726a <_scanf_float+0x86>
 80074f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80074fa:	463a      	mov	r2, r7
 80074fc:	4640      	mov	r0, r8
 80074fe:	4798      	blx	r3
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	3b01      	subs	r3, #1
 8007504:	6123      	str	r3, [r4, #16]
 8007506:	e7f0      	b.n	80074ea <_scanf_float+0x306>
 8007508:	46aa      	mov	sl, r5
 800750a:	46b3      	mov	fp, r6
 800750c:	e7de      	b.n	80074cc <_scanf_float+0x2e8>
 800750e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007512:	6923      	ldr	r3, [r4, #16]
 8007514:	2965      	cmp	r1, #101	@ 0x65
 8007516:	f103 33ff 	add.w	r3, r3, #4294967295
 800751a:	f106 35ff 	add.w	r5, r6, #4294967295
 800751e:	6123      	str	r3, [r4, #16]
 8007520:	d00c      	beq.n	800753c <_scanf_float+0x358>
 8007522:	2945      	cmp	r1, #69	@ 0x45
 8007524:	d00a      	beq.n	800753c <_scanf_float+0x358>
 8007526:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800752a:	463a      	mov	r2, r7
 800752c:	4640      	mov	r0, r8
 800752e:	4798      	blx	r3
 8007530:	6923      	ldr	r3, [r4, #16]
 8007532:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007536:	3b01      	subs	r3, #1
 8007538:	1eb5      	subs	r5, r6, #2
 800753a:	6123      	str	r3, [r4, #16]
 800753c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007540:	463a      	mov	r2, r7
 8007542:	4640      	mov	r0, r8
 8007544:	4798      	blx	r3
 8007546:	462e      	mov	r6, r5
 8007548:	6822      	ldr	r2, [r4, #0]
 800754a:	f012 0210 	ands.w	r2, r2, #16
 800754e:	d001      	beq.n	8007554 <_scanf_float+0x370>
 8007550:	2000      	movs	r0, #0
 8007552:	e68b      	b.n	800726c <_scanf_float+0x88>
 8007554:	7032      	strb	r2, [r6, #0]
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800755c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007560:	d11c      	bne.n	800759c <_scanf_float+0x3b8>
 8007562:	9b02      	ldr	r3, [sp, #8]
 8007564:	454b      	cmp	r3, r9
 8007566:	eba3 0209 	sub.w	r2, r3, r9
 800756a:	d123      	bne.n	80075b4 <_scanf_float+0x3d0>
 800756c:	9901      	ldr	r1, [sp, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	4640      	mov	r0, r8
 8007572:	f002 fc21 	bl	8009db8 <_strtod_r>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	6821      	ldr	r1, [r4, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f011 0f02 	tst.w	r1, #2
 8007580:	ec57 6b10 	vmov	r6, r7, d0
 8007584:	f103 0204 	add.w	r2, r3, #4
 8007588:	d01f      	beq.n	80075ca <_scanf_float+0x3e6>
 800758a:	9903      	ldr	r1, [sp, #12]
 800758c:	600a      	str	r2, [r1, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	e9c3 6700 	strd	r6, r7, [r3]
 8007594:	68e3      	ldr	r3, [r4, #12]
 8007596:	3301      	adds	r3, #1
 8007598:	60e3      	str	r3, [r4, #12]
 800759a:	e7d9      	b.n	8007550 <_scanf_float+0x36c>
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0e4      	beq.n	800756c <_scanf_float+0x388>
 80075a2:	9905      	ldr	r1, [sp, #20]
 80075a4:	230a      	movs	r3, #10
 80075a6:	3101      	adds	r1, #1
 80075a8:	4640      	mov	r0, r8
 80075aa:	f002 fc85 	bl	8009eb8 <_strtol_r>
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	9e05      	ldr	r6, [sp, #20]
 80075b2:	1ac2      	subs	r2, r0, r3
 80075b4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80075b8:	429e      	cmp	r6, r3
 80075ba:	bf28      	it	cs
 80075bc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80075c0:	4910      	ldr	r1, [pc, #64]	@ (8007604 <_scanf_float+0x420>)
 80075c2:	4630      	mov	r0, r6
 80075c4:	f000 f8fe 	bl	80077c4 <siprintf>
 80075c8:	e7d0      	b.n	800756c <_scanf_float+0x388>
 80075ca:	f011 0f04 	tst.w	r1, #4
 80075ce:	9903      	ldr	r1, [sp, #12]
 80075d0:	600a      	str	r2, [r1, #0]
 80075d2:	d1dc      	bne.n	800758e <_scanf_float+0x3aa>
 80075d4:	681d      	ldr	r5, [r3, #0]
 80075d6:	4632      	mov	r2, r6
 80075d8:	463b      	mov	r3, r7
 80075da:	4630      	mov	r0, r6
 80075dc:	4639      	mov	r1, r7
 80075de:	f7f9 fabd 	bl	8000b5c <__aeabi_dcmpun>
 80075e2:	b128      	cbz	r0, 80075f0 <_scanf_float+0x40c>
 80075e4:	4808      	ldr	r0, [pc, #32]	@ (8007608 <_scanf_float+0x424>)
 80075e6:	f000 f9df 	bl	80079a8 <nanf>
 80075ea:	ed85 0a00 	vstr	s0, [r5]
 80075ee:	e7d1      	b.n	8007594 <_scanf_float+0x3b0>
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	f7f9 fb10 	bl	8000c18 <__aeabi_d2f>
 80075f8:	6028      	str	r0, [r5, #0]
 80075fa:	e7cb      	b.n	8007594 <_scanf_float+0x3b0>
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	e629      	b.n	8007256 <_scanf_float+0x72>
 8007602:	bf00      	nop
 8007604:	0800ba01 	.word	0x0800ba01
 8007608:	0800bd95 	.word	0x0800bd95

0800760c <std>:
 800760c:	2300      	movs	r3, #0
 800760e:	b510      	push	{r4, lr}
 8007610:	4604      	mov	r4, r0
 8007612:	e9c0 3300 	strd	r3, r3, [r0]
 8007616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800761a:	6083      	str	r3, [r0, #8]
 800761c:	8181      	strh	r1, [r0, #12]
 800761e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007620:	81c2      	strh	r2, [r0, #14]
 8007622:	6183      	str	r3, [r0, #24]
 8007624:	4619      	mov	r1, r3
 8007626:	2208      	movs	r2, #8
 8007628:	305c      	adds	r0, #92	@ 0x5c
 800762a:	f000 f92e 	bl	800788a <memset>
 800762e:	4b0d      	ldr	r3, [pc, #52]	@ (8007664 <std+0x58>)
 8007630:	6263      	str	r3, [r4, #36]	@ 0x24
 8007632:	4b0d      	ldr	r3, [pc, #52]	@ (8007668 <std+0x5c>)
 8007634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007636:	4b0d      	ldr	r3, [pc, #52]	@ (800766c <std+0x60>)
 8007638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800763a:	4b0d      	ldr	r3, [pc, #52]	@ (8007670 <std+0x64>)
 800763c:	6323      	str	r3, [r4, #48]	@ 0x30
 800763e:	4b0d      	ldr	r3, [pc, #52]	@ (8007674 <std+0x68>)
 8007640:	6224      	str	r4, [r4, #32]
 8007642:	429c      	cmp	r4, r3
 8007644:	d006      	beq.n	8007654 <std+0x48>
 8007646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800764a:	4294      	cmp	r4, r2
 800764c:	d002      	beq.n	8007654 <std+0x48>
 800764e:	33d0      	adds	r3, #208	@ 0xd0
 8007650:	429c      	cmp	r4, r3
 8007652:	d105      	bne.n	8007660 <std+0x54>
 8007654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800765c:	f000 b992 	b.w	8007984 <__retarget_lock_init_recursive>
 8007660:	bd10      	pop	{r4, pc}
 8007662:	bf00      	nop
 8007664:	08007805 	.word	0x08007805
 8007668:	08007827 	.word	0x08007827
 800766c:	0800785f 	.word	0x0800785f
 8007670:	08007883 	.word	0x08007883
 8007674:	200015e8 	.word	0x200015e8

08007678 <stdio_exit_handler>:
 8007678:	4a02      	ldr	r2, [pc, #8]	@ (8007684 <stdio_exit_handler+0xc>)
 800767a:	4903      	ldr	r1, [pc, #12]	@ (8007688 <stdio_exit_handler+0x10>)
 800767c:	4803      	ldr	r0, [pc, #12]	@ (800768c <stdio_exit_handler+0x14>)
 800767e:	f000 b869 	b.w	8007754 <_fwalk_sglue>
 8007682:	bf00      	nop
 8007684:	200000cc 	.word	0x200000cc
 8007688:	0800a4f9 	.word	0x0800a4f9
 800768c:	200000dc 	.word	0x200000dc

08007690 <cleanup_stdio>:
 8007690:	6841      	ldr	r1, [r0, #4]
 8007692:	4b0c      	ldr	r3, [pc, #48]	@ (80076c4 <cleanup_stdio+0x34>)
 8007694:	4299      	cmp	r1, r3
 8007696:	b510      	push	{r4, lr}
 8007698:	4604      	mov	r4, r0
 800769a:	d001      	beq.n	80076a0 <cleanup_stdio+0x10>
 800769c:	f002 ff2c 	bl	800a4f8 <_fflush_r>
 80076a0:	68a1      	ldr	r1, [r4, #8]
 80076a2:	4b09      	ldr	r3, [pc, #36]	@ (80076c8 <cleanup_stdio+0x38>)
 80076a4:	4299      	cmp	r1, r3
 80076a6:	d002      	beq.n	80076ae <cleanup_stdio+0x1e>
 80076a8:	4620      	mov	r0, r4
 80076aa:	f002 ff25 	bl	800a4f8 <_fflush_r>
 80076ae:	68e1      	ldr	r1, [r4, #12]
 80076b0:	4b06      	ldr	r3, [pc, #24]	@ (80076cc <cleanup_stdio+0x3c>)
 80076b2:	4299      	cmp	r1, r3
 80076b4:	d004      	beq.n	80076c0 <cleanup_stdio+0x30>
 80076b6:	4620      	mov	r0, r4
 80076b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076bc:	f002 bf1c 	b.w	800a4f8 <_fflush_r>
 80076c0:	bd10      	pop	{r4, pc}
 80076c2:	bf00      	nop
 80076c4:	200015e8 	.word	0x200015e8
 80076c8:	20001650 	.word	0x20001650
 80076cc:	200016b8 	.word	0x200016b8

080076d0 <global_stdio_init.part.0>:
 80076d0:	b510      	push	{r4, lr}
 80076d2:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <global_stdio_init.part.0+0x30>)
 80076d4:	4c0b      	ldr	r4, [pc, #44]	@ (8007704 <global_stdio_init.part.0+0x34>)
 80076d6:	4a0c      	ldr	r2, [pc, #48]	@ (8007708 <global_stdio_init.part.0+0x38>)
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	4620      	mov	r0, r4
 80076dc:	2200      	movs	r2, #0
 80076de:	2104      	movs	r1, #4
 80076e0:	f7ff ff94 	bl	800760c <std>
 80076e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80076e8:	2201      	movs	r2, #1
 80076ea:	2109      	movs	r1, #9
 80076ec:	f7ff ff8e 	bl	800760c <std>
 80076f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80076f4:	2202      	movs	r2, #2
 80076f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fa:	2112      	movs	r1, #18
 80076fc:	f7ff bf86 	b.w	800760c <std>
 8007700:	20001720 	.word	0x20001720
 8007704:	200015e8 	.word	0x200015e8
 8007708:	08007679 	.word	0x08007679

0800770c <__sfp_lock_acquire>:
 800770c:	4801      	ldr	r0, [pc, #4]	@ (8007714 <__sfp_lock_acquire+0x8>)
 800770e:	f000 b93a 	b.w	8007986 <__retarget_lock_acquire_recursive>
 8007712:	bf00      	nop
 8007714:	20001729 	.word	0x20001729

08007718 <__sfp_lock_release>:
 8007718:	4801      	ldr	r0, [pc, #4]	@ (8007720 <__sfp_lock_release+0x8>)
 800771a:	f000 b935 	b.w	8007988 <__retarget_lock_release_recursive>
 800771e:	bf00      	nop
 8007720:	20001729 	.word	0x20001729

08007724 <__sinit>:
 8007724:	b510      	push	{r4, lr}
 8007726:	4604      	mov	r4, r0
 8007728:	f7ff fff0 	bl	800770c <__sfp_lock_acquire>
 800772c:	6a23      	ldr	r3, [r4, #32]
 800772e:	b11b      	cbz	r3, 8007738 <__sinit+0x14>
 8007730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007734:	f7ff bff0 	b.w	8007718 <__sfp_lock_release>
 8007738:	4b04      	ldr	r3, [pc, #16]	@ (800774c <__sinit+0x28>)
 800773a:	6223      	str	r3, [r4, #32]
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <__sinit+0x2c>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f5      	bne.n	8007730 <__sinit+0xc>
 8007744:	f7ff ffc4 	bl	80076d0 <global_stdio_init.part.0>
 8007748:	e7f2      	b.n	8007730 <__sinit+0xc>
 800774a:	bf00      	nop
 800774c:	08007691 	.word	0x08007691
 8007750:	20001720 	.word	0x20001720

08007754 <_fwalk_sglue>:
 8007754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007758:	4607      	mov	r7, r0
 800775a:	4688      	mov	r8, r1
 800775c:	4614      	mov	r4, r2
 800775e:	2600      	movs	r6, #0
 8007760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007764:	f1b9 0901 	subs.w	r9, r9, #1
 8007768:	d505      	bpl.n	8007776 <_fwalk_sglue+0x22>
 800776a:	6824      	ldr	r4, [r4, #0]
 800776c:	2c00      	cmp	r4, #0
 800776e:	d1f7      	bne.n	8007760 <_fwalk_sglue+0xc>
 8007770:	4630      	mov	r0, r6
 8007772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d907      	bls.n	800778c <_fwalk_sglue+0x38>
 800777c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007780:	3301      	adds	r3, #1
 8007782:	d003      	beq.n	800778c <_fwalk_sglue+0x38>
 8007784:	4629      	mov	r1, r5
 8007786:	4638      	mov	r0, r7
 8007788:	47c0      	blx	r8
 800778a:	4306      	orrs	r6, r0
 800778c:	3568      	adds	r5, #104	@ 0x68
 800778e:	e7e9      	b.n	8007764 <_fwalk_sglue+0x10>

08007790 <iprintf>:
 8007790:	b40f      	push	{r0, r1, r2, r3}
 8007792:	b507      	push	{r0, r1, r2, lr}
 8007794:	4906      	ldr	r1, [pc, #24]	@ (80077b0 <iprintf+0x20>)
 8007796:	ab04      	add	r3, sp, #16
 8007798:	6808      	ldr	r0, [r1, #0]
 800779a:	f853 2b04 	ldr.w	r2, [r3], #4
 800779e:	6881      	ldr	r1, [r0, #8]
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	f002 fd0d 	bl	800a1c0 <_vfiprintf_r>
 80077a6:	b003      	add	sp, #12
 80077a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077ac:	b004      	add	sp, #16
 80077ae:	4770      	bx	lr
 80077b0:	200000d8 	.word	0x200000d8

080077b4 <putchar>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	@ (80077c0 <putchar+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	6882      	ldr	r2, [r0, #8]
 80077bc:	f002 bec4 	b.w	800a548 <_putc_r>
 80077c0:	200000d8 	.word	0x200000d8

080077c4 <siprintf>:
 80077c4:	b40e      	push	{r1, r2, r3}
 80077c6:	b500      	push	{lr}
 80077c8:	b09c      	sub	sp, #112	@ 0x70
 80077ca:	ab1d      	add	r3, sp, #116	@ 0x74
 80077cc:	9002      	str	r0, [sp, #8]
 80077ce:	9006      	str	r0, [sp, #24]
 80077d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80077d4:	4809      	ldr	r0, [pc, #36]	@ (80077fc <siprintf+0x38>)
 80077d6:	9107      	str	r1, [sp, #28]
 80077d8:	9104      	str	r1, [sp, #16]
 80077da:	4909      	ldr	r1, [pc, #36]	@ (8007800 <siprintf+0x3c>)
 80077dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80077e0:	9105      	str	r1, [sp, #20]
 80077e2:	6800      	ldr	r0, [r0, #0]
 80077e4:	9301      	str	r3, [sp, #4]
 80077e6:	a902      	add	r1, sp, #8
 80077e8:	f002 fbc4 	bl	8009f74 <_svfiprintf_r>
 80077ec:	9b02      	ldr	r3, [sp, #8]
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
 80077f2:	b01c      	add	sp, #112	@ 0x70
 80077f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80077f8:	b003      	add	sp, #12
 80077fa:	4770      	bx	lr
 80077fc:	200000d8 	.word	0x200000d8
 8007800:	ffff0208 	.word	0xffff0208

08007804 <__sread>:
 8007804:	b510      	push	{r4, lr}
 8007806:	460c      	mov	r4, r1
 8007808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780c:	f000 f86c 	bl	80078e8 <_read_r>
 8007810:	2800      	cmp	r0, #0
 8007812:	bfab      	itete	ge
 8007814:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007816:	89a3      	ldrhlt	r3, [r4, #12]
 8007818:	181b      	addge	r3, r3, r0
 800781a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800781e:	bfac      	ite	ge
 8007820:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007822:	81a3      	strhlt	r3, [r4, #12]
 8007824:	bd10      	pop	{r4, pc}

08007826 <__swrite>:
 8007826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800782a:	461f      	mov	r7, r3
 800782c:	898b      	ldrh	r3, [r1, #12]
 800782e:	05db      	lsls	r3, r3, #23
 8007830:	4605      	mov	r5, r0
 8007832:	460c      	mov	r4, r1
 8007834:	4616      	mov	r6, r2
 8007836:	d505      	bpl.n	8007844 <__swrite+0x1e>
 8007838:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783c:	2302      	movs	r3, #2
 800783e:	2200      	movs	r2, #0
 8007840:	f000 f840 	bl	80078c4 <_lseek_r>
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800784e:	81a3      	strh	r3, [r4, #12]
 8007850:	4632      	mov	r2, r6
 8007852:	463b      	mov	r3, r7
 8007854:	4628      	mov	r0, r5
 8007856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800785a:	f000 b857 	b.w	800790c <_write_r>

0800785e <__sseek>:
 800785e:	b510      	push	{r4, lr}
 8007860:	460c      	mov	r4, r1
 8007862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007866:	f000 f82d 	bl	80078c4 <_lseek_r>
 800786a:	1c43      	adds	r3, r0, #1
 800786c:	89a3      	ldrh	r3, [r4, #12]
 800786e:	bf15      	itete	ne
 8007870:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007872:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007876:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800787a:	81a3      	strheq	r3, [r4, #12]
 800787c:	bf18      	it	ne
 800787e:	81a3      	strhne	r3, [r4, #12]
 8007880:	bd10      	pop	{r4, pc}

08007882 <__sclose>:
 8007882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007886:	f000 b80d 	b.w	80078a4 <_close_r>

0800788a <memset>:
 800788a:	4402      	add	r2, r0
 800788c:	4603      	mov	r3, r0
 800788e:	4293      	cmp	r3, r2
 8007890:	d100      	bne.n	8007894 <memset+0xa>
 8007892:	4770      	bx	lr
 8007894:	f803 1b01 	strb.w	r1, [r3], #1
 8007898:	e7f9      	b.n	800788e <memset+0x4>
	...

0800789c <_localeconv_r>:
 800789c:	4800      	ldr	r0, [pc, #0]	@ (80078a0 <_localeconv_r+0x4>)
 800789e:	4770      	bx	lr
 80078a0:	20000218 	.word	0x20000218

080078a4 <_close_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d06      	ldr	r5, [pc, #24]	@ (80078c0 <_close_r+0x1c>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	f7fa f9e0 	bl	8001c74 <_close>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_close_r+0x1a>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_close_r+0x1a>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	20001724 	.word	0x20001724

080078c4 <_lseek_r>:
 80078c4:	b538      	push	{r3, r4, r5, lr}
 80078c6:	4d07      	ldr	r5, [pc, #28]	@ (80078e4 <_lseek_r+0x20>)
 80078c8:	4604      	mov	r4, r0
 80078ca:	4608      	mov	r0, r1
 80078cc:	4611      	mov	r1, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	602a      	str	r2, [r5, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	f7fa f9d8 	bl	8001c88 <_lseek>
 80078d8:	1c43      	adds	r3, r0, #1
 80078da:	d102      	bne.n	80078e2 <_lseek_r+0x1e>
 80078dc:	682b      	ldr	r3, [r5, #0]
 80078de:	b103      	cbz	r3, 80078e2 <_lseek_r+0x1e>
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	bd38      	pop	{r3, r4, r5, pc}
 80078e4:	20001724 	.word	0x20001724

080078e8 <_read_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	4d07      	ldr	r5, [pc, #28]	@ (8007908 <_read_r+0x20>)
 80078ec:	4604      	mov	r4, r0
 80078ee:	4608      	mov	r0, r1
 80078f0:	4611      	mov	r1, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	602a      	str	r2, [r5, #0]
 80078f6:	461a      	mov	r2, r3
 80078f8:	f7fa f9a2 	bl	8001c40 <_read>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_read_r+0x1e>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_read_r+0x1e>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	20001724 	.word	0x20001724

0800790c <_write_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d07      	ldr	r5, [pc, #28]	@ (800792c <_write_r+0x20>)
 8007910:	4604      	mov	r4, r0
 8007912:	4608      	mov	r0, r1
 8007914:	4611      	mov	r1, r2
 8007916:	2200      	movs	r2, #0
 8007918:	602a      	str	r2, [r5, #0]
 800791a:	461a      	mov	r2, r3
 800791c:	f7fa f99d 	bl	8001c5a <_write>
 8007920:	1c43      	adds	r3, r0, #1
 8007922:	d102      	bne.n	800792a <_write_r+0x1e>
 8007924:	682b      	ldr	r3, [r5, #0]
 8007926:	b103      	cbz	r3, 800792a <_write_r+0x1e>
 8007928:	6023      	str	r3, [r4, #0]
 800792a:	bd38      	pop	{r3, r4, r5, pc}
 800792c:	20001724 	.word	0x20001724

08007930 <__errno>:
 8007930:	4b01      	ldr	r3, [pc, #4]	@ (8007938 <__errno+0x8>)
 8007932:	6818      	ldr	r0, [r3, #0]
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop
 8007938:	200000d8 	.word	0x200000d8

0800793c <__libc_init_array>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	4d0d      	ldr	r5, [pc, #52]	@ (8007974 <__libc_init_array+0x38>)
 8007940:	4c0d      	ldr	r4, [pc, #52]	@ (8007978 <__libc_init_array+0x3c>)
 8007942:	1b64      	subs	r4, r4, r5
 8007944:	10a4      	asrs	r4, r4, #2
 8007946:	2600      	movs	r6, #0
 8007948:	42a6      	cmp	r6, r4
 800794a:	d109      	bne.n	8007960 <__libc_init_array+0x24>
 800794c:	4d0b      	ldr	r5, [pc, #44]	@ (800797c <__libc_init_array+0x40>)
 800794e:	4c0c      	ldr	r4, [pc, #48]	@ (8007980 <__libc_init_array+0x44>)
 8007950:	f003 fe36 	bl	800b5c0 <_init>
 8007954:	1b64      	subs	r4, r4, r5
 8007956:	10a4      	asrs	r4, r4, #2
 8007958:	2600      	movs	r6, #0
 800795a:	42a6      	cmp	r6, r4
 800795c:	d105      	bne.n	800796a <__libc_init_array+0x2e>
 800795e:	bd70      	pop	{r4, r5, r6, pc}
 8007960:	f855 3b04 	ldr.w	r3, [r5], #4
 8007964:	4798      	blx	r3
 8007966:	3601      	adds	r6, #1
 8007968:	e7ee      	b.n	8007948 <__libc_init_array+0xc>
 800796a:	f855 3b04 	ldr.w	r3, [r5], #4
 800796e:	4798      	blx	r3
 8007970:	3601      	adds	r6, #1
 8007972:	e7f2      	b.n	800795a <__libc_init_array+0x1e>
 8007974:	0800be70 	.word	0x0800be70
 8007978:	0800be70 	.word	0x0800be70
 800797c:	0800be70 	.word	0x0800be70
 8007980:	0800be74 	.word	0x0800be74

08007984 <__retarget_lock_init_recursive>:
 8007984:	4770      	bx	lr

08007986 <__retarget_lock_acquire_recursive>:
 8007986:	4770      	bx	lr

08007988 <__retarget_lock_release_recursive>:
 8007988:	4770      	bx	lr

0800798a <memcpy>:
 800798a:	440a      	add	r2, r1
 800798c:	4291      	cmp	r1, r2
 800798e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007992:	d100      	bne.n	8007996 <memcpy+0xc>
 8007994:	4770      	bx	lr
 8007996:	b510      	push	{r4, lr}
 8007998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800799c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079a0:	4291      	cmp	r1, r2
 80079a2:	d1f9      	bne.n	8007998 <memcpy+0xe>
 80079a4:	bd10      	pop	{r4, pc}
	...

080079a8 <nanf>:
 80079a8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80079b0 <nanf+0x8>
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	7fc00000 	.word	0x7fc00000

080079b4 <quorem>:
 80079b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b8:	6903      	ldr	r3, [r0, #16]
 80079ba:	690c      	ldr	r4, [r1, #16]
 80079bc:	42a3      	cmp	r3, r4
 80079be:	4607      	mov	r7, r0
 80079c0:	db7e      	blt.n	8007ac0 <quorem+0x10c>
 80079c2:	3c01      	subs	r4, #1
 80079c4:	f101 0814 	add.w	r8, r1, #20
 80079c8:	00a3      	lsls	r3, r4, #2
 80079ca:	f100 0514 	add.w	r5, r0, #20
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079d4:	9301      	str	r3, [sp, #4]
 80079d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80079da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079de:	3301      	adds	r3, #1
 80079e0:	429a      	cmp	r2, r3
 80079e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80079ea:	d32e      	bcc.n	8007a4a <quorem+0x96>
 80079ec:	f04f 0a00 	mov.w	sl, #0
 80079f0:	46c4      	mov	ip, r8
 80079f2:	46ae      	mov	lr, r5
 80079f4:	46d3      	mov	fp, sl
 80079f6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80079fa:	b298      	uxth	r0, r3
 80079fc:	fb06 a000 	mla	r0, r6, r0, sl
 8007a00:	0c02      	lsrs	r2, r0, #16
 8007a02:	0c1b      	lsrs	r3, r3, #16
 8007a04:	fb06 2303 	mla	r3, r6, r3, r2
 8007a08:	f8de 2000 	ldr.w	r2, [lr]
 8007a0c:	b280      	uxth	r0, r0
 8007a0e:	b292      	uxth	r2, r2
 8007a10:	1a12      	subs	r2, r2, r0
 8007a12:	445a      	add	r2, fp
 8007a14:	f8de 0000 	ldr.w	r0, [lr]
 8007a18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007a22:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007a26:	b292      	uxth	r2, r2
 8007a28:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007a2c:	45e1      	cmp	r9, ip
 8007a2e:	f84e 2b04 	str.w	r2, [lr], #4
 8007a32:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007a36:	d2de      	bcs.n	80079f6 <quorem+0x42>
 8007a38:	9b00      	ldr	r3, [sp, #0]
 8007a3a:	58eb      	ldr	r3, [r5, r3]
 8007a3c:	b92b      	cbnz	r3, 8007a4a <quorem+0x96>
 8007a3e:	9b01      	ldr	r3, [sp, #4]
 8007a40:	3b04      	subs	r3, #4
 8007a42:	429d      	cmp	r5, r3
 8007a44:	461a      	mov	r2, r3
 8007a46:	d32f      	bcc.n	8007aa8 <quorem+0xf4>
 8007a48:	613c      	str	r4, [r7, #16]
 8007a4a:	4638      	mov	r0, r7
 8007a4c:	f001 f9c4 	bl	8008dd8 <__mcmp>
 8007a50:	2800      	cmp	r0, #0
 8007a52:	db25      	blt.n	8007aa0 <quorem+0xec>
 8007a54:	4629      	mov	r1, r5
 8007a56:	2000      	movs	r0, #0
 8007a58:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a5c:	f8d1 c000 	ldr.w	ip, [r1]
 8007a60:	fa1f fe82 	uxth.w	lr, r2
 8007a64:	fa1f f38c 	uxth.w	r3, ip
 8007a68:	eba3 030e 	sub.w	r3, r3, lr
 8007a6c:	4403      	add	r3, r0
 8007a6e:	0c12      	lsrs	r2, r2, #16
 8007a70:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007a74:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a7e:	45c1      	cmp	r9, r8
 8007a80:	f841 3b04 	str.w	r3, [r1], #4
 8007a84:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a88:	d2e6      	bcs.n	8007a58 <quorem+0xa4>
 8007a8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a92:	b922      	cbnz	r2, 8007a9e <quorem+0xea>
 8007a94:	3b04      	subs	r3, #4
 8007a96:	429d      	cmp	r5, r3
 8007a98:	461a      	mov	r2, r3
 8007a9a:	d30b      	bcc.n	8007ab4 <quorem+0x100>
 8007a9c:	613c      	str	r4, [r7, #16]
 8007a9e:	3601      	adds	r6, #1
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	b003      	add	sp, #12
 8007aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa8:	6812      	ldr	r2, [r2, #0]
 8007aaa:	3b04      	subs	r3, #4
 8007aac:	2a00      	cmp	r2, #0
 8007aae:	d1cb      	bne.n	8007a48 <quorem+0x94>
 8007ab0:	3c01      	subs	r4, #1
 8007ab2:	e7c6      	b.n	8007a42 <quorem+0x8e>
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	3b04      	subs	r3, #4
 8007ab8:	2a00      	cmp	r2, #0
 8007aba:	d1ef      	bne.n	8007a9c <quorem+0xe8>
 8007abc:	3c01      	subs	r4, #1
 8007abe:	e7ea      	b.n	8007a96 <quorem+0xe2>
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	e7ee      	b.n	8007aa2 <quorem+0xee>
 8007ac4:	0000      	movs	r0, r0
	...

08007ac8 <_dtoa_r>:
 8007ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	69c7      	ldr	r7, [r0, #28]
 8007ace:	b099      	sub	sp, #100	@ 0x64
 8007ad0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007ad4:	ec55 4b10 	vmov	r4, r5, d0
 8007ad8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007ada:	9109      	str	r1, [sp, #36]	@ 0x24
 8007adc:	4683      	mov	fp, r0
 8007ade:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ae0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ae2:	b97f      	cbnz	r7, 8007b04 <_dtoa_r+0x3c>
 8007ae4:	2010      	movs	r0, #16
 8007ae6:	f000 fdfd 	bl	80086e4 <malloc>
 8007aea:	4602      	mov	r2, r0
 8007aec:	f8cb 001c 	str.w	r0, [fp, #28]
 8007af0:	b920      	cbnz	r0, 8007afc <_dtoa_r+0x34>
 8007af2:	4ba7      	ldr	r3, [pc, #668]	@ (8007d90 <_dtoa_r+0x2c8>)
 8007af4:	21ef      	movs	r1, #239	@ 0xef
 8007af6:	48a7      	ldr	r0, [pc, #668]	@ (8007d94 <_dtoa_r+0x2cc>)
 8007af8:	f002 fe32 	bl	800a760 <__assert_func>
 8007afc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007b00:	6007      	str	r7, [r0, #0]
 8007b02:	60c7      	str	r7, [r0, #12]
 8007b04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	b159      	cbz	r1, 8007b24 <_dtoa_r+0x5c>
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	604a      	str	r2, [r1, #4]
 8007b10:	2301      	movs	r3, #1
 8007b12:	4093      	lsls	r3, r2
 8007b14:	608b      	str	r3, [r1, #8]
 8007b16:	4658      	mov	r0, fp
 8007b18:	f000 feda 	bl	80088d0 <_Bfree>
 8007b1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007b20:	2200      	movs	r2, #0
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	1e2b      	subs	r3, r5, #0
 8007b26:	bfb9      	ittee	lt
 8007b28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007b2c:	9303      	strlt	r3, [sp, #12]
 8007b2e:	2300      	movge	r3, #0
 8007b30:	6033      	strge	r3, [r6, #0]
 8007b32:	9f03      	ldr	r7, [sp, #12]
 8007b34:	4b98      	ldr	r3, [pc, #608]	@ (8007d98 <_dtoa_r+0x2d0>)
 8007b36:	bfbc      	itt	lt
 8007b38:	2201      	movlt	r2, #1
 8007b3a:	6032      	strlt	r2, [r6, #0]
 8007b3c:	43bb      	bics	r3, r7
 8007b3e:	d112      	bne.n	8007b66 <_dtoa_r+0x9e>
 8007b40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007b4c:	4323      	orrs	r3, r4
 8007b4e:	f000 854d 	beq.w	80085ec <_dtoa_r+0xb24>
 8007b52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007dac <_dtoa_r+0x2e4>
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 854f 	beq.w	80085fc <_dtoa_r+0xb34>
 8007b5e:	f10a 0303 	add.w	r3, sl, #3
 8007b62:	f000 bd49 	b.w	80085f8 <_dtoa_r+0xb30>
 8007b66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	ec51 0b17 	vmov	r0, r1, d7
 8007b70:	2300      	movs	r3, #0
 8007b72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007b76:	f7f8 ffbf 	bl	8000af8 <__aeabi_dcmpeq>
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	b158      	cbz	r0, 8007b96 <_dtoa_r+0xce>
 8007b7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b80:	2301      	movs	r3, #1
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007b86:	b113      	cbz	r3, 8007b8e <_dtoa_r+0xc6>
 8007b88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007b8a:	4b84      	ldr	r3, [pc, #528]	@ (8007d9c <_dtoa_r+0x2d4>)
 8007b8c:	6013      	str	r3, [r2, #0]
 8007b8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007db0 <_dtoa_r+0x2e8>
 8007b92:	f000 bd33 	b.w	80085fc <_dtoa_r+0xb34>
 8007b96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007b9a:	aa16      	add	r2, sp, #88	@ 0x58
 8007b9c:	a917      	add	r1, sp, #92	@ 0x5c
 8007b9e:	4658      	mov	r0, fp
 8007ba0:	f001 fa3a 	bl	8009018 <__d2b>
 8007ba4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ba8:	4681      	mov	r9, r0
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	d077      	beq.n	8007c9e <_dtoa_r+0x1d6>
 8007bae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007bb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007bb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007bbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007bc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007bc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007bc8:	4619      	mov	r1, r3
 8007bca:	2200      	movs	r2, #0
 8007bcc:	4b74      	ldr	r3, [pc, #464]	@ (8007da0 <_dtoa_r+0x2d8>)
 8007bce:	f7f8 fb73 	bl	80002b8 <__aeabi_dsub>
 8007bd2:	a369      	add	r3, pc, #420	@ (adr r3, 8007d78 <_dtoa_r+0x2b0>)
 8007bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd8:	f7f8 fd26 	bl	8000628 <__aeabi_dmul>
 8007bdc:	a368      	add	r3, pc, #416	@ (adr r3, 8007d80 <_dtoa_r+0x2b8>)
 8007bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be2:	f7f8 fb6b 	bl	80002bc <__adddf3>
 8007be6:	4604      	mov	r4, r0
 8007be8:	4630      	mov	r0, r6
 8007bea:	460d      	mov	r5, r1
 8007bec:	f7f8 fcb2 	bl	8000554 <__aeabi_i2d>
 8007bf0:	a365      	add	r3, pc, #404	@ (adr r3, 8007d88 <_dtoa_r+0x2c0>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fd17 	bl	8000628 <__aeabi_dmul>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4620      	mov	r0, r4
 8007c00:	4629      	mov	r1, r5
 8007c02:	f7f8 fb5b 	bl	80002bc <__adddf3>
 8007c06:	4604      	mov	r4, r0
 8007c08:	460d      	mov	r5, r1
 8007c0a:	f7f8 ffbd 	bl	8000b88 <__aeabi_d2iz>
 8007c0e:	2200      	movs	r2, #0
 8007c10:	4607      	mov	r7, r0
 8007c12:	2300      	movs	r3, #0
 8007c14:	4620      	mov	r0, r4
 8007c16:	4629      	mov	r1, r5
 8007c18:	f7f8 ff78 	bl	8000b0c <__aeabi_dcmplt>
 8007c1c:	b140      	cbz	r0, 8007c30 <_dtoa_r+0x168>
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7f8 fc98 	bl	8000554 <__aeabi_i2d>
 8007c24:	4622      	mov	r2, r4
 8007c26:	462b      	mov	r3, r5
 8007c28:	f7f8 ff66 	bl	8000af8 <__aeabi_dcmpeq>
 8007c2c:	b900      	cbnz	r0, 8007c30 <_dtoa_r+0x168>
 8007c2e:	3f01      	subs	r7, #1
 8007c30:	2f16      	cmp	r7, #22
 8007c32:	d851      	bhi.n	8007cd8 <_dtoa_r+0x210>
 8007c34:	4b5b      	ldr	r3, [pc, #364]	@ (8007da4 <_dtoa_r+0x2dc>)
 8007c36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c42:	f7f8 ff63 	bl	8000b0c <__aeabi_dcmplt>
 8007c46:	2800      	cmp	r0, #0
 8007c48:	d048      	beq.n	8007cdc <_dtoa_r+0x214>
 8007c4a:	3f01      	subs	r7, #1
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007c50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c52:	1b9b      	subs	r3, r3, r6
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	bf44      	itt	mi
 8007c58:	f1c3 0801 	rsbmi	r8, r3, #1
 8007c5c:	2300      	movmi	r3, #0
 8007c5e:	9208      	str	r2, [sp, #32]
 8007c60:	bf54      	ite	pl
 8007c62:	f04f 0800 	movpl.w	r8, #0
 8007c66:	9308      	strmi	r3, [sp, #32]
 8007c68:	2f00      	cmp	r7, #0
 8007c6a:	db39      	blt.n	8007ce0 <_dtoa_r+0x218>
 8007c6c:	9b08      	ldr	r3, [sp, #32]
 8007c6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007c70:	443b      	add	r3, r7
 8007c72:	9308      	str	r3, [sp, #32]
 8007c74:	2300      	movs	r3, #0
 8007c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c7a:	2b09      	cmp	r3, #9
 8007c7c:	d864      	bhi.n	8007d48 <_dtoa_r+0x280>
 8007c7e:	2b05      	cmp	r3, #5
 8007c80:	bfc4      	itt	gt
 8007c82:	3b04      	subgt	r3, #4
 8007c84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c88:	f1a3 0302 	sub.w	r3, r3, #2
 8007c8c:	bfcc      	ite	gt
 8007c8e:	2400      	movgt	r4, #0
 8007c90:	2401      	movle	r4, #1
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	d863      	bhi.n	8007d5e <_dtoa_r+0x296>
 8007c96:	e8df f003 	tbb	[pc, r3]
 8007c9a:	372a      	.short	0x372a
 8007c9c:	5535      	.short	0x5535
 8007c9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ca2:	441e      	add	r6, r3
 8007ca4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ca8:	2b20      	cmp	r3, #32
 8007caa:	bfc1      	itttt	gt
 8007cac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007cb0:	409f      	lslgt	r7, r3
 8007cb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007cb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007cba:	bfd6      	itet	le
 8007cbc:	f1c3 0320 	rsble	r3, r3, #32
 8007cc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007cc4:	fa04 f003 	lslle.w	r0, r4, r3
 8007cc8:	f7f8 fc34 	bl	8000534 <__aeabi_ui2d>
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007cd2:	3e01      	subs	r6, #1
 8007cd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007cd6:	e777      	b.n	8007bc8 <_dtoa_r+0x100>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7b8      	b.n	8007c4e <_dtoa_r+0x186>
 8007cdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007cde:	e7b7      	b.n	8007c50 <_dtoa_r+0x188>
 8007ce0:	427b      	negs	r3, r7
 8007ce2:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	eba8 0807 	sub.w	r8, r8, r7
 8007cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007cec:	e7c4      	b.n	8007c78 <_dtoa_r+0x1b0>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	dc35      	bgt.n	8007d64 <_dtoa_r+0x29c>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	9300      	str	r3, [sp, #0]
 8007cfc:	9307      	str	r3, [sp, #28]
 8007cfe:	461a      	mov	r2, r3
 8007d00:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d02:	e00b      	b.n	8007d1c <_dtoa_r+0x254>
 8007d04:	2301      	movs	r3, #1
 8007d06:	e7f3      	b.n	8007cf0 <_dtoa_r+0x228>
 8007d08:	2300      	movs	r3, #0
 8007d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0e:	18fb      	adds	r3, r7, r3
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	9307      	str	r3, [sp, #28]
 8007d18:	bfb8      	it	lt
 8007d1a:	2301      	movlt	r3, #1
 8007d1c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007d20:	2100      	movs	r1, #0
 8007d22:	2204      	movs	r2, #4
 8007d24:	f102 0514 	add.w	r5, r2, #20
 8007d28:	429d      	cmp	r5, r3
 8007d2a:	d91f      	bls.n	8007d6c <_dtoa_r+0x2a4>
 8007d2c:	6041      	str	r1, [r0, #4]
 8007d2e:	4658      	mov	r0, fp
 8007d30:	f000 fd8e 	bl	8008850 <_Balloc>
 8007d34:	4682      	mov	sl, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d13c      	bne.n	8007db4 <_dtoa_r+0x2ec>
 8007d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007da8 <_dtoa_r+0x2e0>)
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007d42:	e6d8      	b.n	8007af6 <_dtoa_r+0x2e>
 8007d44:	2301      	movs	r3, #1
 8007d46:	e7e0      	b.n	8007d0a <_dtoa_r+0x242>
 8007d48:	2401      	movs	r4, #1
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	9307      	str	r3, [sp, #28]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2312      	movs	r3, #18
 8007d5c:	e7d0      	b.n	8007d00 <_dtoa_r+0x238>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d62:	e7f5      	b.n	8007d50 <_dtoa_r+0x288>
 8007d64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d66:	9300      	str	r3, [sp, #0]
 8007d68:	9307      	str	r3, [sp, #28]
 8007d6a:	e7d7      	b.n	8007d1c <_dtoa_r+0x254>
 8007d6c:	3101      	adds	r1, #1
 8007d6e:	0052      	lsls	r2, r2, #1
 8007d70:	e7d8      	b.n	8007d24 <_dtoa_r+0x25c>
 8007d72:	bf00      	nop
 8007d74:	f3af 8000 	nop.w
 8007d78:	636f4361 	.word	0x636f4361
 8007d7c:	3fd287a7 	.word	0x3fd287a7
 8007d80:	8b60c8b3 	.word	0x8b60c8b3
 8007d84:	3fc68a28 	.word	0x3fc68a28
 8007d88:	509f79fb 	.word	0x509f79fb
 8007d8c:	3fd34413 	.word	0x3fd34413
 8007d90:	0800ba13 	.word	0x0800ba13
 8007d94:	0800ba2a 	.word	0x0800ba2a
 8007d98:	7ff00000 	.word	0x7ff00000
 8007d9c:	0800b9de 	.word	0x0800b9de
 8007da0:	3ff80000 	.word	0x3ff80000
 8007da4:	0800bb20 	.word	0x0800bb20
 8007da8:	0800ba82 	.word	0x0800ba82
 8007dac:	0800ba0f 	.word	0x0800ba0f
 8007db0:	0800b9dd 	.word	0x0800b9dd
 8007db4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007db8:	6018      	str	r0, [r3, #0]
 8007dba:	9b07      	ldr	r3, [sp, #28]
 8007dbc:	2b0e      	cmp	r3, #14
 8007dbe:	f200 80a4 	bhi.w	8007f0a <_dtoa_r+0x442>
 8007dc2:	2c00      	cmp	r4, #0
 8007dc4:	f000 80a1 	beq.w	8007f0a <_dtoa_r+0x442>
 8007dc8:	2f00      	cmp	r7, #0
 8007dca:	dd33      	ble.n	8007e34 <_dtoa_r+0x36c>
 8007dcc:	4bad      	ldr	r3, [pc, #692]	@ (8008084 <_dtoa_r+0x5bc>)
 8007dce:	f007 020f 	and.w	r2, r7, #15
 8007dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd6:	ed93 7b00 	vldr	d7, [r3]
 8007dda:	05f8      	lsls	r0, r7, #23
 8007ddc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007de0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007de4:	d516      	bpl.n	8007e14 <_dtoa_r+0x34c>
 8007de6:	4ba8      	ldr	r3, [pc, #672]	@ (8008088 <_dtoa_r+0x5c0>)
 8007de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007dec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007df0:	f7f8 fd44 	bl	800087c <__aeabi_ddiv>
 8007df4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df8:	f004 040f 	and.w	r4, r4, #15
 8007dfc:	2603      	movs	r6, #3
 8007dfe:	4da2      	ldr	r5, [pc, #648]	@ (8008088 <_dtoa_r+0x5c0>)
 8007e00:	b954      	cbnz	r4, 8007e18 <_dtoa_r+0x350>
 8007e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e0a:	f7f8 fd37 	bl	800087c <__aeabi_ddiv>
 8007e0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e12:	e028      	b.n	8007e66 <_dtoa_r+0x39e>
 8007e14:	2602      	movs	r6, #2
 8007e16:	e7f2      	b.n	8007dfe <_dtoa_r+0x336>
 8007e18:	07e1      	lsls	r1, r4, #31
 8007e1a:	d508      	bpl.n	8007e2e <_dtoa_r+0x366>
 8007e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e24:	f7f8 fc00 	bl	8000628 <__aeabi_dmul>
 8007e28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e2c:	3601      	adds	r6, #1
 8007e2e:	1064      	asrs	r4, r4, #1
 8007e30:	3508      	adds	r5, #8
 8007e32:	e7e5      	b.n	8007e00 <_dtoa_r+0x338>
 8007e34:	f000 80d2 	beq.w	8007fdc <_dtoa_r+0x514>
 8007e38:	427c      	negs	r4, r7
 8007e3a:	4b92      	ldr	r3, [pc, #584]	@ (8008084 <_dtoa_r+0x5bc>)
 8007e3c:	4d92      	ldr	r5, [pc, #584]	@ (8008088 <_dtoa_r+0x5c0>)
 8007e3e:	f004 020f 	and.w	r2, r4, #15
 8007e42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e4e:	f7f8 fbeb 	bl	8000628 <__aeabi_dmul>
 8007e52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e56:	1124      	asrs	r4, r4, #4
 8007e58:	2300      	movs	r3, #0
 8007e5a:	2602      	movs	r6, #2
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	f040 80b2 	bne.w	8007fc6 <_dtoa_r+0x4fe>
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1d3      	bne.n	8007e0e <_dtoa_r+0x346>
 8007e66:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007e68:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80b7 	beq.w	8007fe0 <_dtoa_r+0x518>
 8007e72:	4b86      	ldr	r3, [pc, #536]	@ (800808c <_dtoa_r+0x5c4>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	f7f8 fe47 	bl	8000b0c <__aeabi_dcmplt>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	f000 80ae 	beq.w	8007fe0 <_dtoa_r+0x518>
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 80aa 	beq.w	8007fe0 <_dtoa_r+0x518>
 8007e8c:	9b00      	ldr	r3, [sp, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	dd37      	ble.n	8007f02 <_dtoa_r+0x43a>
 8007e92:	1e7b      	subs	r3, r7, #1
 8007e94:	9304      	str	r3, [sp, #16]
 8007e96:	4620      	mov	r0, r4
 8007e98:	4b7d      	ldr	r3, [pc, #500]	@ (8008090 <_dtoa_r+0x5c8>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	4629      	mov	r1, r5
 8007e9e:	f7f8 fbc3 	bl	8000628 <__aeabi_dmul>
 8007ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea6:	9c00      	ldr	r4, [sp, #0]
 8007ea8:	3601      	adds	r6, #1
 8007eaa:	4630      	mov	r0, r6
 8007eac:	f7f8 fb52 	bl	8000554 <__aeabi_i2d>
 8007eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007eb4:	f7f8 fbb8 	bl	8000628 <__aeabi_dmul>
 8007eb8:	4b76      	ldr	r3, [pc, #472]	@ (8008094 <_dtoa_r+0x5cc>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f7f8 f9fe 	bl	80002bc <__adddf3>
 8007ec0:	4605      	mov	r5, r0
 8007ec2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ec6:	2c00      	cmp	r4, #0
 8007ec8:	f040 808d 	bne.w	8007fe6 <_dtoa_r+0x51e>
 8007ecc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed0:	4b71      	ldr	r3, [pc, #452]	@ (8008098 <_dtoa_r+0x5d0>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f7f8 f9f0 	bl	80002b8 <__aeabi_dsub>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ee0:	462a      	mov	r2, r5
 8007ee2:	4633      	mov	r3, r6
 8007ee4:	f7f8 fe30 	bl	8000b48 <__aeabi_dcmpgt>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	f040 828b 	bne.w	8008404 <_dtoa_r+0x93c>
 8007eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ef2:	462a      	mov	r2, r5
 8007ef4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007ef8:	f7f8 fe08 	bl	8000b0c <__aeabi_dcmplt>
 8007efc:	2800      	cmp	r0, #0
 8007efe:	f040 8128 	bne.w	8008152 <_dtoa_r+0x68a>
 8007f02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007f06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f2c0 815a 	blt.w	80081c6 <_dtoa_r+0x6fe>
 8007f12:	2f0e      	cmp	r7, #14
 8007f14:	f300 8157 	bgt.w	80081c6 <_dtoa_r+0x6fe>
 8007f18:	4b5a      	ldr	r3, [pc, #360]	@ (8008084 <_dtoa_r+0x5bc>)
 8007f1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f1e:	ed93 7b00 	vldr	d7, [r3]
 8007f22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	ed8d 7b00 	vstr	d7, [sp]
 8007f2a:	da03      	bge.n	8007f34 <_dtoa_r+0x46c>
 8007f2c:	9b07      	ldr	r3, [sp, #28]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f340 8101 	ble.w	8008136 <_dtoa_r+0x66e>
 8007f34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007f38:	4656      	mov	r6, sl
 8007f3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f3e:	4620      	mov	r0, r4
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fc9b 	bl	800087c <__aeabi_ddiv>
 8007f46:	f7f8 fe1f 	bl	8000b88 <__aeabi_d2iz>
 8007f4a:	4680      	mov	r8, r0
 8007f4c:	f7f8 fb02 	bl	8000554 <__aeabi_i2d>
 8007f50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f54:	f7f8 fb68 	bl	8000628 <__aeabi_dmul>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	4629      	mov	r1, r5
 8007f60:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f64:	f7f8 f9a8 	bl	80002b8 <__aeabi_dsub>
 8007f68:	f806 4b01 	strb.w	r4, [r6], #1
 8007f6c:	9d07      	ldr	r5, [sp, #28]
 8007f6e:	eba6 040a 	sub.w	r4, r6, sl
 8007f72:	42a5      	cmp	r5, r4
 8007f74:	4602      	mov	r2, r0
 8007f76:	460b      	mov	r3, r1
 8007f78:	f040 8117 	bne.w	80081aa <_dtoa_r+0x6e2>
 8007f7c:	f7f8 f99e 	bl	80002bc <__adddf3>
 8007f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f84:	4604      	mov	r4, r0
 8007f86:	460d      	mov	r5, r1
 8007f88:	f7f8 fdde 	bl	8000b48 <__aeabi_dcmpgt>
 8007f8c:	2800      	cmp	r0, #0
 8007f8e:	f040 80f9 	bne.w	8008184 <_dtoa_r+0x6bc>
 8007f92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f96:	4620      	mov	r0, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	f7f8 fdad 	bl	8000af8 <__aeabi_dcmpeq>
 8007f9e:	b118      	cbz	r0, 8007fa8 <_dtoa_r+0x4e0>
 8007fa0:	f018 0f01 	tst.w	r8, #1
 8007fa4:	f040 80ee 	bne.w	8008184 <_dtoa_r+0x6bc>
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4658      	mov	r0, fp
 8007fac:	f000 fc90 	bl	80088d0 <_Bfree>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	7033      	strb	r3, [r6, #0]
 8007fb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007fb6:	3701      	adds	r7, #1
 8007fb8:	601f      	str	r7, [r3, #0]
 8007fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f000 831d 	beq.w	80085fc <_dtoa_r+0xb34>
 8007fc2:	601e      	str	r6, [r3, #0]
 8007fc4:	e31a      	b.n	80085fc <_dtoa_r+0xb34>
 8007fc6:	07e2      	lsls	r2, r4, #31
 8007fc8:	d505      	bpl.n	8007fd6 <_dtoa_r+0x50e>
 8007fca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007fce:	f7f8 fb2b 	bl	8000628 <__aeabi_dmul>
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	1064      	asrs	r4, r4, #1
 8007fd8:	3508      	adds	r5, #8
 8007fda:	e73f      	b.n	8007e5c <_dtoa_r+0x394>
 8007fdc:	2602      	movs	r6, #2
 8007fde:	e742      	b.n	8007e66 <_dtoa_r+0x39e>
 8007fe0:	9c07      	ldr	r4, [sp, #28]
 8007fe2:	9704      	str	r7, [sp, #16]
 8007fe4:	e761      	b.n	8007eaa <_dtoa_r+0x3e2>
 8007fe6:	4b27      	ldr	r3, [pc, #156]	@ (8008084 <_dtoa_r+0x5bc>)
 8007fe8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007fee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ff2:	4454      	add	r4, sl
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	d053      	beq.n	80080a0 <_dtoa_r+0x5d8>
 8007ff8:	4928      	ldr	r1, [pc, #160]	@ (800809c <_dtoa_r+0x5d4>)
 8007ffa:	2000      	movs	r0, #0
 8007ffc:	f7f8 fc3e 	bl	800087c <__aeabi_ddiv>
 8008000:	4633      	mov	r3, r6
 8008002:	462a      	mov	r2, r5
 8008004:	f7f8 f958 	bl	80002b8 <__aeabi_dsub>
 8008008:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800800c:	4656      	mov	r6, sl
 800800e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008012:	f7f8 fdb9 	bl	8000b88 <__aeabi_d2iz>
 8008016:	4605      	mov	r5, r0
 8008018:	f7f8 fa9c 	bl	8000554 <__aeabi_i2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008024:	f7f8 f948 	bl	80002b8 <__aeabi_dsub>
 8008028:	3530      	adds	r5, #48	@ 0x30
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008032:	f806 5b01 	strb.w	r5, [r6], #1
 8008036:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800803a:	f7f8 fd67 	bl	8000b0c <__aeabi_dcmplt>
 800803e:	2800      	cmp	r0, #0
 8008040:	d171      	bne.n	8008126 <_dtoa_r+0x65e>
 8008042:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008046:	4911      	ldr	r1, [pc, #68]	@ (800808c <_dtoa_r+0x5c4>)
 8008048:	2000      	movs	r0, #0
 800804a:	f7f8 f935 	bl	80002b8 <__aeabi_dsub>
 800804e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008052:	f7f8 fd5b 	bl	8000b0c <__aeabi_dcmplt>
 8008056:	2800      	cmp	r0, #0
 8008058:	f040 8095 	bne.w	8008186 <_dtoa_r+0x6be>
 800805c:	42a6      	cmp	r6, r4
 800805e:	f43f af50 	beq.w	8007f02 <_dtoa_r+0x43a>
 8008062:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008066:	4b0a      	ldr	r3, [pc, #40]	@ (8008090 <_dtoa_r+0x5c8>)
 8008068:	2200      	movs	r2, #0
 800806a:	f7f8 fadd 	bl	8000628 <__aeabi_dmul>
 800806e:	4b08      	ldr	r3, [pc, #32]	@ (8008090 <_dtoa_r+0x5c8>)
 8008070:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008074:	2200      	movs	r2, #0
 8008076:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800807a:	f7f8 fad5 	bl	8000628 <__aeabi_dmul>
 800807e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008082:	e7c4      	b.n	800800e <_dtoa_r+0x546>
 8008084:	0800bb20 	.word	0x0800bb20
 8008088:	0800baf8 	.word	0x0800baf8
 800808c:	3ff00000 	.word	0x3ff00000
 8008090:	40240000 	.word	0x40240000
 8008094:	401c0000 	.word	0x401c0000
 8008098:	40140000 	.word	0x40140000
 800809c:	3fe00000 	.word	0x3fe00000
 80080a0:	4631      	mov	r1, r6
 80080a2:	4628      	mov	r0, r5
 80080a4:	f7f8 fac0 	bl	8000628 <__aeabi_dmul>
 80080a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80080ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80080ae:	4656      	mov	r6, sl
 80080b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080b4:	f7f8 fd68 	bl	8000b88 <__aeabi_d2iz>
 80080b8:	4605      	mov	r5, r0
 80080ba:	f7f8 fa4b 	bl	8000554 <__aeabi_i2d>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080c6:	f7f8 f8f7 	bl	80002b8 <__aeabi_dsub>
 80080ca:	3530      	adds	r5, #48	@ 0x30
 80080cc:	f806 5b01 	strb.w	r5, [r6], #1
 80080d0:	4602      	mov	r2, r0
 80080d2:	460b      	mov	r3, r1
 80080d4:	42a6      	cmp	r6, r4
 80080d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80080da:	f04f 0200 	mov.w	r2, #0
 80080de:	d124      	bne.n	800812a <_dtoa_r+0x662>
 80080e0:	4bac      	ldr	r3, [pc, #688]	@ (8008394 <_dtoa_r+0x8cc>)
 80080e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80080e6:	f7f8 f8e9 	bl	80002bc <__adddf3>
 80080ea:	4602      	mov	r2, r0
 80080ec:	460b      	mov	r3, r1
 80080ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f2:	f7f8 fd29 	bl	8000b48 <__aeabi_dcmpgt>
 80080f6:	2800      	cmp	r0, #0
 80080f8:	d145      	bne.n	8008186 <_dtoa_r+0x6be>
 80080fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80080fe:	49a5      	ldr	r1, [pc, #660]	@ (8008394 <_dtoa_r+0x8cc>)
 8008100:	2000      	movs	r0, #0
 8008102:	f7f8 f8d9 	bl	80002b8 <__aeabi_dsub>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800810e:	f7f8 fcfd 	bl	8000b0c <__aeabi_dcmplt>
 8008112:	2800      	cmp	r0, #0
 8008114:	f43f aef5 	beq.w	8007f02 <_dtoa_r+0x43a>
 8008118:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800811a:	1e73      	subs	r3, r6, #1
 800811c:	9315      	str	r3, [sp, #84]	@ 0x54
 800811e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008122:	2b30      	cmp	r3, #48	@ 0x30
 8008124:	d0f8      	beq.n	8008118 <_dtoa_r+0x650>
 8008126:	9f04      	ldr	r7, [sp, #16]
 8008128:	e73e      	b.n	8007fa8 <_dtoa_r+0x4e0>
 800812a:	4b9b      	ldr	r3, [pc, #620]	@ (8008398 <_dtoa_r+0x8d0>)
 800812c:	f7f8 fa7c 	bl	8000628 <__aeabi_dmul>
 8008130:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008134:	e7bc      	b.n	80080b0 <_dtoa_r+0x5e8>
 8008136:	d10c      	bne.n	8008152 <_dtoa_r+0x68a>
 8008138:	4b98      	ldr	r3, [pc, #608]	@ (800839c <_dtoa_r+0x8d4>)
 800813a:	2200      	movs	r2, #0
 800813c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008140:	f7f8 fa72 	bl	8000628 <__aeabi_dmul>
 8008144:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008148:	f7f8 fcf4 	bl	8000b34 <__aeabi_dcmpge>
 800814c:	2800      	cmp	r0, #0
 800814e:	f000 8157 	beq.w	8008400 <_dtoa_r+0x938>
 8008152:	2400      	movs	r4, #0
 8008154:	4625      	mov	r5, r4
 8008156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008158:	43db      	mvns	r3, r3
 800815a:	9304      	str	r3, [sp, #16]
 800815c:	4656      	mov	r6, sl
 800815e:	2700      	movs	r7, #0
 8008160:	4621      	mov	r1, r4
 8008162:	4658      	mov	r0, fp
 8008164:	f000 fbb4 	bl	80088d0 <_Bfree>
 8008168:	2d00      	cmp	r5, #0
 800816a:	d0dc      	beq.n	8008126 <_dtoa_r+0x65e>
 800816c:	b12f      	cbz	r7, 800817a <_dtoa_r+0x6b2>
 800816e:	42af      	cmp	r7, r5
 8008170:	d003      	beq.n	800817a <_dtoa_r+0x6b2>
 8008172:	4639      	mov	r1, r7
 8008174:	4658      	mov	r0, fp
 8008176:	f000 fbab 	bl	80088d0 <_Bfree>
 800817a:	4629      	mov	r1, r5
 800817c:	4658      	mov	r0, fp
 800817e:	f000 fba7 	bl	80088d0 <_Bfree>
 8008182:	e7d0      	b.n	8008126 <_dtoa_r+0x65e>
 8008184:	9704      	str	r7, [sp, #16]
 8008186:	4633      	mov	r3, r6
 8008188:	461e      	mov	r6, r3
 800818a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800818e:	2a39      	cmp	r2, #57	@ 0x39
 8008190:	d107      	bne.n	80081a2 <_dtoa_r+0x6da>
 8008192:	459a      	cmp	sl, r3
 8008194:	d1f8      	bne.n	8008188 <_dtoa_r+0x6c0>
 8008196:	9a04      	ldr	r2, [sp, #16]
 8008198:	3201      	adds	r2, #1
 800819a:	9204      	str	r2, [sp, #16]
 800819c:	2230      	movs	r2, #48	@ 0x30
 800819e:	f88a 2000 	strb.w	r2, [sl]
 80081a2:	781a      	ldrb	r2, [r3, #0]
 80081a4:	3201      	adds	r2, #1
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e7bd      	b.n	8008126 <_dtoa_r+0x65e>
 80081aa:	4b7b      	ldr	r3, [pc, #492]	@ (8008398 <_dtoa_r+0x8d0>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	f7f8 fa3b 	bl	8000628 <__aeabi_dmul>
 80081b2:	2200      	movs	r2, #0
 80081b4:	2300      	movs	r3, #0
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	f7f8 fc9d 	bl	8000af8 <__aeabi_dcmpeq>
 80081be:	2800      	cmp	r0, #0
 80081c0:	f43f aebb 	beq.w	8007f3a <_dtoa_r+0x472>
 80081c4:	e6f0      	b.n	8007fa8 <_dtoa_r+0x4e0>
 80081c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80081c8:	2a00      	cmp	r2, #0
 80081ca:	f000 80db 	beq.w	8008384 <_dtoa_r+0x8bc>
 80081ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081d0:	2a01      	cmp	r2, #1
 80081d2:	f300 80bf 	bgt.w	8008354 <_dtoa_r+0x88c>
 80081d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80081d8:	2a00      	cmp	r2, #0
 80081da:	f000 80b7 	beq.w	800834c <_dtoa_r+0x884>
 80081de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80081e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081e4:	4646      	mov	r6, r8
 80081e6:	9a08      	ldr	r2, [sp, #32]
 80081e8:	2101      	movs	r1, #1
 80081ea:	441a      	add	r2, r3
 80081ec:	4658      	mov	r0, fp
 80081ee:	4498      	add	r8, r3
 80081f0:	9208      	str	r2, [sp, #32]
 80081f2:	f000 fc6b 	bl	8008acc <__i2b>
 80081f6:	4605      	mov	r5, r0
 80081f8:	b15e      	cbz	r6, 8008212 <_dtoa_r+0x74a>
 80081fa:	9b08      	ldr	r3, [sp, #32]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	dd08      	ble.n	8008212 <_dtoa_r+0x74a>
 8008200:	42b3      	cmp	r3, r6
 8008202:	9a08      	ldr	r2, [sp, #32]
 8008204:	bfa8      	it	ge
 8008206:	4633      	movge	r3, r6
 8008208:	eba8 0803 	sub.w	r8, r8, r3
 800820c:	1af6      	subs	r6, r6, r3
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	9308      	str	r3, [sp, #32]
 8008212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008214:	b1f3      	cbz	r3, 8008254 <_dtoa_r+0x78c>
 8008216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 80b7 	beq.w	800838c <_dtoa_r+0x8c4>
 800821e:	b18c      	cbz	r4, 8008244 <_dtoa_r+0x77c>
 8008220:	4629      	mov	r1, r5
 8008222:	4622      	mov	r2, r4
 8008224:	4658      	mov	r0, fp
 8008226:	f000 fd11 	bl	8008c4c <__pow5mult>
 800822a:	464a      	mov	r2, r9
 800822c:	4601      	mov	r1, r0
 800822e:	4605      	mov	r5, r0
 8008230:	4658      	mov	r0, fp
 8008232:	f000 fc61 	bl	8008af8 <__multiply>
 8008236:	4649      	mov	r1, r9
 8008238:	9004      	str	r0, [sp, #16]
 800823a:	4658      	mov	r0, fp
 800823c:	f000 fb48 	bl	80088d0 <_Bfree>
 8008240:	9b04      	ldr	r3, [sp, #16]
 8008242:	4699      	mov	r9, r3
 8008244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008246:	1b1a      	subs	r2, r3, r4
 8008248:	d004      	beq.n	8008254 <_dtoa_r+0x78c>
 800824a:	4649      	mov	r1, r9
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fcfd 	bl	8008c4c <__pow5mult>
 8008252:	4681      	mov	r9, r0
 8008254:	2101      	movs	r1, #1
 8008256:	4658      	mov	r0, fp
 8008258:	f000 fc38 	bl	8008acc <__i2b>
 800825c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800825e:	4604      	mov	r4, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 81cf 	beq.w	8008604 <_dtoa_r+0xb3c>
 8008266:	461a      	mov	r2, r3
 8008268:	4601      	mov	r1, r0
 800826a:	4658      	mov	r0, fp
 800826c:	f000 fcee 	bl	8008c4c <__pow5mult>
 8008270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008272:	2b01      	cmp	r3, #1
 8008274:	4604      	mov	r4, r0
 8008276:	f300 8095 	bgt.w	80083a4 <_dtoa_r+0x8dc>
 800827a:	9b02      	ldr	r3, [sp, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	f040 8087 	bne.w	8008390 <_dtoa_r+0x8c8>
 8008282:	9b03      	ldr	r3, [sp, #12]
 8008284:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008288:	2b00      	cmp	r3, #0
 800828a:	f040 8089 	bne.w	80083a0 <_dtoa_r+0x8d8>
 800828e:	9b03      	ldr	r3, [sp, #12]
 8008290:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008294:	0d1b      	lsrs	r3, r3, #20
 8008296:	051b      	lsls	r3, r3, #20
 8008298:	b12b      	cbz	r3, 80082a6 <_dtoa_r+0x7de>
 800829a:	9b08      	ldr	r3, [sp, #32]
 800829c:	3301      	adds	r3, #1
 800829e:	9308      	str	r3, [sp, #32]
 80082a0:	f108 0801 	add.w	r8, r8, #1
 80082a4:	2301      	movs	r3, #1
 80082a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 81b0 	beq.w	8008610 <_dtoa_r+0xb48>
 80082b0:	6923      	ldr	r3, [r4, #16]
 80082b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082b6:	6918      	ldr	r0, [r3, #16]
 80082b8:	f000 fbbc 	bl	8008a34 <__hi0bits>
 80082bc:	f1c0 0020 	rsb	r0, r0, #32
 80082c0:	9b08      	ldr	r3, [sp, #32]
 80082c2:	4418      	add	r0, r3
 80082c4:	f010 001f 	ands.w	r0, r0, #31
 80082c8:	d077      	beq.n	80083ba <_dtoa_r+0x8f2>
 80082ca:	f1c0 0320 	rsb	r3, r0, #32
 80082ce:	2b04      	cmp	r3, #4
 80082d0:	dd6b      	ble.n	80083aa <_dtoa_r+0x8e2>
 80082d2:	9b08      	ldr	r3, [sp, #32]
 80082d4:	f1c0 001c 	rsb	r0, r0, #28
 80082d8:	4403      	add	r3, r0
 80082da:	4480      	add	r8, r0
 80082dc:	4406      	add	r6, r0
 80082de:	9308      	str	r3, [sp, #32]
 80082e0:	f1b8 0f00 	cmp.w	r8, #0
 80082e4:	dd05      	ble.n	80082f2 <_dtoa_r+0x82a>
 80082e6:	4649      	mov	r1, r9
 80082e8:	4642      	mov	r2, r8
 80082ea:	4658      	mov	r0, fp
 80082ec:	f000 fd08 	bl	8008d00 <__lshift>
 80082f0:	4681      	mov	r9, r0
 80082f2:	9b08      	ldr	r3, [sp, #32]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	dd05      	ble.n	8008304 <_dtoa_r+0x83c>
 80082f8:	4621      	mov	r1, r4
 80082fa:	461a      	mov	r2, r3
 80082fc:	4658      	mov	r0, fp
 80082fe:	f000 fcff 	bl	8008d00 <__lshift>
 8008302:	4604      	mov	r4, r0
 8008304:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008306:	2b00      	cmp	r3, #0
 8008308:	d059      	beq.n	80083be <_dtoa_r+0x8f6>
 800830a:	4621      	mov	r1, r4
 800830c:	4648      	mov	r0, r9
 800830e:	f000 fd63 	bl	8008dd8 <__mcmp>
 8008312:	2800      	cmp	r0, #0
 8008314:	da53      	bge.n	80083be <_dtoa_r+0x8f6>
 8008316:	1e7b      	subs	r3, r7, #1
 8008318:	9304      	str	r3, [sp, #16]
 800831a:	4649      	mov	r1, r9
 800831c:	2300      	movs	r3, #0
 800831e:	220a      	movs	r2, #10
 8008320:	4658      	mov	r0, fp
 8008322:	f000 faf7 	bl	8008914 <__multadd>
 8008326:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008328:	4681      	mov	r9, r0
 800832a:	2b00      	cmp	r3, #0
 800832c:	f000 8172 	beq.w	8008614 <_dtoa_r+0xb4c>
 8008330:	2300      	movs	r3, #0
 8008332:	4629      	mov	r1, r5
 8008334:	220a      	movs	r2, #10
 8008336:	4658      	mov	r0, fp
 8008338:	f000 faec 	bl	8008914 <__multadd>
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	4605      	mov	r5, r0
 8008342:	dc67      	bgt.n	8008414 <_dtoa_r+0x94c>
 8008344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008346:	2b02      	cmp	r3, #2
 8008348:	dc41      	bgt.n	80083ce <_dtoa_r+0x906>
 800834a:	e063      	b.n	8008414 <_dtoa_r+0x94c>
 800834c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800834e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008352:	e746      	b.n	80081e2 <_dtoa_r+0x71a>
 8008354:	9b07      	ldr	r3, [sp, #28]
 8008356:	1e5c      	subs	r4, r3, #1
 8008358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800835a:	42a3      	cmp	r3, r4
 800835c:	bfbf      	itttt	lt
 800835e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008360:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008362:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008364:	1ae3      	sublt	r3, r4, r3
 8008366:	bfb4      	ite	lt
 8008368:	18d2      	addlt	r2, r2, r3
 800836a:	1b1c      	subge	r4, r3, r4
 800836c:	9b07      	ldr	r3, [sp, #28]
 800836e:	bfbc      	itt	lt
 8008370:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008372:	2400      	movlt	r4, #0
 8008374:	2b00      	cmp	r3, #0
 8008376:	bfb5      	itete	lt
 8008378:	eba8 0603 	sublt.w	r6, r8, r3
 800837c:	9b07      	ldrge	r3, [sp, #28]
 800837e:	2300      	movlt	r3, #0
 8008380:	4646      	movge	r6, r8
 8008382:	e730      	b.n	80081e6 <_dtoa_r+0x71e>
 8008384:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008386:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008388:	4646      	mov	r6, r8
 800838a:	e735      	b.n	80081f8 <_dtoa_r+0x730>
 800838c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800838e:	e75c      	b.n	800824a <_dtoa_r+0x782>
 8008390:	2300      	movs	r3, #0
 8008392:	e788      	b.n	80082a6 <_dtoa_r+0x7de>
 8008394:	3fe00000 	.word	0x3fe00000
 8008398:	40240000 	.word	0x40240000
 800839c:	40140000 	.word	0x40140000
 80083a0:	9b02      	ldr	r3, [sp, #8]
 80083a2:	e780      	b.n	80082a6 <_dtoa_r+0x7de>
 80083a4:	2300      	movs	r3, #0
 80083a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80083a8:	e782      	b.n	80082b0 <_dtoa_r+0x7e8>
 80083aa:	d099      	beq.n	80082e0 <_dtoa_r+0x818>
 80083ac:	9a08      	ldr	r2, [sp, #32]
 80083ae:	331c      	adds	r3, #28
 80083b0:	441a      	add	r2, r3
 80083b2:	4498      	add	r8, r3
 80083b4:	441e      	add	r6, r3
 80083b6:	9208      	str	r2, [sp, #32]
 80083b8:	e792      	b.n	80082e0 <_dtoa_r+0x818>
 80083ba:	4603      	mov	r3, r0
 80083bc:	e7f6      	b.n	80083ac <_dtoa_r+0x8e4>
 80083be:	9b07      	ldr	r3, [sp, #28]
 80083c0:	9704      	str	r7, [sp, #16]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	dc20      	bgt.n	8008408 <_dtoa_r+0x940>
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	dd1e      	ble.n	800840c <_dtoa_r+0x944>
 80083ce:	9b00      	ldr	r3, [sp, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f47f aec0 	bne.w	8008156 <_dtoa_r+0x68e>
 80083d6:	4621      	mov	r1, r4
 80083d8:	2205      	movs	r2, #5
 80083da:	4658      	mov	r0, fp
 80083dc:	f000 fa9a 	bl	8008914 <__multadd>
 80083e0:	4601      	mov	r1, r0
 80083e2:	4604      	mov	r4, r0
 80083e4:	4648      	mov	r0, r9
 80083e6:	f000 fcf7 	bl	8008dd8 <__mcmp>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	f77f aeb3 	ble.w	8008156 <_dtoa_r+0x68e>
 80083f0:	4656      	mov	r6, sl
 80083f2:	2331      	movs	r3, #49	@ 0x31
 80083f4:	f806 3b01 	strb.w	r3, [r6], #1
 80083f8:	9b04      	ldr	r3, [sp, #16]
 80083fa:	3301      	adds	r3, #1
 80083fc:	9304      	str	r3, [sp, #16]
 80083fe:	e6ae      	b.n	800815e <_dtoa_r+0x696>
 8008400:	9c07      	ldr	r4, [sp, #28]
 8008402:	9704      	str	r7, [sp, #16]
 8008404:	4625      	mov	r5, r4
 8008406:	e7f3      	b.n	80083f0 <_dtoa_r+0x928>
 8008408:	9b07      	ldr	r3, [sp, #28]
 800840a:	9300      	str	r3, [sp, #0]
 800840c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 8104 	beq.w	800861c <_dtoa_r+0xb54>
 8008414:	2e00      	cmp	r6, #0
 8008416:	dd05      	ble.n	8008424 <_dtoa_r+0x95c>
 8008418:	4629      	mov	r1, r5
 800841a:	4632      	mov	r2, r6
 800841c:	4658      	mov	r0, fp
 800841e:	f000 fc6f 	bl	8008d00 <__lshift>
 8008422:	4605      	mov	r5, r0
 8008424:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008426:	2b00      	cmp	r3, #0
 8008428:	d05a      	beq.n	80084e0 <_dtoa_r+0xa18>
 800842a:	6869      	ldr	r1, [r5, #4]
 800842c:	4658      	mov	r0, fp
 800842e:	f000 fa0f 	bl	8008850 <_Balloc>
 8008432:	4606      	mov	r6, r0
 8008434:	b928      	cbnz	r0, 8008442 <_dtoa_r+0x97a>
 8008436:	4b84      	ldr	r3, [pc, #528]	@ (8008648 <_dtoa_r+0xb80>)
 8008438:	4602      	mov	r2, r0
 800843a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800843e:	f7ff bb5a 	b.w	8007af6 <_dtoa_r+0x2e>
 8008442:	692a      	ldr	r2, [r5, #16]
 8008444:	3202      	adds	r2, #2
 8008446:	0092      	lsls	r2, r2, #2
 8008448:	f105 010c 	add.w	r1, r5, #12
 800844c:	300c      	adds	r0, #12
 800844e:	f7ff fa9c 	bl	800798a <memcpy>
 8008452:	2201      	movs	r2, #1
 8008454:	4631      	mov	r1, r6
 8008456:	4658      	mov	r0, fp
 8008458:	f000 fc52 	bl	8008d00 <__lshift>
 800845c:	f10a 0301 	add.w	r3, sl, #1
 8008460:	9307      	str	r3, [sp, #28]
 8008462:	9b00      	ldr	r3, [sp, #0]
 8008464:	4453      	add	r3, sl
 8008466:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	462f      	mov	r7, r5
 8008470:	930a      	str	r3, [sp, #40]	@ 0x28
 8008472:	4605      	mov	r5, r0
 8008474:	9b07      	ldr	r3, [sp, #28]
 8008476:	4621      	mov	r1, r4
 8008478:	3b01      	subs	r3, #1
 800847a:	4648      	mov	r0, r9
 800847c:	9300      	str	r3, [sp, #0]
 800847e:	f7ff fa99 	bl	80079b4 <quorem>
 8008482:	4639      	mov	r1, r7
 8008484:	9002      	str	r0, [sp, #8]
 8008486:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800848a:	4648      	mov	r0, r9
 800848c:	f000 fca4 	bl	8008dd8 <__mcmp>
 8008490:	462a      	mov	r2, r5
 8008492:	9008      	str	r0, [sp, #32]
 8008494:	4621      	mov	r1, r4
 8008496:	4658      	mov	r0, fp
 8008498:	f000 fcba 	bl	8008e10 <__mdiff>
 800849c:	68c2      	ldr	r2, [r0, #12]
 800849e:	4606      	mov	r6, r0
 80084a0:	bb02      	cbnz	r2, 80084e4 <_dtoa_r+0xa1c>
 80084a2:	4601      	mov	r1, r0
 80084a4:	4648      	mov	r0, r9
 80084a6:	f000 fc97 	bl	8008dd8 <__mcmp>
 80084aa:	4602      	mov	r2, r0
 80084ac:	4631      	mov	r1, r6
 80084ae:	4658      	mov	r0, fp
 80084b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80084b2:	f000 fa0d 	bl	80088d0 <_Bfree>
 80084b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084ba:	9e07      	ldr	r6, [sp, #28]
 80084bc:	ea43 0102 	orr.w	r1, r3, r2
 80084c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c2:	4319      	orrs	r1, r3
 80084c4:	d110      	bne.n	80084e8 <_dtoa_r+0xa20>
 80084c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084ca:	d029      	beq.n	8008520 <_dtoa_r+0xa58>
 80084cc:	9b08      	ldr	r3, [sp, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	dd02      	ble.n	80084d8 <_dtoa_r+0xa10>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80084d8:	9b00      	ldr	r3, [sp, #0]
 80084da:	f883 8000 	strb.w	r8, [r3]
 80084de:	e63f      	b.n	8008160 <_dtoa_r+0x698>
 80084e0:	4628      	mov	r0, r5
 80084e2:	e7bb      	b.n	800845c <_dtoa_r+0x994>
 80084e4:	2201      	movs	r2, #1
 80084e6:	e7e1      	b.n	80084ac <_dtoa_r+0x9e4>
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	db04      	blt.n	80084f8 <_dtoa_r+0xa30>
 80084ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084f0:	430b      	orrs	r3, r1
 80084f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80084f4:	430b      	orrs	r3, r1
 80084f6:	d120      	bne.n	800853a <_dtoa_r+0xa72>
 80084f8:	2a00      	cmp	r2, #0
 80084fa:	dded      	ble.n	80084d8 <_dtoa_r+0xa10>
 80084fc:	4649      	mov	r1, r9
 80084fe:	2201      	movs	r2, #1
 8008500:	4658      	mov	r0, fp
 8008502:	f000 fbfd 	bl	8008d00 <__lshift>
 8008506:	4621      	mov	r1, r4
 8008508:	4681      	mov	r9, r0
 800850a:	f000 fc65 	bl	8008dd8 <__mcmp>
 800850e:	2800      	cmp	r0, #0
 8008510:	dc03      	bgt.n	800851a <_dtoa_r+0xa52>
 8008512:	d1e1      	bne.n	80084d8 <_dtoa_r+0xa10>
 8008514:	f018 0f01 	tst.w	r8, #1
 8008518:	d0de      	beq.n	80084d8 <_dtoa_r+0xa10>
 800851a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800851e:	d1d8      	bne.n	80084d2 <_dtoa_r+0xa0a>
 8008520:	9a00      	ldr	r2, [sp, #0]
 8008522:	2339      	movs	r3, #57	@ 0x39
 8008524:	7013      	strb	r3, [r2, #0]
 8008526:	4633      	mov	r3, r6
 8008528:	461e      	mov	r6, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008530:	2a39      	cmp	r2, #57	@ 0x39
 8008532:	d052      	beq.n	80085da <_dtoa_r+0xb12>
 8008534:	3201      	adds	r2, #1
 8008536:	701a      	strb	r2, [r3, #0]
 8008538:	e612      	b.n	8008160 <_dtoa_r+0x698>
 800853a:	2a00      	cmp	r2, #0
 800853c:	dd07      	ble.n	800854e <_dtoa_r+0xa86>
 800853e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008542:	d0ed      	beq.n	8008520 <_dtoa_r+0xa58>
 8008544:	9a00      	ldr	r2, [sp, #0]
 8008546:	f108 0301 	add.w	r3, r8, #1
 800854a:	7013      	strb	r3, [r2, #0]
 800854c:	e608      	b.n	8008160 <_dtoa_r+0x698>
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	9a07      	ldr	r2, [sp, #28]
 8008552:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008558:	4293      	cmp	r3, r2
 800855a:	d028      	beq.n	80085ae <_dtoa_r+0xae6>
 800855c:	4649      	mov	r1, r9
 800855e:	2300      	movs	r3, #0
 8008560:	220a      	movs	r2, #10
 8008562:	4658      	mov	r0, fp
 8008564:	f000 f9d6 	bl	8008914 <__multadd>
 8008568:	42af      	cmp	r7, r5
 800856a:	4681      	mov	r9, r0
 800856c:	f04f 0300 	mov.w	r3, #0
 8008570:	f04f 020a 	mov.w	r2, #10
 8008574:	4639      	mov	r1, r7
 8008576:	4658      	mov	r0, fp
 8008578:	d107      	bne.n	800858a <_dtoa_r+0xac2>
 800857a:	f000 f9cb 	bl	8008914 <__multadd>
 800857e:	4607      	mov	r7, r0
 8008580:	4605      	mov	r5, r0
 8008582:	9b07      	ldr	r3, [sp, #28]
 8008584:	3301      	adds	r3, #1
 8008586:	9307      	str	r3, [sp, #28]
 8008588:	e774      	b.n	8008474 <_dtoa_r+0x9ac>
 800858a:	f000 f9c3 	bl	8008914 <__multadd>
 800858e:	4629      	mov	r1, r5
 8008590:	4607      	mov	r7, r0
 8008592:	2300      	movs	r3, #0
 8008594:	220a      	movs	r2, #10
 8008596:	4658      	mov	r0, fp
 8008598:	f000 f9bc 	bl	8008914 <__multadd>
 800859c:	4605      	mov	r5, r0
 800859e:	e7f0      	b.n	8008582 <_dtoa_r+0xaba>
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bfcc      	ite	gt
 80085a6:	461e      	movgt	r6, r3
 80085a8:	2601      	movle	r6, #1
 80085aa:	4456      	add	r6, sl
 80085ac:	2700      	movs	r7, #0
 80085ae:	4649      	mov	r1, r9
 80085b0:	2201      	movs	r2, #1
 80085b2:	4658      	mov	r0, fp
 80085b4:	f000 fba4 	bl	8008d00 <__lshift>
 80085b8:	4621      	mov	r1, r4
 80085ba:	4681      	mov	r9, r0
 80085bc:	f000 fc0c 	bl	8008dd8 <__mcmp>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	dcb0      	bgt.n	8008526 <_dtoa_r+0xa5e>
 80085c4:	d102      	bne.n	80085cc <_dtoa_r+0xb04>
 80085c6:	f018 0f01 	tst.w	r8, #1
 80085ca:	d1ac      	bne.n	8008526 <_dtoa_r+0xa5e>
 80085cc:	4633      	mov	r3, r6
 80085ce:	461e      	mov	r6, r3
 80085d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085d4:	2a30      	cmp	r2, #48	@ 0x30
 80085d6:	d0fa      	beq.n	80085ce <_dtoa_r+0xb06>
 80085d8:	e5c2      	b.n	8008160 <_dtoa_r+0x698>
 80085da:	459a      	cmp	sl, r3
 80085dc:	d1a4      	bne.n	8008528 <_dtoa_r+0xa60>
 80085de:	9b04      	ldr	r3, [sp, #16]
 80085e0:	3301      	adds	r3, #1
 80085e2:	9304      	str	r3, [sp, #16]
 80085e4:	2331      	movs	r3, #49	@ 0x31
 80085e6:	f88a 3000 	strb.w	r3, [sl]
 80085ea:	e5b9      	b.n	8008160 <_dtoa_r+0x698>
 80085ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80085ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800864c <_dtoa_r+0xb84>
 80085f2:	b11b      	cbz	r3, 80085fc <_dtoa_r+0xb34>
 80085f4:	f10a 0308 	add.w	r3, sl, #8
 80085f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	4650      	mov	r0, sl
 80085fe:	b019      	add	sp, #100	@ 0x64
 8008600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008604:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008606:	2b01      	cmp	r3, #1
 8008608:	f77f ae37 	ble.w	800827a <_dtoa_r+0x7b2>
 800860c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800860e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008610:	2001      	movs	r0, #1
 8008612:	e655      	b.n	80082c0 <_dtoa_r+0x7f8>
 8008614:	9b00      	ldr	r3, [sp, #0]
 8008616:	2b00      	cmp	r3, #0
 8008618:	f77f aed6 	ble.w	80083c8 <_dtoa_r+0x900>
 800861c:	4656      	mov	r6, sl
 800861e:	4621      	mov	r1, r4
 8008620:	4648      	mov	r0, r9
 8008622:	f7ff f9c7 	bl	80079b4 <quorem>
 8008626:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800862a:	f806 8b01 	strb.w	r8, [r6], #1
 800862e:	9b00      	ldr	r3, [sp, #0]
 8008630:	eba6 020a 	sub.w	r2, r6, sl
 8008634:	4293      	cmp	r3, r2
 8008636:	ddb3      	ble.n	80085a0 <_dtoa_r+0xad8>
 8008638:	4649      	mov	r1, r9
 800863a:	2300      	movs	r3, #0
 800863c:	220a      	movs	r2, #10
 800863e:	4658      	mov	r0, fp
 8008640:	f000 f968 	bl	8008914 <__multadd>
 8008644:	4681      	mov	r9, r0
 8008646:	e7ea      	b.n	800861e <_dtoa_r+0xb56>
 8008648:	0800ba82 	.word	0x0800ba82
 800864c:	0800ba06 	.word	0x0800ba06

08008650 <_free_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4605      	mov	r5, r0
 8008654:	2900      	cmp	r1, #0
 8008656:	d041      	beq.n	80086dc <_free_r+0x8c>
 8008658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865c:	1f0c      	subs	r4, r1, #4
 800865e:	2b00      	cmp	r3, #0
 8008660:	bfb8      	it	lt
 8008662:	18e4      	addlt	r4, r4, r3
 8008664:	f000 f8e8 	bl	8008838 <__malloc_lock>
 8008668:	4a1d      	ldr	r2, [pc, #116]	@ (80086e0 <_free_r+0x90>)
 800866a:	6813      	ldr	r3, [r2, #0]
 800866c:	b933      	cbnz	r3, 800867c <_free_r+0x2c>
 800866e:	6063      	str	r3, [r4, #4]
 8008670:	6014      	str	r4, [r2, #0]
 8008672:	4628      	mov	r0, r5
 8008674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008678:	f000 b8e4 	b.w	8008844 <__malloc_unlock>
 800867c:	42a3      	cmp	r3, r4
 800867e:	d908      	bls.n	8008692 <_free_r+0x42>
 8008680:	6820      	ldr	r0, [r4, #0]
 8008682:	1821      	adds	r1, r4, r0
 8008684:	428b      	cmp	r3, r1
 8008686:	bf01      	itttt	eq
 8008688:	6819      	ldreq	r1, [r3, #0]
 800868a:	685b      	ldreq	r3, [r3, #4]
 800868c:	1809      	addeq	r1, r1, r0
 800868e:	6021      	streq	r1, [r4, #0]
 8008690:	e7ed      	b.n	800866e <_free_r+0x1e>
 8008692:	461a      	mov	r2, r3
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b10b      	cbz	r3, 800869c <_free_r+0x4c>
 8008698:	42a3      	cmp	r3, r4
 800869a:	d9fa      	bls.n	8008692 <_free_r+0x42>
 800869c:	6811      	ldr	r1, [r2, #0]
 800869e:	1850      	adds	r0, r2, r1
 80086a0:	42a0      	cmp	r0, r4
 80086a2:	d10b      	bne.n	80086bc <_free_r+0x6c>
 80086a4:	6820      	ldr	r0, [r4, #0]
 80086a6:	4401      	add	r1, r0
 80086a8:	1850      	adds	r0, r2, r1
 80086aa:	4283      	cmp	r3, r0
 80086ac:	6011      	str	r1, [r2, #0]
 80086ae:	d1e0      	bne.n	8008672 <_free_r+0x22>
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	6053      	str	r3, [r2, #4]
 80086b6:	4408      	add	r0, r1
 80086b8:	6010      	str	r0, [r2, #0]
 80086ba:	e7da      	b.n	8008672 <_free_r+0x22>
 80086bc:	d902      	bls.n	80086c4 <_free_r+0x74>
 80086be:	230c      	movs	r3, #12
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	e7d6      	b.n	8008672 <_free_r+0x22>
 80086c4:	6820      	ldr	r0, [r4, #0]
 80086c6:	1821      	adds	r1, r4, r0
 80086c8:	428b      	cmp	r3, r1
 80086ca:	bf04      	itt	eq
 80086cc:	6819      	ldreq	r1, [r3, #0]
 80086ce:	685b      	ldreq	r3, [r3, #4]
 80086d0:	6063      	str	r3, [r4, #4]
 80086d2:	bf04      	itt	eq
 80086d4:	1809      	addeq	r1, r1, r0
 80086d6:	6021      	streq	r1, [r4, #0]
 80086d8:	6054      	str	r4, [r2, #4]
 80086da:	e7ca      	b.n	8008672 <_free_r+0x22>
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop
 80086e0:	20001730 	.word	0x20001730

080086e4 <malloc>:
 80086e4:	4b02      	ldr	r3, [pc, #8]	@ (80086f0 <malloc+0xc>)
 80086e6:	4601      	mov	r1, r0
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	f000 b825 	b.w	8008738 <_malloc_r>
 80086ee:	bf00      	nop
 80086f0:	200000d8 	.word	0x200000d8

080086f4 <sbrk_aligned>:
 80086f4:	b570      	push	{r4, r5, r6, lr}
 80086f6:	4e0f      	ldr	r6, [pc, #60]	@ (8008734 <sbrk_aligned+0x40>)
 80086f8:	460c      	mov	r4, r1
 80086fa:	6831      	ldr	r1, [r6, #0]
 80086fc:	4605      	mov	r5, r0
 80086fe:	b911      	cbnz	r1, 8008706 <sbrk_aligned+0x12>
 8008700:	f002 f816 	bl	800a730 <_sbrk_r>
 8008704:	6030      	str	r0, [r6, #0]
 8008706:	4621      	mov	r1, r4
 8008708:	4628      	mov	r0, r5
 800870a:	f002 f811 	bl	800a730 <_sbrk_r>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d103      	bne.n	800871a <sbrk_aligned+0x26>
 8008712:	f04f 34ff 	mov.w	r4, #4294967295
 8008716:	4620      	mov	r0, r4
 8008718:	bd70      	pop	{r4, r5, r6, pc}
 800871a:	1cc4      	adds	r4, r0, #3
 800871c:	f024 0403 	bic.w	r4, r4, #3
 8008720:	42a0      	cmp	r0, r4
 8008722:	d0f8      	beq.n	8008716 <sbrk_aligned+0x22>
 8008724:	1a21      	subs	r1, r4, r0
 8008726:	4628      	mov	r0, r5
 8008728:	f002 f802 	bl	800a730 <_sbrk_r>
 800872c:	3001      	adds	r0, #1
 800872e:	d1f2      	bne.n	8008716 <sbrk_aligned+0x22>
 8008730:	e7ef      	b.n	8008712 <sbrk_aligned+0x1e>
 8008732:	bf00      	nop
 8008734:	2000172c 	.word	0x2000172c

08008738 <_malloc_r>:
 8008738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800873c:	1ccd      	adds	r5, r1, #3
 800873e:	f025 0503 	bic.w	r5, r5, #3
 8008742:	3508      	adds	r5, #8
 8008744:	2d0c      	cmp	r5, #12
 8008746:	bf38      	it	cc
 8008748:	250c      	movcc	r5, #12
 800874a:	2d00      	cmp	r5, #0
 800874c:	4606      	mov	r6, r0
 800874e:	db01      	blt.n	8008754 <_malloc_r+0x1c>
 8008750:	42a9      	cmp	r1, r5
 8008752:	d904      	bls.n	800875e <_malloc_r+0x26>
 8008754:	230c      	movs	r3, #12
 8008756:	6033      	str	r3, [r6, #0]
 8008758:	2000      	movs	r0, #0
 800875a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800875e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008834 <_malloc_r+0xfc>
 8008762:	f000 f869 	bl	8008838 <__malloc_lock>
 8008766:	f8d8 3000 	ldr.w	r3, [r8]
 800876a:	461c      	mov	r4, r3
 800876c:	bb44      	cbnz	r4, 80087c0 <_malloc_r+0x88>
 800876e:	4629      	mov	r1, r5
 8008770:	4630      	mov	r0, r6
 8008772:	f7ff ffbf 	bl	80086f4 <sbrk_aligned>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	4604      	mov	r4, r0
 800877a:	d158      	bne.n	800882e <_malloc_r+0xf6>
 800877c:	f8d8 4000 	ldr.w	r4, [r8]
 8008780:	4627      	mov	r7, r4
 8008782:	2f00      	cmp	r7, #0
 8008784:	d143      	bne.n	800880e <_malloc_r+0xd6>
 8008786:	2c00      	cmp	r4, #0
 8008788:	d04b      	beq.n	8008822 <_malloc_r+0xea>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	4639      	mov	r1, r7
 800878e:	4630      	mov	r0, r6
 8008790:	eb04 0903 	add.w	r9, r4, r3
 8008794:	f001 ffcc 	bl	800a730 <_sbrk_r>
 8008798:	4581      	cmp	r9, r0
 800879a:	d142      	bne.n	8008822 <_malloc_r+0xea>
 800879c:	6821      	ldr	r1, [r4, #0]
 800879e:	1a6d      	subs	r5, r5, r1
 80087a0:	4629      	mov	r1, r5
 80087a2:	4630      	mov	r0, r6
 80087a4:	f7ff ffa6 	bl	80086f4 <sbrk_aligned>
 80087a8:	3001      	adds	r0, #1
 80087aa:	d03a      	beq.n	8008822 <_malloc_r+0xea>
 80087ac:	6823      	ldr	r3, [r4, #0]
 80087ae:	442b      	add	r3, r5
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	f8d8 3000 	ldr.w	r3, [r8]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	bb62      	cbnz	r2, 8008814 <_malloc_r+0xdc>
 80087ba:	f8c8 7000 	str.w	r7, [r8]
 80087be:	e00f      	b.n	80087e0 <_malloc_r+0xa8>
 80087c0:	6822      	ldr	r2, [r4, #0]
 80087c2:	1b52      	subs	r2, r2, r5
 80087c4:	d420      	bmi.n	8008808 <_malloc_r+0xd0>
 80087c6:	2a0b      	cmp	r2, #11
 80087c8:	d917      	bls.n	80087fa <_malloc_r+0xc2>
 80087ca:	1961      	adds	r1, r4, r5
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	6025      	str	r5, [r4, #0]
 80087d0:	bf18      	it	ne
 80087d2:	6059      	strne	r1, [r3, #4]
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	bf08      	it	eq
 80087d8:	f8c8 1000 	streq.w	r1, [r8]
 80087dc:	5162      	str	r2, [r4, r5]
 80087de:	604b      	str	r3, [r1, #4]
 80087e0:	4630      	mov	r0, r6
 80087e2:	f000 f82f 	bl	8008844 <__malloc_unlock>
 80087e6:	f104 000b 	add.w	r0, r4, #11
 80087ea:	1d23      	adds	r3, r4, #4
 80087ec:	f020 0007 	bic.w	r0, r0, #7
 80087f0:	1ac2      	subs	r2, r0, r3
 80087f2:	bf1c      	itt	ne
 80087f4:	1a1b      	subne	r3, r3, r0
 80087f6:	50a3      	strne	r3, [r4, r2]
 80087f8:	e7af      	b.n	800875a <_malloc_r+0x22>
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	42a3      	cmp	r3, r4
 80087fe:	bf0c      	ite	eq
 8008800:	f8c8 2000 	streq.w	r2, [r8]
 8008804:	605a      	strne	r2, [r3, #4]
 8008806:	e7eb      	b.n	80087e0 <_malloc_r+0xa8>
 8008808:	4623      	mov	r3, r4
 800880a:	6864      	ldr	r4, [r4, #4]
 800880c:	e7ae      	b.n	800876c <_malloc_r+0x34>
 800880e:	463c      	mov	r4, r7
 8008810:	687f      	ldr	r7, [r7, #4]
 8008812:	e7b6      	b.n	8008782 <_malloc_r+0x4a>
 8008814:	461a      	mov	r2, r3
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	42a3      	cmp	r3, r4
 800881a:	d1fb      	bne.n	8008814 <_malloc_r+0xdc>
 800881c:	2300      	movs	r3, #0
 800881e:	6053      	str	r3, [r2, #4]
 8008820:	e7de      	b.n	80087e0 <_malloc_r+0xa8>
 8008822:	230c      	movs	r3, #12
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	4630      	mov	r0, r6
 8008828:	f000 f80c 	bl	8008844 <__malloc_unlock>
 800882c:	e794      	b.n	8008758 <_malloc_r+0x20>
 800882e:	6005      	str	r5, [r0, #0]
 8008830:	e7d6      	b.n	80087e0 <_malloc_r+0xa8>
 8008832:	bf00      	nop
 8008834:	20001730 	.word	0x20001730

08008838 <__malloc_lock>:
 8008838:	4801      	ldr	r0, [pc, #4]	@ (8008840 <__malloc_lock+0x8>)
 800883a:	f7ff b8a4 	b.w	8007986 <__retarget_lock_acquire_recursive>
 800883e:	bf00      	nop
 8008840:	20001728 	.word	0x20001728

08008844 <__malloc_unlock>:
 8008844:	4801      	ldr	r0, [pc, #4]	@ (800884c <__malloc_unlock+0x8>)
 8008846:	f7ff b89f 	b.w	8007988 <__retarget_lock_release_recursive>
 800884a:	bf00      	nop
 800884c:	20001728 	.word	0x20001728

08008850 <_Balloc>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	69c6      	ldr	r6, [r0, #28]
 8008854:	4604      	mov	r4, r0
 8008856:	460d      	mov	r5, r1
 8008858:	b976      	cbnz	r6, 8008878 <_Balloc+0x28>
 800885a:	2010      	movs	r0, #16
 800885c:	f7ff ff42 	bl	80086e4 <malloc>
 8008860:	4602      	mov	r2, r0
 8008862:	61e0      	str	r0, [r4, #28]
 8008864:	b920      	cbnz	r0, 8008870 <_Balloc+0x20>
 8008866:	4b18      	ldr	r3, [pc, #96]	@ (80088c8 <_Balloc+0x78>)
 8008868:	4818      	ldr	r0, [pc, #96]	@ (80088cc <_Balloc+0x7c>)
 800886a:	216b      	movs	r1, #107	@ 0x6b
 800886c:	f001 ff78 	bl	800a760 <__assert_func>
 8008870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008874:	6006      	str	r6, [r0, #0]
 8008876:	60c6      	str	r6, [r0, #12]
 8008878:	69e6      	ldr	r6, [r4, #28]
 800887a:	68f3      	ldr	r3, [r6, #12]
 800887c:	b183      	cbz	r3, 80088a0 <_Balloc+0x50>
 800887e:	69e3      	ldr	r3, [r4, #28]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008886:	b9b8      	cbnz	r0, 80088b8 <_Balloc+0x68>
 8008888:	2101      	movs	r1, #1
 800888a:	fa01 f605 	lsl.w	r6, r1, r5
 800888e:	1d72      	adds	r2, r6, #5
 8008890:	0092      	lsls	r2, r2, #2
 8008892:	4620      	mov	r0, r4
 8008894:	f001 ff82 	bl	800a79c <_calloc_r>
 8008898:	b160      	cbz	r0, 80088b4 <_Balloc+0x64>
 800889a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800889e:	e00e      	b.n	80088be <_Balloc+0x6e>
 80088a0:	2221      	movs	r2, #33	@ 0x21
 80088a2:	2104      	movs	r1, #4
 80088a4:	4620      	mov	r0, r4
 80088a6:	f001 ff79 	bl	800a79c <_calloc_r>
 80088aa:	69e3      	ldr	r3, [r4, #28]
 80088ac:	60f0      	str	r0, [r6, #12]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d1e4      	bne.n	800887e <_Balloc+0x2e>
 80088b4:	2000      	movs	r0, #0
 80088b6:	bd70      	pop	{r4, r5, r6, pc}
 80088b8:	6802      	ldr	r2, [r0, #0]
 80088ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80088be:	2300      	movs	r3, #0
 80088c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088c4:	e7f7      	b.n	80088b6 <_Balloc+0x66>
 80088c6:	bf00      	nop
 80088c8:	0800ba13 	.word	0x0800ba13
 80088cc:	0800ba93 	.word	0x0800ba93

080088d0 <_Bfree>:
 80088d0:	b570      	push	{r4, r5, r6, lr}
 80088d2:	69c6      	ldr	r6, [r0, #28]
 80088d4:	4605      	mov	r5, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b976      	cbnz	r6, 80088f8 <_Bfree+0x28>
 80088da:	2010      	movs	r0, #16
 80088dc:	f7ff ff02 	bl	80086e4 <malloc>
 80088e0:	4602      	mov	r2, r0
 80088e2:	61e8      	str	r0, [r5, #28]
 80088e4:	b920      	cbnz	r0, 80088f0 <_Bfree+0x20>
 80088e6:	4b09      	ldr	r3, [pc, #36]	@ (800890c <_Bfree+0x3c>)
 80088e8:	4809      	ldr	r0, [pc, #36]	@ (8008910 <_Bfree+0x40>)
 80088ea:	218f      	movs	r1, #143	@ 0x8f
 80088ec:	f001 ff38 	bl	800a760 <__assert_func>
 80088f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088f4:	6006      	str	r6, [r0, #0]
 80088f6:	60c6      	str	r6, [r0, #12]
 80088f8:	b13c      	cbz	r4, 800890a <_Bfree+0x3a>
 80088fa:	69eb      	ldr	r3, [r5, #28]
 80088fc:	6862      	ldr	r2, [r4, #4]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008904:	6021      	str	r1, [r4, #0]
 8008906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	0800ba13 	.word	0x0800ba13
 8008910:	0800ba93 	.word	0x0800ba93

08008914 <__multadd>:
 8008914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008918:	690d      	ldr	r5, [r1, #16]
 800891a:	4607      	mov	r7, r0
 800891c:	460c      	mov	r4, r1
 800891e:	461e      	mov	r6, r3
 8008920:	f101 0c14 	add.w	ip, r1, #20
 8008924:	2000      	movs	r0, #0
 8008926:	f8dc 3000 	ldr.w	r3, [ip]
 800892a:	b299      	uxth	r1, r3
 800892c:	fb02 6101 	mla	r1, r2, r1, r6
 8008930:	0c1e      	lsrs	r6, r3, #16
 8008932:	0c0b      	lsrs	r3, r1, #16
 8008934:	fb02 3306 	mla	r3, r2, r6, r3
 8008938:	b289      	uxth	r1, r1
 800893a:	3001      	adds	r0, #1
 800893c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008940:	4285      	cmp	r5, r0
 8008942:	f84c 1b04 	str.w	r1, [ip], #4
 8008946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800894a:	dcec      	bgt.n	8008926 <__multadd+0x12>
 800894c:	b30e      	cbz	r6, 8008992 <__multadd+0x7e>
 800894e:	68a3      	ldr	r3, [r4, #8]
 8008950:	42ab      	cmp	r3, r5
 8008952:	dc19      	bgt.n	8008988 <__multadd+0x74>
 8008954:	6861      	ldr	r1, [r4, #4]
 8008956:	4638      	mov	r0, r7
 8008958:	3101      	adds	r1, #1
 800895a:	f7ff ff79 	bl	8008850 <_Balloc>
 800895e:	4680      	mov	r8, r0
 8008960:	b928      	cbnz	r0, 800896e <__multadd+0x5a>
 8008962:	4602      	mov	r2, r0
 8008964:	4b0c      	ldr	r3, [pc, #48]	@ (8008998 <__multadd+0x84>)
 8008966:	480d      	ldr	r0, [pc, #52]	@ (800899c <__multadd+0x88>)
 8008968:	21ba      	movs	r1, #186	@ 0xba
 800896a:	f001 fef9 	bl	800a760 <__assert_func>
 800896e:	6922      	ldr	r2, [r4, #16]
 8008970:	3202      	adds	r2, #2
 8008972:	f104 010c 	add.w	r1, r4, #12
 8008976:	0092      	lsls	r2, r2, #2
 8008978:	300c      	adds	r0, #12
 800897a:	f7ff f806 	bl	800798a <memcpy>
 800897e:	4621      	mov	r1, r4
 8008980:	4638      	mov	r0, r7
 8008982:	f7ff ffa5 	bl	80088d0 <_Bfree>
 8008986:	4644      	mov	r4, r8
 8008988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800898c:	3501      	adds	r5, #1
 800898e:	615e      	str	r6, [r3, #20]
 8008990:	6125      	str	r5, [r4, #16]
 8008992:	4620      	mov	r0, r4
 8008994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008998:	0800ba82 	.word	0x0800ba82
 800899c:	0800ba93 	.word	0x0800ba93

080089a0 <__s2b>:
 80089a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089a4:	460c      	mov	r4, r1
 80089a6:	4615      	mov	r5, r2
 80089a8:	461f      	mov	r7, r3
 80089aa:	2209      	movs	r2, #9
 80089ac:	3308      	adds	r3, #8
 80089ae:	4606      	mov	r6, r0
 80089b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80089b4:	2100      	movs	r1, #0
 80089b6:	2201      	movs	r2, #1
 80089b8:	429a      	cmp	r2, r3
 80089ba:	db09      	blt.n	80089d0 <__s2b+0x30>
 80089bc:	4630      	mov	r0, r6
 80089be:	f7ff ff47 	bl	8008850 <_Balloc>
 80089c2:	b940      	cbnz	r0, 80089d6 <__s2b+0x36>
 80089c4:	4602      	mov	r2, r0
 80089c6:	4b19      	ldr	r3, [pc, #100]	@ (8008a2c <__s2b+0x8c>)
 80089c8:	4819      	ldr	r0, [pc, #100]	@ (8008a30 <__s2b+0x90>)
 80089ca:	21d3      	movs	r1, #211	@ 0xd3
 80089cc:	f001 fec8 	bl	800a760 <__assert_func>
 80089d0:	0052      	lsls	r2, r2, #1
 80089d2:	3101      	adds	r1, #1
 80089d4:	e7f0      	b.n	80089b8 <__s2b+0x18>
 80089d6:	9b08      	ldr	r3, [sp, #32]
 80089d8:	6143      	str	r3, [r0, #20]
 80089da:	2d09      	cmp	r5, #9
 80089dc:	f04f 0301 	mov.w	r3, #1
 80089e0:	6103      	str	r3, [r0, #16]
 80089e2:	dd16      	ble.n	8008a12 <__s2b+0x72>
 80089e4:	f104 0909 	add.w	r9, r4, #9
 80089e8:	46c8      	mov	r8, r9
 80089ea:	442c      	add	r4, r5
 80089ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80089f0:	4601      	mov	r1, r0
 80089f2:	3b30      	subs	r3, #48	@ 0x30
 80089f4:	220a      	movs	r2, #10
 80089f6:	4630      	mov	r0, r6
 80089f8:	f7ff ff8c 	bl	8008914 <__multadd>
 80089fc:	45a0      	cmp	r8, r4
 80089fe:	d1f5      	bne.n	80089ec <__s2b+0x4c>
 8008a00:	f1a5 0408 	sub.w	r4, r5, #8
 8008a04:	444c      	add	r4, r9
 8008a06:	1b2d      	subs	r5, r5, r4
 8008a08:	1963      	adds	r3, r4, r5
 8008a0a:	42bb      	cmp	r3, r7
 8008a0c:	db04      	blt.n	8008a18 <__s2b+0x78>
 8008a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a12:	340a      	adds	r4, #10
 8008a14:	2509      	movs	r5, #9
 8008a16:	e7f6      	b.n	8008a06 <__s2b+0x66>
 8008a18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008a1c:	4601      	mov	r1, r0
 8008a1e:	3b30      	subs	r3, #48	@ 0x30
 8008a20:	220a      	movs	r2, #10
 8008a22:	4630      	mov	r0, r6
 8008a24:	f7ff ff76 	bl	8008914 <__multadd>
 8008a28:	e7ee      	b.n	8008a08 <__s2b+0x68>
 8008a2a:	bf00      	nop
 8008a2c:	0800ba82 	.word	0x0800ba82
 8008a30:	0800ba93 	.word	0x0800ba93

08008a34 <__hi0bits>:
 8008a34:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008a38:	4603      	mov	r3, r0
 8008a3a:	bf36      	itet	cc
 8008a3c:	0403      	lslcc	r3, r0, #16
 8008a3e:	2000      	movcs	r0, #0
 8008a40:	2010      	movcc	r0, #16
 8008a42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a46:	bf3c      	itt	cc
 8008a48:	021b      	lslcc	r3, r3, #8
 8008a4a:	3008      	addcc	r0, #8
 8008a4c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a50:	bf3c      	itt	cc
 8008a52:	011b      	lslcc	r3, r3, #4
 8008a54:	3004      	addcc	r0, #4
 8008a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a5a:	bf3c      	itt	cc
 8008a5c:	009b      	lslcc	r3, r3, #2
 8008a5e:	3002      	addcc	r0, #2
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	db05      	blt.n	8008a70 <__hi0bits+0x3c>
 8008a64:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008a68:	f100 0001 	add.w	r0, r0, #1
 8008a6c:	bf08      	it	eq
 8008a6e:	2020      	moveq	r0, #32
 8008a70:	4770      	bx	lr

08008a72 <__lo0bits>:
 8008a72:	6803      	ldr	r3, [r0, #0]
 8008a74:	4602      	mov	r2, r0
 8008a76:	f013 0007 	ands.w	r0, r3, #7
 8008a7a:	d00b      	beq.n	8008a94 <__lo0bits+0x22>
 8008a7c:	07d9      	lsls	r1, r3, #31
 8008a7e:	d421      	bmi.n	8008ac4 <__lo0bits+0x52>
 8008a80:	0798      	lsls	r0, r3, #30
 8008a82:	bf49      	itett	mi
 8008a84:	085b      	lsrmi	r3, r3, #1
 8008a86:	089b      	lsrpl	r3, r3, #2
 8008a88:	2001      	movmi	r0, #1
 8008a8a:	6013      	strmi	r3, [r2, #0]
 8008a8c:	bf5c      	itt	pl
 8008a8e:	6013      	strpl	r3, [r2, #0]
 8008a90:	2002      	movpl	r0, #2
 8008a92:	4770      	bx	lr
 8008a94:	b299      	uxth	r1, r3
 8008a96:	b909      	cbnz	r1, 8008a9c <__lo0bits+0x2a>
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	2010      	movs	r0, #16
 8008a9c:	b2d9      	uxtb	r1, r3
 8008a9e:	b909      	cbnz	r1, 8008aa4 <__lo0bits+0x32>
 8008aa0:	3008      	adds	r0, #8
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	0719      	lsls	r1, r3, #28
 8008aa6:	bf04      	itt	eq
 8008aa8:	091b      	lsreq	r3, r3, #4
 8008aaa:	3004      	addeq	r0, #4
 8008aac:	0799      	lsls	r1, r3, #30
 8008aae:	bf04      	itt	eq
 8008ab0:	089b      	lsreq	r3, r3, #2
 8008ab2:	3002      	addeq	r0, #2
 8008ab4:	07d9      	lsls	r1, r3, #31
 8008ab6:	d403      	bmi.n	8008ac0 <__lo0bits+0x4e>
 8008ab8:	085b      	lsrs	r3, r3, #1
 8008aba:	f100 0001 	add.w	r0, r0, #1
 8008abe:	d003      	beq.n	8008ac8 <__lo0bits+0x56>
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	4770      	bx	lr
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	4770      	bx	lr
 8008ac8:	2020      	movs	r0, #32
 8008aca:	4770      	bx	lr

08008acc <__i2b>:
 8008acc:	b510      	push	{r4, lr}
 8008ace:	460c      	mov	r4, r1
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	f7ff febd 	bl	8008850 <_Balloc>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	b928      	cbnz	r0, 8008ae6 <__i2b+0x1a>
 8008ada:	4b05      	ldr	r3, [pc, #20]	@ (8008af0 <__i2b+0x24>)
 8008adc:	4805      	ldr	r0, [pc, #20]	@ (8008af4 <__i2b+0x28>)
 8008ade:	f240 1145 	movw	r1, #325	@ 0x145
 8008ae2:	f001 fe3d 	bl	800a760 <__assert_func>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	6144      	str	r4, [r0, #20]
 8008aea:	6103      	str	r3, [r0, #16]
 8008aec:	bd10      	pop	{r4, pc}
 8008aee:	bf00      	nop
 8008af0:	0800ba82 	.word	0x0800ba82
 8008af4:	0800ba93 	.word	0x0800ba93

08008af8 <__multiply>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	4614      	mov	r4, r2
 8008afe:	690a      	ldr	r2, [r1, #16]
 8008b00:	6923      	ldr	r3, [r4, #16]
 8008b02:	429a      	cmp	r2, r3
 8008b04:	bfa8      	it	ge
 8008b06:	4623      	movge	r3, r4
 8008b08:	460f      	mov	r7, r1
 8008b0a:	bfa4      	itt	ge
 8008b0c:	460c      	movge	r4, r1
 8008b0e:	461f      	movge	r7, r3
 8008b10:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008b14:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008b18:	68a3      	ldr	r3, [r4, #8]
 8008b1a:	6861      	ldr	r1, [r4, #4]
 8008b1c:	eb0a 0609 	add.w	r6, sl, r9
 8008b20:	42b3      	cmp	r3, r6
 8008b22:	b085      	sub	sp, #20
 8008b24:	bfb8      	it	lt
 8008b26:	3101      	addlt	r1, #1
 8008b28:	f7ff fe92 	bl	8008850 <_Balloc>
 8008b2c:	b930      	cbnz	r0, 8008b3c <__multiply+0x44>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	4b44      	ldr	r3, [pc, #272]	@ (8008c44 <__multiply+0x14c>)
 8008b32:	4845      	ldr	r0, [pc, #276]	@ (8008c48 <__multiply+0x150>)
 8008b34:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008b38:	f001 fe12 	bl	800a760 <__assert_func>
 8008b3c:	f100 0514 	add.w	r5, r0, #20
 8008b40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b44:	462b      	mov	r3, r5
 8008b46:	2200      	movs	r2, #0
 8008b48:	4543      	cmp	r3, r8
 8008b4a:	d321      	bcc.n	8008b90 <__multiply+0x98>
 8008b4c:	f107 0114 	add.w	r1, r7, #20
 8008b50:	f104 0214 	add.w	r2, r4, #20
 8008b54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b58:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	1b13      	subs	r3, r2, r4
 8008b60:	3b15      	subs	r3, #21
 8008b62:	f023 0303 	bic.w	r3, r3, #3
 8008b66:	3304      	adds	r3, #4
 8008b68:	f104 0715 	add.w	r7, r4, #21
 8008b6c:	42ba      	cmp	r2, r7
 8008b6e:	bf38      	it	cc
 8008b70:	2304      	movcc	r3, #4
 8008b72:	9301      	str	r3, [sp, #4]
 8008b74:	9b02      	ldr	r3, [sp, #8]
 8008b76:	9103      	str	r1, [sp, #12]
 8008b78:	428b      	cmp	r3, r1
 8008b7a:	d80c      	bhi.n	8008b96 <__multiply+0x9e>
 8008b7c:	2e00      	cmp	r6, #0
 8008b7e:	dd03      	ble.n	8008b88 <__multiply+0x90>
 8008b80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d05b      	beq.n	8008c40 <__multiply+0x148>
 8008b88:	6106      	str	r6, [r0, #16]
 8008b8a:	b005      	add	sp, #20
 8008b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b90:	f843 2b04 	str.w	r2, [r3], #4
 8008b94:	e7d8      	b.n	8008b48 <__multiply+0x50>
 8008b96:	f8b1 a000 	ldrh.w	sl, [r1]
 8008b9a:	f1ba 0f00 	cmp.w	sl, #0
 8008b9e:	d024      	beq.n	8008bea <__multiply+0xf2>
 8008ba0:	f104 0e14 	add.w	lr, r4, #20
 8008ba4:	46a9      	mov	r9, r5
 8008ba6:	f04f 0c00 	mov.w	ip, #0
 8008baa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008bae:	f8d9 3000 	ldr.w	r3, [r9]
 8008bb2:	fa1f fb87 	uxth.w	fp, r7
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	fb0a 330b 	mla	r3, sl, fp, r3
 8008bbc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008bc0:	f8d9 7000 	ldr.w	r7, [r9]
 8008bc4:	4463      	add	r3, ip
 8008bc6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008bca:	fb0a c70b 	mla	r7, sl, fp, ip
 8008bce:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008bd8:	4572      	cmp	r2, lr
 8008bda:	f849 3b04 	str.w	r3, [r9], #4
 8008bde:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008be2:	d8e2      	bhi.n	8008baa <__multiply+0xb2>
 8008be4:	9b01      	ldr	r3, [sp, #4]
 8008be6:	f845 c003 	str.w	ip, [r5, r3]
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008bf0:	3104      	adds	r1, #4
 8008bf2:	f1b9 0f00 	cmp.w	r9, #0
 8008bf6:	d021      	beq.n	8008c3c <__multiply+0x144>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	f104 0c14 	add.w	ip, r4, #20
 8008bfe:	46ae      	mov	lr, r5
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	f8bc b000 	ldrh.w	fp, [ip]
 8008c08:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008c0c:	fb09 770b 	mla	r7, r9, fp, r7
 8008c10:	4457      	add	r7, sl
 8008c12:	b29b      	uxth	r3, r3
 8008c14:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008c18:	f84e 3b04 	str.w	r3, [lr], #4
 8008c1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c24:	f8be 3000 	ldrh.w	r3, [lr]
 8008c28:	fb09 330a 	mla	r3, r9, sl, r3
 8008c2c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008c30:	4562      	cmp	r2, ip
 8008c32:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c36:	d8e5      	bhi.n	8008c04 <__multiply+0x10c>
 8008c38:	9f01      	ldr	r7, [sp, #4]
 8008c3a:	51eb      	str	r3, [r5, r7]
 8008c3c:	3504      	adds	r5, #4
 8008c3e:	e799      	b.n	8008b74 <__multiply+0x7c>
 8008c40:	3e01      	subs	r6, #1
 8008c42:	e79b      	b.n	8008b7c <__multiply+0x84>
 8008c44:	0800ba82 	.word	0x0800ba82
 8008c48:	0800ba93 	.word	0x0800ba93

08008c4c <__pow5mult>:
 8008c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c50:	4615      	mov	r5, r2
 8008c52:	f012 0203 	ands.w	r2, r2, #3
 8008c56:	4607      	mov	r7, r0
 8008c58:	460e      	mov	r6, r1
 8008c5a:	d007      	beq.n	8008c6c <__pow5mult+0x20>
 8008c5c:	4c25      	ldr	r4, [pc, #148]	@ (8008cf4 <__pow5mult+0xa8>)
 8008c5e:	3a01      	subs	r2, #1
 8008c60:	2300      	movs	r3, #0
 8008c62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c66:	f7ff fe55 	bl	8008914 <__multadd>
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	10ad      	asrs	r5, r5, #2
 8008c6e:	d03d      	beq.n	8008cec <__pow5mult+0xa0>
 8008c70:	69fc      	ldr	r4, [r7, #28]
 8008c72:	b97c      	cbnz	r4, 8008c94 <__pow5mult+0x48>
 8008c74:	2010      	movs	r0, #16
 8008c76:	f7ff fd35 	bl	80086e4 <malloc>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	61f8      	str	r0, [r7, #28]
 8008c7e:	b928      	cbnz	r0, 8008c8c <__pow5mult+0x40>
 8008c80:	4b1d      	ldr	r3, [pc, #116]	@ (8008cf8 <__pow5mult+0xac>)
 8008c82:	481e      	ldr	r0, [pc, #120]	@ (8008cfc <__pow5mult+0xb0>)
 8008c84:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008c88:	f001 fd6a 	bl	800a760 <__assert_func>
 8008c8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c90:	6004      	str	r4, [r0, #0]
 8008c92:	60c4      	str	r4, [r0, #12]
 8008c94:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008c98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c9c:	b94c      	cbnz	r4, 8008cb2 <__pow5mult+0x66>
 8008c9e:	f240 2171 	movw	r1, #625	@ 0x271
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff ff12 	bl	8008acc <__i2b>
 8008ca8:	2300      	movs	r3, #0
 8008caa:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cae:	4604      	mov	r4, r0
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	f04f 0900 	mov.w	r9, #0
 8008cb6:	07eb      	lsls	r3, r5, #31
 8008cb8:	d50a      	bpl.n	8008cd0 <__pow5mult+0x84>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	4638      	mov	r0, r7
 8008cc0:	f7ff ff1a 	bl	8008af8 <__multiply>
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4680      	mov	r8, r0
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7ff fe01 	bl	80088d0 <_Bfree>
 8008cce:	4646      	mov	r6, r8
 8008cd0:	106d      	asrs	r5, r5, #1
 8008cd2:	d00b      	beq.n	8008cec <__pow5mult+0xa0>
 8008cd4:	6820      	ldr	r0, [r4, #0]
 8008cd6:	b938      	cbnz	r0, 8008ce8 <__pow5mult+0x9c>
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4621      	mov	r1, r4
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ff0b 	bl	8008af8 <__multiply>
 8008ce2:	6020      	str	r0, [r4, #0]
 8008ce4:	f8c0 9000 	str.w	r9, [r0]
 8008ce8:	4604      	mov	r4, r0
 8008cea:	e7e4      	b.n	8008cb6 <__pow5mult+0x6a>
 8008cec:	4630      	mov	r0, r6
 8008cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cf2:	bf00      	nop
 8008cf4:	0800baec 	.word	0x0800baec
 8008cf8:	0800ba13 	.word	0x0800ba13
 8008cfc:	0800ba93 	.word	0x0800ba93

08008d00 <__lshift>:
 8008d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d04:	460c      	mov	r4, r1
 8008d06:	6849      	ldr	r1, [r1, #4]
 8008d08:	6923      	ldr	r3, [r4, #16]
 8008d0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d0e:	68a3      	ldr	r3, [r4, #8]
 8008d10:	4607      	mov	r7, r0
 8008d12:	4691      	mov	r9, r2
 8008d14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d18:	f108 0601 	add.w	r6, r8, #1
 8008d1c:	42b3      	cmp	r3, r6
 8008d1e:	db0b      	blt.n	8008d38 <__lshift+0x38>
 8008d20:	4638      	mov	r0, r7
 8008d22:	f7ff fd95 	bl	8008850 <_Balloc>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b948      	cbnz	r0, 8008d3e <__lshift+0x3e>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	4b28      	ldr	r3, [pc, #160]	@ (8008dd0 <__lshift+0xd0>)
 8008d2e:	4829      	ldr	r0, [pc, #164]	@ (8008dd4 <__lshift+0xd4>)
 8008d30:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008d34:	f001 fd14 	bl	800a760 <__assert_func>
 8008d38:	3101      	adds	r1, #1
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	e7ee      	b.n	8008d1c <__lshift+0x1c>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f100 0114 	add.w	r1, r0, #20
 8008d44:	f100 0210 	add.w	r2, r0, #16
 8008d48:	4618      	mov	r0, r3
 8008d4a:	4553      	cmp	r3, sl
 8008d4c:	db33      	blt.n	8008db6 <__lshift+0xb6>
 8008d4e:	6920      	ldr	r0, [r4, #16]
 8008d50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d54:	f104 0314 	add.w	r3, r4, #20
 8008d58:	f019 091f 	ands.w	r9, r9, #31
 8008d5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d60:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d64:	d02b      	beq.n	8008dbe <__lshift+0xbe>
 8008d66:	f1c9 0e20 	rsb	lr, r9, #32
 8008d6a:	468a      	mov	sl, r1
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	6818      	ldr	r0, [r3, #0]
 8008d70:	fa00 f009 	lsl.w	r0, r0, r9
 8008d74:	4310      	orrs	r0, r2
 8008d76:	f84a 0b04 	str.w	r0, [sl], #4
 8008d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7e:	459c      	cmp	ip, r3
 8008d80:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d84:	d8f3      	bhi.n	8008d6e <__lshift+0x6e>
 8008d86:	ebac 0304 	sub.w	r3, ip, r4
 8008d8a:	3b15      	subs	r3, #21
 8008d8c:	f023 0303 	bic.w	r3, r3, #3
 8008d90:	3304      	adds	r3, #4
 8008d92:	f104 0015 	add.w	r0, r4, #21
 8008d96:	4584      	cmp	ip, r0
 8008d98:	bf38      	it	cc
 8008d9a:	2304      	movcc	r3, #4
 8008d9c:	50ca      	str	r2, [r1, r3]
 8008d9e:	b10a      	cbz	r2, 8008da4 <__lshift+0xa4>
 8008da0:	f108 0602 	add.w	r6, r8, #2
 8008da4:	3e01      	subs	r6, #1
 8008da6:	4638      	mov	r0, r7
 8008da8:	612e      	str	r6, [r5, #16]
 8008daa:	4621      	mov	r1, r4
 8008dac:	f7ff fd90 	bl	80088d0 <_Bfree>
 8008db0:	4628      	mov	r0, r5
 8008db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008db6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dba:	3301      	adds	r3, #1
 8008dbc:	e7c5      	b.n	8008d4a <__lshift+0x4a>
 8008dbe:	3904      	subs	r1, #4
 8008dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008dc8:	459c      	cmp	ip, r3
 8008dca:	d8f9      	bhi.n	8008dc0 <__lshift+0xc0>
 8008dcc:	e7ea      	b.n	8008da4 <__lshift+0xa4>
 8008dce:	bf00      	nop
 8008dd0:	0800ba82 	.word	0x0800ba82
 8008dd4:	0800ba93 	.word	0x0800ba93

08008dd8 <__mcmp>:
 8008dd8:	690a      	ldr	r2, [r1, #16]
 8008dda:	4603      	mov	r3, r0
 8008ddc:	6900      	ldr	r0, [r0, #16]
 8008dde:	1a80      	subs	r0, r0, r2
 8008de0:	b530      	push	{r4, r5, lr}
 8008de2:	d10e      	bne.n	8008e02 <__mcmp+0x2a>
 8008de4:	3314      	adds	r3, #20
 8008de6:	3114      	adds	r1, #20
 8008de8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008dec:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008df0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008df4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008df8:	4295      	cmp	r5, r2
 8008dfa:	d003      	beq.n	8008e04 <__mcmp+0x2c>
 8008dfc:	d205      	bcs.n	8008e0a <__mcmp+0x32>
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	bd30      	pop	{r4, r5, pc}
 8008e04:	42a3      	cmp	r3, r4
 8008e06:	d3f3      	bcc.n	8008df0 <__mcmp+0x18>
 8008e08:	e7fb      	b.n	8008e02 <__mcmp+0x2a>
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	e7f9      	b.n	8008e02 <__mcmp+0x2a>
	...

08008e10 <__mdiff>:
 8008e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e14:	4689      	mov	r9, r1
 8008e16:	4606      	mov	r6, r0
 8008e18:	4611      	mov	r1, r2
 8008e1a:	4648      	mov	r0, r9
 8008e1c:	4614      	mov	r4, r2
 8008e1e:	f7ff ffdb 	bl	8008dd8 <__mcmp>
 8008e22:	1e05      	subs	r5, r0, #0
 8008e24:	d112      	bne.n	8008e4c <__mdiff+0x3c>
 8008e26:	4629      	mov	r1, r5
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7ff fd11 	bl	8008850 <_Balloc>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	b928      	cbnz	r0, 8008e3e <__mdiff+0x2e>
 8008e32:	4b3f      	ldr	r3, [pc, #252]	@ (8008f30 <__mdiff+0x120>)
 8008e34:	f240 2137 	movw	r1, #567	@ 0x237
 8008e38:	483e      	ldr	r0, [pc, #248]	@ (8008f34 <__mdiff+0x124>)
 8008e3a:	f001 fc91 	bl	800a760 <__assert_func>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e44:	4610      	mov	r0, r2
 8008e46:	b003      	add	sp, #12
 8008e48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e4c:	bfbc      	itt	lt
 8008e4e:	464b      	movlt	r3, r9
 8008e50:	46a1      	movlt	r9, r4
 8008e52:	4630      	mov	r0, r6
 8008e54:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008e58:	bfba      	itte	lt
 8008e5a:	461c      	movlt	r4, r3
 8008e5c:	2501      	movlt	r5, #1
 8008e5e:	2500      	movge	r5, #0
 8008e60:	f7ff fcf6 	bl	8008850 <_Balloc>
 8008e64:	4602      	mov	r2, r0
 8008e66:	b918      	cbnz	r0, 8008e70 <__mdiff+0x60>
 8008e68:	4b31      	ldr	r3, [pc, #196]	@ (8008f30 <__mdiff+0x120>)
 8008e6a:	f240 2145 	movw	r1, #581	@ 0x245
 8008e6e:	e7e3      	b.n	8008e38 <__mdiff+0x28>
 8008e70:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008e74:	6926      	ldr	r6, [r4, #16]
 8008e76:	60c5      	str	r5, [r0, #12]
 8008e78:	f109 0310 	add.w	r3, r9, #16
 8008e7c:	f109 0514 	add.w	r5, r9, #20
 8008e80:	f104 0e14 	add.w	lr, r4, #20
 8008e84:	f100 0b14 	add.w	fp, r0, #20
 8008e88:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008e8c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	46d9      	mov	r9, fp
 8008e94:	f04f 0c00 	mov.w	ip, #0
 8008e98:	9b01      	ldr	r3, [sp, #4]
 8008e9a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008e9e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008ea2:	9301      	str	r3, [sp, #4]
 8008ea4:	fa1f f38a 	uxth.w	r3, sl
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	b283      	uxth	r3, r0
 8008eac:	1acb      	subs	r3, r1, r3
 8008eae:	0c00      	lsrs	r0, r0, #16
 8008eb0:	4463      	add	r3, ip
 8008eb2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008eb6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ec0:	4576      	cmp	r6, lr
 8008ec2:	f849 3b04 	str.w	r3, [r9], #4
 8008ec6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008eca:	d8e5      	bhi.n	8008e98 <__mdiff+0x88>
 8008ecc:	1b33      	subs	r3, r6, r4
 8008ece:	3b15      	subs	r3, #21
 8008ed0:	f023 0303 	bic.w	r3, r3, #3
 8008ed4:	3415      	adds	r4, #21
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	42a6      	cmp	r6, r4
 8008eda:	bf38      	it	cc
 8008edc:	2304      	movcc	r3, #4
 8008ede:	441d      	add	r5, r3
 8008ee0:	445b      	add	r3, fp
 8008ee2:	461e      	mov	r6, r3
 8008ee4:	462c      	mov	r4, r5
 8008ee6:	4544      	cmp	r4, r8
 8008ee8:	d30e      	bcc.n	8008f08 <__mdiff+0xf8>
 8008eea:	f108 0103 	add.w	r1, r8, #3
 8008eee:	1b49      	subs	r1, r1, r5
 8008ef0:	f021 0103 	bic.w	r1, r1, #3
 8008ef4:	3d03      	subs	r5, #3
 8008ef6:	45a8      	cmp	r8, r5
 8008ef8:	bf38      	it	cc
 8008efa:	2100      	movcc	r1, #0
 8008efc:	440b      	add	r3, r1
 8008efe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f02:	b191      	cbz	r1, 8008f2a <__mdiff+0x11a>
 8008f04:	6117      	str	r7, [r2, #16]
 8008f06:	e79d      	b.n	8008e44 <__mdiff+0x34>
 8008f08:	f854 1b04 	ldr.w	r1, [r4], #4
 8008f0c:	46e6      	mov	lr, ip
 8008f0e:	0c08      	lsrs	r0, r1, #16
 8008f10:	fa1c fc81 	uxtah	ip, ip, r1
 8008f14:	4471      	add	r1, lr
 8008f16:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008f1a:	b289      	uxth	r1, r1
 8008f1c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008f20:	f846 1b04 	str.w	r1, [r6], #4
 8008f24:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008f28:	e7dd      	b.n	8008ee6 <__mdiff+0xd6>
 8008f2a:	3f01      	subs	r7, #1
 8008f2c:	e7e7      	b.n	8008efe <__mdiff+0xee>
 8008f2e:	bf00      	nop
 8008f30:	0800ba82 	.word	0x0800ba82
 8008f34:	0800ba93 	.word	0x0800ba93

08008f38 <__ulp>:
 8008f38:	b082      	sub	sp, #8
 8008f3a:	ed8d 0b00 	vstr	d0, [sp]
 8008f3e:	9a01      	ldr	r2, [sp, #4]
 8008f40:	4b0f      	ldr	r3, [pc, #60]	@ (8008f80 <__ulp+0x48>)
 8008f42:	4013      	ands	r3, r2
 8008f44:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dc08      	bgt.n	8008f5e <__ulp+0x26>
 8008f4c:	425b      	negs	r3, r3
 8008f4e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008f52:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008f56:	da04      	bge.n	8008f62 <__ulp+0x2a>
 8008f58:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008f5c:	4113      	asrs	r3, r2
 8008f5e:	2200      	movs	r2, #0
 8008f60:	e008      	b.n	8008f74 <__ulp+0x3c>
 8008f62:	f1a2 0314 	sub.w	r3, r2, #20
 8008f66:	2b1e      	cmp	r3, #30
 8008f68:	bfda      	itte	le
 8008f6a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008f6e:	40da      	lsrle	r2, r3
 8008f70:	2201      	movgt	r2, #1
 8008f72:	2300      	movs	r3, #0
 8008f74:	4619      	mov	r1, r3
 8008f76:	4610      	mov	r0, r2
 8008f78:	ec41 0b10 	vmov	d0, r0, r1
 8008f7c:	b002      	add	sp, #8
 8008f7e:	4770      	bx	lr
 8008f80:	7ff00000 	.word	0x7ff00000

08008f84 <__b2d>:
 8008f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f88:	6906      	ldr	r6, [r0, #16]
 8008f8a:	f100 0814 	add.w	r8, r0, #20
 8008f8e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008f92:	1f37      	subs	r7, r6, #4
 8008f94:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7ff fd4b 	bl	8008a34 <__hi0bits>
 8008f9e:	f1c0 0320 	rsb	r3, r0, #32
 8008fa2:	280a      	cmp	r0, #10
 8008fa4:	600b      	str	r3, [r1, #0]
 8008fa6:	491b      	ldr	r1, [pc, #108]	@ (8009014 <__b2d+0x90>)
 8008fa8:	dc15      	bgt.n	8008fd6 <__b2d+0x52>
 8008faa:	f1c0 0c0b 	rsb	ip, r0, #11
 8008fae:	fa22 f30c 	lsr.w	r3, r2, ip
 8008fb2:	45b8      	cmp	r8, r7
 8008fb4:	ea43 0501 	orr.w	r5, r3, r1
 8008fb8:	bf34      	ite	cc
 8008fba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fbe:	2300      	movcs	r3, #0
 8008fc0:	3015      	adds	r0, #21
 8008fc2:	fa02 f000 	lsl.w	r0, r2, r0
 8008fc6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008fca:	4303      	orrs	r3, r0
 8008fcc:	461c      	mov	r4, r3
 8008fce:	ec45 4b10 	vmov	d0, r4, r5
 8008fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fd6:	45b8      	cmp	r8, r7
 8008fd8:	bf3a      	itte	cc
 8008fda:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008fde:	f1a6 0708 	subcc.w	r7, r6, #8
 8008fe2:	2300      	movcs	r3, #0
 8008fe4:	380b      	subs	r0, #11
 8008fe6:	d012      	beq.n	800900e <__b2d+0x8a>
 8008fe8:	f1c0 0120 	rsb	r1, r0, #32
 8008fec:	fa23 f401 	lsr.w	r4, r3, r1
 8008ff0:	4082      	lsls	r2, r0
 8008ff2:	4322      	orrs	r2, r4
 8008ff4:	4547      	cmp	r7, r8
 8008ff6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008ffa:	bf8c      	ite	hi
 8008ffc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009000:	2200      	movls	r2, #0
 8009002:	4083      	lsls	r3, r0
 8009004:	40ca      	lsrs	r2, r1
 8009006:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800900a:	4313      	orrs	r3, r2
 800900c:	e7de      	b.n	8008fcc <__b2d+0x48>
 800900e:	ea42 0501 	orr.w	r5, r2, r1
 8009012:	e7db      	b.n	8008fcc <__b2d+0x48>
 8009014:	3ff00000 	.word	0x3ff00000

08009018 <__d2b>:
 8009018:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800901c:	460f      	mov	r7, r1
 800901e:	2101      	movs	r1, #1
 8009020:	ec59 8b10 	vmov	r8, r9, d0
 8009024:	4616      	mov	r6, r2
 8009026:	f7ff fc13 	bl	8008850 <_Balloc>
 800902a:	4604      	mov	r4, r0
 800902c:	b930      	cbnz	r0, 800903c <__d2b+0x24>
 800902e:	4602      	mov	r2, r0
 8009030:	4b23      	ldr	r3, [pc, #140]	@ (80090c0 <__d2b+0xa8>)
 8009032:	4824      	ldr	r0, [pc, #144]	@ (80090c4 <__d2b+0xac>)
 8009034:	f240 310f 	movw	r1, #783	@ 0x30f
 8009038:	f001 fb92 	bl	800a760 <__assert_func>
 800903c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009040:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009044:	b10d      	cbz	r5, 800904a <__d2b+0x32>
 8009046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	f1b8 0300 	subs.w	r3, r8, #0
 8009050:	d023      	beq.n	800909a <__d2b+0x82>
 8009052:	4668      	mov	r0, sp
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	f7ff fd0c 	bl	8008a72 <__lo0bits>
 800905a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800905e:	b1d0      	cbz	r0, 8009096 <__d2b+0x7e>
 8009060:	f1c0 0320 	rsb	r3, r0, #32
 8009064:	fa02 f303 	lsl.w	r3, r2, r3
 8009068:	430b      	orrs	r3, r1
 800906a:	40c2      	lsrs	r2, r0
 800906c:	6163      	str	r3, [r4, #20]
 800906e:	9201      	str	r2, [sp, #4]
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	61a3      	str	r3, [r4, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	bf0c      	ite	eq
 8009078:	2201      	moveq	r2, #1
 800907a:	2202      	movne	r2, #2
 800907c:	6122      	str	r2, [r4, #16]
 800907e:	b1a5      	cbz	r5, 80090aa <__d2b+0x92>
 8009080:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009084:	4405      	add	r5, r0
 8009086:	603d      	str	r5, [r7, #0]
 8009088:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800908c:	6030      	str	r0, [r6, #0]
 800908e:	4620      	mov	r0, r4
 8009090:	b003      	add	sp, #12
 8009092:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009096:	6161      	str	r1, [r4, #20]
 8009098:	e7ea      	b.n	8009070 <__d2b+0x58>
 800909a:	a801      	add	r0, sp, #4
 800909c:	f7ff fce9 	bl	8008a72 <__lo0bits>
 80090a0:	9b01      	ldr	r3, [sp, #4]
 80090a2:	6163      	str	r3, [r4, #20]
 80090a4:	3020      	adds	r0, #32
 80090a6:	2201      	movs	r2, #1
 80090a8:	e7e8      	b.n	800907c <__d2b+0x64>
 80090aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80090ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80090b2:	6038      	str	r0, [r7, #0]
 80090b4:	6918      	ldr	r0, [r3, #16]
 80090b6:	f7ff fcbd 	bl	8008a34 <__hi0bits>
 80090ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80090be:	e7e5      	b.n	800908c <__d2b+0x74>
 80090c0:	0800ba82 	.word	0x0800ba82
 80090c4:	0800ba93 	.word	0x0800ba93

080090c8 <__ratio>:
 80090c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	b085      	sub	sp, #20
 80090ce:	e9cd 1000 	strd	r1, r0, [sp]
 80090d2:	a902      	add	r1, sp, #8
 80090d4:	f7ff ff56 	bl	8008f84 <__b2d>
 80090d8:	9800      	ldr	r0, [sp, #0]
 80090da:	a903      	add	r1, sp, #12
 80090dc:	ec55 4b10 	vmov	r4, r5, d0
 80090e0:	f7ff ff50 	bl	8008f84 <__b2d>
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	6919      	ldr	r1, [r3, #16]
 80090e8:	9b00      	ldr	r3, [sp, #0]
 80090ea:	691b      	ldr	r3, [r3, #16]
 80090ec:	1ac9      	subs	r1, r1, r3
 80090ee:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80090f2:	1a9b      	subs	r3, r3, r2
 80090f4:	ec5b ab10 	vmov	sl, fp, d0
 80090f8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	bfce      	itee	gt
 8009100:	462a      	movgt	r2, r5
 8009102:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009106:	465a      	movle	r2, fp
 8009108:	462f      	mov	r7, r5
 800910a:	46d9      	mov	r9, fp
 800910c:	bfcc      	ite	gt
 800910e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009112:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009116:	464b      	mov	r3, r9
 8009118:	4652      	mov	r2, sl
 800911a:	4620      	mov	r0, r4
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 fbad 	bl	800087c <__aeabi_ddiv>
 8009122:	ec41 0b10 	vmov	d0, r0, r1
 8009126:	b005      	add	sp, #20
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800912c <__copybits>:
 800912c:	3901      	subs	r1, #1
 800912e:	b570      	push	{r4, r5, r6, lr}
 8009130:	1149      	asrs	r1, r1, #5
 8009132:	6914      	ldr	r4, [r2, #16]
 8009134:	3101      	adds	r1, #1
 8009136:	f102 0314 	add.w	r3, r2, #20
 800913a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800913e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009142:	1f05      	subs	r5, r0, #4
 8009144:	42a3      	cmp	r3, r4
 8009146:	d30c      	bcc.n	8009162 <__copybits+0x36>
 8009148:	1aa3      	subs	r3, r4, r2
 800914a:	3b11      	subs	r3, #17
 800914c:	f023 0303 	bic.w	r3, r3, #3
 8009150:	3211      	adds	r2, #17
 8009152:	42a2      	cmp	r2, r4
 8009154:	bf88      	it	hi
 8009156:	2300      	movhi	r3, #0
 8009158:	4418      	add	r0, r3
 800915a:	2300      	movs	r3, #0
 800915c:	4288      	cmp	r0, r1
 800915e:	d305      	bcc.n	800916c <__copybits+0x40>
 8009160:	bd70      	pop	{r4, r5, r6, pc}
 8009162:	f853 6b04 	ldr.w	r6, [r3], #4
 8009166:	f845 6f04 	str.w	r6, [r5, #4]!
 800916a:	e7eb      	b.n	8009144 <__copybits+0x18>
 800916c:	f840 3b04 	str.w	r3, [r0], #4
 8009170:	e7f4      	b.n	800915c <__copybits+0x30>

08009172 <__any_on>:
 8009172:	f100 0214 	add.w	r2, r0, #20
 8009176:	6900      	ldr	r0, [r0, #16]
 8009178:	114b      	asrs	r3, r1, #5
 800917a:	4298      	cmp	r0, r3
 800917c:	b510      	push	{r4, lr}
 800917e:	db11      	blt.n	80091a4 <__any_on+0x32>
 8009180:	dd0a      	ble.n	8009198 <__any_on+0x26>
 8009182:	f011 011f 	ands.w	r1, r1, #31
 8009186:	d007      	beq.n	8009198 <__any_on+0x26>
 8009188:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800918c:	fa24 f001 	lsr.w	r0, r4, r1
 8009190:	fa00 f101 	lsl.w	r1, r0, r1
 8009194:	428c      	cmp	r4, r1
 8009196:	d10b      	bne.n	80091b0 <__any_on+0x3e>
 8009198:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800919c:	4293      	cmp	r3, r2
 800919e:	d803      	bhi.n	80091a8 <__any_on+0x36>
 80091a0:	2000      	movs	r0, #0
 80091a2:	bd10      	pop	{r4, pc}
 80091a4:	4603      	mov	r3, r0
 80091a6:	e7f7      	b.n	8009198 <__any_on+0x26>
 80091a8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80091ac:	2900      	cmp	r1, #0
 80091ae:	d0f5      	beq.n	800919c <__any_on+0x2a>
 80091b0:	2001      	movs	r0, #1
 80091b2:	e7f6      	b.n	80091a2 <__any_on+0x30>

080091b4 <sulp>:
 80091b4:	b570      	push	{r4, r5, r6, lr}
 80091b6:	4604      	mov	r4, r0
 80091b8:	460d      	mov	r5, r1
 80091ba:	ec45 4b10 	vmov	d0, r4, r5
 80091be:	4616      	mov	r6, r2
 80091c0:	f7ff feba 	bl	8008f38 <__ulp>
 80091c4:	ec51 0b10 	vmov	r0, r1, d0
 80091c8:	b17e      	cbz	r6, 80091ea <sulp+0x36>
 80091ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80091ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd09      	ble.n	80091ea <sulp+0x36>
 80091d6:	051b      	lsls	r3, r3, #20
 80091d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80091dc:	2400      	movs	r4, #0
 80091de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80091e2:	4622      	mov	r2, r4
 80091e4:	462b      	mov	r3, r5
 80091e6:	f7f7 fa1f 	bl	8000628 <__aeabi_dmul>
 80091ea:	ec41 0b10 	vmov	d0, r0, r1
 80091ee:	bd70      	pop	{r4, r5, r6, pc}

080091f0 <_strtod_l>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	b09f      	sub	sp, #124	@ 0x7c
 80091f6:	460c      	mov	r4, r1
 80091f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80091fa:	2200      	movs	r2, #0
 80091fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80091fe:	9005      	str	r0, [sp, #20]
 8009200:	f04f 0a00 	mov.w	sl, #0
 8009204:	f04f 0b00 	mov.w	fp, #0
 8009208:	460a      	mov	r2, r1
 800920a:	9219      	str	r2, [sp, #100]	@ 0x64
 800920c:	7811      	ldrb	r1, [r2, #0]
 800920e:	292b      	cmp	r1, #43	@ 0x2b
 8009210:	d04a      	beq.n	80092a8 <_strtod_l+0xb8>
 8009212:	d838      	bhi.n	8009286 <_strtod_l+0x96>
 8009214:	290d      	cmp	r1, #13
 8009216:	d832      	bhi.n	800927e <_strtod_l+0x8e>
 8009218:	2908      	cmp	r1, #8
 800921a:	d832      	bhi.n	8009282 <_strtod_l+0x92>
 800921c:	2900      	cmp	r1, #0
 800921e:	d03b      	beq.n	8009298 <_strtod_l+0xa8>
 8009220:	2200      	movs	r2, #0
 8009222:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009226:	782a      	ldrb	r2, [r5, #0]
 8009228:	2a30      	cmp	r2, #48	@ 0x30
 800922a:	f040 80b3 	bne.w	8009394 <_strtod_l+0x1a4>
 800922e:	786a      	ldrb	r2, [r5, #1]
 8009230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009234:	2a58      	cmp	r2, #88	@ 0x58
 8009236:	d16e      	bne.n	8009316 <_strtod_l+0x126>
 8009238:	9302      	str	r3, [sp, #8]
 800923a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	4a8e      	ldr	r2, [pc, #568]	@ (800947c <_strtod_l+0x28c>)
 8009244:	9805      	ldr	r0, [sp, #20]
 8009246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009248:	a919      	add	r1, sp, #100	@ 0x64
 800924a:	f001 fb23 	bl	800a894 <__gethex>
 800924e:	f010 060f 	ands.w	r6, r0, #15
 8009252:	4604      	mov	r4, r0
 8009254:	d005      	beq.n	8009262 <_strtod_l+0x72>
 8009256:	2e06      	cmp	r6, #6
 8009258:	d128      	bne.n	80092ac <_strtod_l+0xbc>
 800925a:	3501      	adds	r5, #1
 800925c:	2300      	movs	r3, #0
 800925e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009264:	2b00      	cmp	r3, #0
 8009266:	f040 858e 	bne.w	8009d86 <_strtod_l+0xb96>
 800926a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800926c:	b1cb      	cbz	r3, 80092a2 <_strtod_l+0xb2>
 800926e:	4652      	mov	r2, sl
 8009270:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009274:	ec43 2b10 	vmov	d0, r2, r3
 8009278:	b01f      	add	sp, #124	@ 0x7c
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	2920      	cmp	r1, #32
 8009280:	d1ce      	bne.n	8009220 <_strtod_l+0x30>
 8009282:	3201      	adds	r2, #1
 8009284:	e7c1      	b.n	800920a <_strtod_l+0x1a>
 8009286:	292d      	cmp	r1, #45	@ 0x2d
 8009288:	d1ca      	bne.n	8009220 <_strtod_l+0x30>
 800928a:	2101      	movs	r1, #1
 800928c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800928e:	1c51      	adds	r1, r2, #1
 8009290:	9119      	str	r1, [sp, #100]	@ 0x64
 8009292:	7852      	ldrb	r2, [r2, #1]
 8009294:	2a00      	cmp	r2, #0
 8009296:	d1c5      	bne.n	8009224 <_strtod_l+0x34>
 8009298:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800929a:	9419      	str	r4, [sp, #100]	@ 0x64
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 8570 	bne.w	8009d82 <_strtod_l+0xb92>
 80092a2:	4652      	mov	r2, sl
 80092a4:	465b      	mov	r3, fp
 80092a6:	e7e5      	b.n	8009274 <_strtod_l+0x84>
 80092a8:	2100      	movs	r1, #0
 80092aa:	e7ef      	b.n	800928c <_strtod_l+0x9c>
 80092ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80092ae:	b13a      	cbz	r2, 80092c0 <_strtod_l+0xd0>
 80092b0:	2135      	movs	r1, #53	@ 0x35
 80092b2:	a81c      	add	r0, sp, #112	@ 0x70
 80092b4:	f7ff ff3a 	bl	800912c <__copybits>
 80092b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092ba:	9805      	ldr	r0, [sp, #20]
 80092bc:	f7ff fb08 	bl	80088d0 <_Bfree>
 80092c0:	3e01      	subs	r6, #1
 80092c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80092c4:	2e04      	cmp	r6, #4
 80092c6:	d806      	bhi.n	80092d6 <_strtod_l+0xe6>
 80092c8:	e8df f006 	tbb	[pc, r6]
 80092cc:	201d0314 	.word	0x201d0314
 80092d0:	14          	.byte	0x14
 80092d1:	00          	.byte	0x00
 80092d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80092d6:	05e1      	lsls	r1, r4, #23
 80092d8:	bf48      	it	mi
 80092da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80092de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092e2:	0d1b      	lsrs	r3, r3, #20
 80092e4:	051b      	lsls	r3, r3, #20
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1bb      	bne.n	8009262 <_strtod_l+0x72>
 80092ea:	f7fe fb21 	bl	8007930 <__errno>
 80092ee:	2322      	movs	r3, #34	@ 0x22
 80092f0:	6003      	str	r3, [r0, #0]
 80092f2:	e7b6      	b.n	8009262 <_strtod_l+0x72>
 80092f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80092f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80092fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009300:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009304:	e7e7      	b.n	80092d6 <_strtod_l+0xe6>
 8009306:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8009484 <_strtod_l+0x294>
 800930a:	e7e4      	b.n	80092d6 <_strtod_l+0xe6>
 800930c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009310:	f04f 3aff 	mov.w	sl, #4294967295
 8009314:	e7df      	b.n	80092d6 <_strtod_l+0xe6>
 8009316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009318:	1c5a      	adds	r2, r3, #1
 800931a:	9219      	str	r2, [sp, #100]	@ 0x64
 800931c:	785b      	ldrb	r3, [r3, #1]
 800931e:	2b30      	cmp	r3, #48	@ 0x30
 8009320:	d0f9      	beq.n	8009316 <_strtod_l+0x126>
 8009322:	2b00      	cmp	r3, #0
 8009324:	d09d      	beq.n	8009262 <_strtod_l+0x72>
 8009326:	2301      	movs	r3, #1
 8009328:	9309      	str	r3, [sp, #36]	@ 0x24
 800932a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800932c:	930c      	str	r3, [sp, #48]	@ 0x30
 800932e:	2300      	movs	r3, #0
 8009330:	9308      	str	r3, [sp, #32]
 8009332:	930a      	str	r3, [sp, #40]	@ 0x28
 8009334:	461f      	mov	r7, r3
 8009336:	220a      	movs	r2, #10
 8009338:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800933a:	7805      	ldrb	r5, [r0, #0]
 800933c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009340:	b2d9      	uxtb	r1, r3
 8009342:	2909      	cmp	r1, #9
 8009344:	d928      	bls.n	8009398 <_strtod_l+0x1a8>
 8009346:	494e      	ldr	r1, [pc, #312]	@ (8009480 <_strtod_l+0x290>)
 8009348:	2201      	movs	r2, #1
 800934a:	f001 f9df 	bl	800a70c <strncmp>
 800934e:	2800      	cmp	r0, #0
 8009350:	d032      	beq.n	80093b8 <_strtod_l+0x1c8>
 8009352:	2000      	movs	r0, #0
 8009354:	462a      	mov	r2, r5
 8009356:	4681      	mov	r9, r0
 8009358:	463d      	mov	r5, r7
 800935a:	4603      	mov	r3, r0
 800935c:	2a65      	cmp	r2, #101	@ 0x65
 800935e:	d001      	beq.n	8009364 <_strtod_l+0x174>
 8009360:	2a45      	cmp	r2, #69	@ 0x45
 8009362:	d114      	bne.n	800938e <_strtod_l+0x19e>
 8009364:	b91d      	cbnz	r5, 800936e <_strtod_l+0x17e>
 8009366:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009368:	4302      	orrs	r2, r0
 800936a:	d095      	beq.n	8009298 <_strtod_l+0xa8>
 800936c:	2500      	movs	r5, #0
 800936e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009370:	1c62      	adds	r2, r4, #1
 8009372:	9219      	str	r2, [sp, #100]	@ 0x64
 8009374:	7862      	ldrb	r2, [r4, #1]
 8009376:	2a2b      	cmp	r2, #43	@ 0x2b
 8009378:	d077      	beq.n	800946a <_strtod_l+0x27a>
 800937a:	2a2d      	cmp	r2, #45	@ 0x2d
 800937c:	d07b      	beq.n	8009476 <_strtod_l+0x286>
 800937e:	f04f 0c00 	mov.w	ip, #0
 8009382:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009386:	2909      	cmp	r1, #9
 8009388:	f240 8082 	bls.w	8009490 <_strtod_l+0x2a0>
 800938c:	9419      	str	r4, [sp, #100]	@ 0x64
 800938e:	f04f 0800 	mov.w	r8, #0
 8009392:	e0a2      	b.n	80094da <_strtod_l+0x2ea>
 8009394:	2300      	movs	r3, #0
 8009396:	e7c7      	b.n	8009328 <_strtod_l+0x138>
 8009398:	2f08      	cmp	r7, #8
 800939a:	bfd5      	itete	le
 800939c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800939e:	9908      	ldrgt	r1, [sp, #32]
 80093a0:	fb02 3301 	mlale	r3, r2, r1, r3
 80093a4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80093a8:	f100 0001 	add.w	r0, r0, #1
 80093ac:	bfd4      	ite	le
 80093ae:	930a      	strle	r3, [sp, #40]	@ 0x28
 80093b0:	9308      	strgt	r3, [sp, #32]
 80093b2:	3701      	adds	r7, #1
 80093b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80093b6:	e7bf      	b.n	8009338 <_strtod_l+0x148>
 80093b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80093be:	785a      	ldrb	r2, [r3, #1]
 80093c0:	b37f      	cbz	r7, 8009422 <_strtod_l+0x232>
 80093c2:	4681      	mov	r9, r0
 80093c4:	463d      	mov	r5, r7
 80093c6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80093ca:	2b09      	cmp	r3, #9
 80093cc:	d912      	bls.n	80093f4 <_strtod_l+0x204>
 80093ce:	2301      	movs	r3, #1
 80093d0:	e7c4      	b.n	800935c <_strtod_l+0x16c>
 80093d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093d4:	1c5a      	adds	r2, r3, #1
 80093d6:	9219      	str	r2, [sp, #100]	@ 0x64
 80093d8:	785a      	ldrb	r2, [r3, #1]
 80093da:	3001      	adds	r0, #1
 80093dc:	2a30      	cmp	r2, #48	@ 0x30
 80093de:	d0f8      	beq.n	80093d2 <_strtod_l+0x1e2>
 80093e0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80093e4:	2b08      	cmp	r3, #8
 80093e6:	f200 84d3 	bhi.w	8009d90 <_strtod_l+0xba0>
 80093ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80093ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80093ee:	4681      	mov	r9, r0
 80093f0:	2000      	movs	r0, #0
 80093f2:	4605      	mov	r5, r0
 80093f4:	3a30      	subs	r2, #48	@ 0x30
 80093f6:	f100 0301 	add.w	r3, r0, #1
 80093fa:	d02a      	beq.n	8009452 <_strtod_l+0x262>
 80093fc:	4499      	add	r9, r3
 80093fe:	eb00 0c05 	add.w	ip, r0, r5
 8009402:	462b      	mov	r3, r5
 8009404:	210a      	movs	r1, #10
 8009406:	4563      	cmp	r3, ip
 8009408:	d10d      	bne.n	8009426 <_strtod_l+0x236>
 800940a:	1c69      	adds	r1, r5, #1
 800940c:	4401      	add	r1, r0
 800940e:	4428      	add	r0, r5
 8009410:	2808      	cmp	r0, #8
 8009412:	dc16      	bgt.n	8009442 <_strtod_l+0x252>
 8009414:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009416:	230a      	movs	r3, #10
 8009418:	fb03 2300 	mla	r3, r3, r0, r2
 800941c:	930a      	str	r3, [sp, #40]	@ 0x28
 800941e:	2300      	movs	r3, #0
 8009420:	e018      	b.n	8009454 <_strtod_l+0x264>
 8009422:	4638      	mov	r0, r7
 8009424:	e7da      	b.n	80093dc <_strtod_l+0x1ec>
 8009426:	2b08      	cmp	r3, #8
 8009428:	f103 0301 	add.w	r3, r3, #1
 800942c:	dc03      	bgt.n	8009436 <_strtod_l+0x246>
 800942e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009430:	434e      	muls	r6, r1
 8009432:	960a      	str	r6, [sp, #40]	@ 0x28
 8009434:	e7e7      	b.n	8009406 <_strtod_l+0x216>
 8009436:	2b10      	cmp	r3, #16
 8009438:	bfde      	ittt	le
 800943a:	9e08      	ldrle	r6, [sp, #32]
 800943c:	434e      	mulle	r6, r1
 800943e:	9608      	strle	r6, [sp, #32]
 8009440:	e7e1      	b.n	8009406 <_strtod_l+0x216>
 8009442:	280f      	cmp	r0, #15
 8009444:	dceb      	bgt.n	800941e <_strtod_l+0x22e>
 8009446:	9808      	ldr	r0, [sp, #32]
 8009448:	230a      	movs	r3, #10
 800944a:	fb03 2300 	mla	r3, r3, r0, r2
 800944e:	9308      	str	r3, [sp, #32]
 8009450:	e7e5      	b.n	800941e <_strtod_l+0x22e>
 8009452:	4629      	mov	r1, r5
 8009454:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009456:	1c50      	adds	r0, r2, #1
 8009458:	9019      	str	r0, [sp, #100]	@ 0x64
 800945a:	7852      	ldrb	r2, [r2, #1]
 800945c:	4618      	mov	r0, r3
 800945e:	460d      	mov	r5, r1
 8009460:	e7b1      	b.n	80093c6 <_strtod_l+0x1d6>
 8009462:	f04f 0900 	mov.w	r9, #0
 8009466:	2301      	movs	r3, #1
 8009468:	e77d      	b.n	8009366 <_strtod_l+0x176>
 800946a:	f04f 0c00 	mov.w	ip, #0
 800946e:	1ca2      	adds	r2, r4, #2
 8009470:	9219      	str	r2, [sp, #100]	@ 0x64
 8009472:	78a2      	ldrb	r2, [r4, #2]
 8009474:	e785      	b.n	8009382 <_strtod_l+0x192>
 8009476:	f04f 0c01 	mov.w	ip, #1
 800947a:	e7f8      	b.n	800946e <_strtod_l+0x27e>
 800947c:	0800bc00 	.word	0x0800bc00
 8009480:	0800bbe8 	.word	0x0800bbe8
 8009484:	7ff00000 	.word	0x7ff00000
 8009488:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800948a:	1c51      	adds	r1, r2, #1
 800948c:	9119      	str	r1, [sp, #100]	@ 0x64
 800948e:	7852      	ldrb	r2, [r2, #1]
 8009490:	2a30      	cmp	r2, #48	@ 0x30
 8009492:	d0f9      	beq.n	8009488 <_strtod_l+0x298>
 8009494:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009498:	2908      	cmp	r1, #8
 800949a:	f63f af78 	bhi.w	800938e <_strtod_l+0x19e>
 800949e:	3a30      	subs	r2, #48	@ 0x30
 80094a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80094a2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094a4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80094a6:	f04f 080a 	mov.w	r8, #10
 80094aa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80094ac:	1c56      	adds	r6, r2, #1
 80094ae:	9619      	str	r6, [sp, #100]	@ 0x64
 80094b0:	7852      	ldrb	r2, [r2, #1]
 80094b2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80094b6:	f1be 0f09 	cmp.w	lr, #9
 80094ba:	d939      	bls.n	8009530 <_strtod_l+0x340>
 80094bc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80094be:	1a76      	subs	r6, r6, r1
 80094c0:	2e08      	cmp	r6, #8
 80094c2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80094c6:	dc03      	bgt.n	80094d0 <_strtod_l+0x2e0>
 80094c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80094ca:	4588      	cmp	r8, r1
 80094cc:	bfa8      	it	ge
 80094ce:	4688      	movge	r8, r1
 80094d0:	f1bc 0f00 	cmp.w	ip, #0
 80094d4:	d001      	beq.n	80094da <_strtod_l+0x2ea>
 80094d6:	f1c8 0800 	rsb	r8, r8, #0
 80094da:	2d00      	cmp	r5, #0
 80094dc:	d14e      	bne.n	800957c <_strtod_l+0x38c>
 80094de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80094e0:	4308      	orrs	r0, r1
 80094e2:	f47f aebe 	bne.w	8009262 <_strtod_l+0x72>
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f47f aed6 	bne.w	8009298 <_strtod_l+0xa8>
 80094ec:	2a69      	cmp	r2, #105	@ 0x69
 80094ee:	d028      	beq.n	8009542 <_strtod_l+0x352>
 80094f0:	dc25      	bgt.n	800953e <_strtod_l+0x34e>
 80094f2:	2a49      	cmp	r2, #73	@ 0x49
 80094f4:	d025      	beq.n	8009542 <_strtod_l+0x352>
 80094f6:	2a4e      	cmp	r2, #78	@ 0x4e
 80094f8:	f47f aece 	bne.w	8009298 <_strtod_l+0xa8>
 80094fc:	499b      	ldr	r1, [pc, #620]	@ (800976c <_strtod_l+0x57c>)
 80094fe:	a819      	add	r0, sp, #100	@ 0x64
 8009500:	f001 fbea 	bl	800acd8 <__match>
 8009504:	2800      	cmp	r0, #0
 8009506:	f43f aec7 	beq.w	8009298 <_strtod_l+0xa8>
 800950a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b28      	cmp	r3, #40	@ 0x28
 8009510:	d12e      	bne.n	8009570 <_strtod_l+0x380>
 8009512:	4997      	ldr	r1, [pc, #604]	@ (8009770 <_strtod_l+0x580>)
 8009514:	aa1c      	add	r2, sp, #112	@ 0x70
 8009516:	a819      	add	r0, sp, #100	@ 0x64
 8009518:	f001 fbf2 	bl	800ad00 <__hexnan>
 800951c:	2805      	cmp	r0, #5
 800951e:	d127      	bne.n	8009570 <_strtod_l+0x380>
 8009520:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009522:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009526:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800952a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800952e:	e698      	b.n	8009262 <_strtod_l+0x72>
 8009530:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009532:	fb08 2101 	mla	r1, r8, r1, r2
 8009536:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800953a:	920e      	str	r2, [sp, #56]	@ 0x38
 800953c:	e7b5      	b.n	80094aa <_strtod_l+0x2ba>
 800953e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009540:	e7da      	b.n	80094f8 <_strtod_l+0x308>
 8009542:	498c      	ldr	r1, [pc, #560]	@ (8009774 <_strtod_l+0x584>)
 8009544:	a819      	add	r0, sp, #100	@ 0x64
 8009546:	f001 fbc7 	bl	800acd8 <__match>
 800954a:	2800      	cmp	r0, #0
 800954c:	f43f aea4 	beq.w	8009298 <_strtod_l+0xa8>
 8009550:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009552:	4989      	ldr	r1, [pc, #548]	@ (8009778 <_strtod_l+0x588>)
 8009554:	3b01      	subs	r3, #1
 8009556:	a819      	add	r0, sp, #100	@ 0x64
 8009558:	9319      	str	r3, [sp, #100]	@ 0x64
 800955a:	f001 fbbd 	bl	800acd8 <__match>
 800955e:	b910      	cbnz	r0, 8009566 <_strtod_l+0x376>
 8009560:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009562:	3301      	adds	r3, #1
 8009564:	9319      	str	r3, [sp, #100]	@ 0x64
 8009566:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009788 <_strtod_l+0x598>
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	e678      	b.n	8009262 <_strtod_l+0x72>
 8009570:	4882      	ldr	r0, [pc, #520]	@ (800977c <_strtod_l+0x58c>)
 8009572:	f001 f8ed 	bl	800a750 <nan>
 8009576:	ec5b ab10 	vmov	sl, fp, d0
 800957a:	e672      	b.n	8009262 <_strtod_l+0x72>
 800957c:	eba8 0309 	sub.w	r3, r8, r9
 8009580:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009582:	9309      	str	r3, [sp, #36]	@ 0x24
 8009584:	2f00      	cmp	r7, #0
 8009586:	bf08      	it	eq
 8009588:	462f      	moveq	r7, r5
 800958a:	2d10      	cmp	r5, #16
 800958c:	462c      	mov	r4, r5
 800958e:	bfa8      	it	ge
 8009590:	2410      	movge	r4, #16
 8009592:	f7f6 ffcf 	bl	8000534 <__aeabi_ui2d>
 8009596:	2d09      	cmp	r5, #9
 8009598:	4682      	mov	sl, r0
 800959a:	468b      	mov	fp, r1
 800959c:	dc13      	bgt.n	80095c6 <_strtod_l+0x3d6>
 800959e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	f43f ae5e 	beq.w	8009262 <_strtod_l+0x72>
 80095a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095a8:	dd78      	ble.n	800969c <_strtod_l+0x4ac>
 80095aa:	2b16      	cmp	r3, #22
 80095ac:	dc5f      	bgt.n	800966e <_strtod_l+0x47e>
 80095ae:	4974      	ldr	r1, [pc, #464]	@ (8009780 <_strtod_l+0x590>)
 80095b0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80095b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b8:	4652      	mov	r2, sl
 80095ba:	465b      	mov	r3, fp
 80095bc:	f7f7 f834 	bl	8000628 <__aeabi_dmul>
 80095c0:	4682      	mov	sl, r0
 80095c2:	468b      	mov	fp, r1
 80095c4:	e64d      	b.n	8009262 <_strtod_l+0x72>
 80095c6:	4b6e      	ldr	r3, [pc, #440]	@ (8009780 <_strtod_l+0x590>)
 80095c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80095cc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80095d0:	f7f7 f82a 	bl	8000628 <__aeabi_dmul>
 80095d4:	4682      	mov	sl, r0
 80095d6:	9808      	ldr	r0, [sp, #32]
 80095d8:	468b      	mov	fp, r1
 80095da:	f7f6 ffab 	bl	8000534 <__aeabi_ui2d>
 80095de:	4602      	mov	r2, r0
 80095e0:	460b      	mov	r3, r1
 80095e2:	4650      	mov	r0, sl
 80095e4:	4659      	mov	r1, fp
 80095e6:	f7f6 fe69 	bl	80002bc <__adddf3>
 80095ea:	2d0f      	cmp	r5, #15
 80095ec:	4682      	mov	sl, r0
 80095ee:	468b      	mov	fp, r1
 80095f0:	ddd5      	ble.n	800959e <_strtod_l+0x3ae>
 80095f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095f4:	1b2c      	subs	r4, r5, r4
 80095f6:	441c      	add	r4, r3
 80095f8:	2c00      	cmp	r4, #0
 80095fa:	f340 8096 	ble.w	800972a <_strtod_l+0x53a>
 80095fe:	f014 030f 	ands.w	r3, r4, #15
 8009602:	d00a      	beq.n	800961a <_strtod_l+0x42a>
 8009604:	495e      	ldr	r1, [pc, #376]	@ (8009780 <_strtod_l+0x590>)
 8009606:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800960a:	4652      	mov	r2, sl
 800960c:	465b      	mov	r3, fp
 800960e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009612:	f7f7 f809 	bl	8000628 <__aeabi_dmul>
 8009616:	4682      	mov	sl, r0
 8009618:	468b      	mov	fp, r1
 800961a:	f034 040f 	bics.w	r4, r4, #15
 800961e:	d073      	beq.n	8009708 <_strtod_l+0x518>
 8009620:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009624:	dd48      	ble.n	80096b8 <_strtod_l+0x4c8>
 8009626:	2400      	movs	r4, #0
 8009628:	46a0      	mov	r8, r4
 800962a:	940a      	str	r4, [sp, #40]	@ 0x28
 800962c:	46a1      	mov	r9, r4
 800962e:	9a05      	ldr	r2, [sp, #20]
 8009630:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009788 <_strtod_l+0x598>
 8009634:	2322      	movs	r3, #34	@ 0x22
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f04f 0a00 	mov.w	sl, #0
 800963c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800963e:	2b00      	cmp	r3, #0
 8009640:	f43f ae0f 	beq.w	8009262 <_strtod_l+0x72>
 8009644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009646:	9805      	ldr	r0, [sp, #20]
 8009648:	f7ff f942 	bl	80088d0 <_Bfree>
 800964c:	9805      	ldr	r0, [sp, #20]
 800964e:	4649      	mov	r1, r9
 8009650:	f7ff f93e 	bl	80088d0 <_Bfree>
 8009654:	9805      	ldr	r0, [sp, #20]
 8009656:	4641      	mov	r1, r8
 8009658:	f7ff f93a 	bl	80088d0 <_Bfree>
 800965c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800965e:	9805      	ldr	r0, [sp, #20]
 8009660:	f7ff f936 	bl	80088d0 <_Bfree>
 8009664:	9805      	ldr	r0, [sp, #20]
 8009666:	4621      	mov	r1, r4
 8009668:	f7ff f932 	bl	80088d0 <_Bfree>
 800966c:	e5f9      	b.n	8009262 <_strtod_l+0x72>
 800966e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009670:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009674:	4293      	cmp	r3, r2
 8009676:	dbbc      	blt.n	80095f2 <_strtod_l+0x402>
 8009678:	4c41      	ldr	r4, [pc, #260]	@ (8009780 <_strtod_l+0x590>)
 800967a:	f1c5 050f 	rsb	r5, r5, #15
 800967e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009682:	4652      	mov	r2, sl
 8009684:	465b      	mov	r3, fp
 8009686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800968a:	f7f6 ffcd 	bl	8000628 <__aeabi_dmul>
 800968e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009690:	1b5d      	subs	r5, r3, r5
 8009692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800969a:	e78f      	b.n	80095bc <_strtod_l+0x3cc>
 800969c:	3316      	adds	r3, #22
 800969e:	dba8      	blt.n	80095f2 <_strtod_l+0x402>
 80096a0:	4b37      	ldr	r3, [pc, #220]	@ (8009780 <_strtod_l+0x590>)
 80096a2:	eba9 0808 	sub.w	r8, r9, r8
 80096a6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80096aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80096ae:	4650      	mov	r0, sl
 80096b0:	4659      	mov	r1, fp
 80096b2:	f7f7 f8e3 	bl	800087c <__aeabi_ddiv>
 80096b6:	e783      	b.n	80095c0 <_strtod_l+0x3d0>
 80096b8:	4b32      	ldr	r3, [pc, #200]	@ (8009784 <_strtod_l+0x594>)
 80096ba:	9308      	str	r3, [sp, #32]
 80096bc:	2300      	movs	r3, #0
 80096be:	1124      	asrs	r4, r4, #4
 80096c0:	4650      	mov	r0, sl
 80096c2:	4659      	mov	r1, fp
 80096c4:	461e      	mov	r6, r3
 80096c6:	2c01      	cmp	r4, #1
 80096c8:	dc21      	bgt.n	800970e <_strtod_l+0x51e>
 80096ca:	b10b      	cbz	r3, 80096d0 <_strtod_l+0x4e0>
 80096cc:	4682      	mov	sl, r0
 80096ce:	468b      	mov	fp, r1
 80096d0:	492c      	ldr	r1, [pc, #176]	@ (8009784 <_strtod_l+0x594>)
 80096d2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80096d6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80096da:	4652      	mov	r2, sl
 80096dc:	465b      	mov	r3, fp
 80096de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096e2:	f7f6 ffa1 	bl	8000628 <__aeabi_dmul>
 80096e6:	4b28      	ldr	r3, [pc, #160]	@ (8009788 <_strtod_l+0x598>)
 80096e8:	460a      	mov	r2, r1
 80096ea:	400b      	ands	r3, r1
 80096ec:	4927      	ldr	r1, [pc, #156]	@ (800978c <_strtod_l+0x59c>)
 80096ee:	428b      	cmp	r3, r1
 80096f0:	4682      	mov	sl, r0
 80096f2:	d898      	bhi.n	8009626 <_strtod_l+0x436>
 80096f4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80096f8:	428b      	cmp	r3, r1
 80096fa:	bf86      	itte	hi
 80096fc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009790 <_strtod_l+0x5a0>
 8009700:	f04f 3aff 	movhi.w	sl, #4294967295
 8009704:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009708:	2300      	movs	r3, #0
 800970a:	9308      	str	r3, [sp, #32]
 800970c:	e07a      	b.n	8009804 <_strtod_l+0x614>
 800970e:	07e2      	lsls	r2, r4, #31
 8009710:	d505      	bpl.n	800971e <_strtod_l+0x52e>
 8009712:	9b08      	ldr	r3, [sp, #32]
 8009714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009718:	f7f6 ff86 	bl	8000628 <__aeabi_dmul>
 800971c:	2301      	movs	r3, #1
 800971e:	9a08      	ldr	r2, [sp, #32]
 8009720:	3208      	adds	r2, #8
 8009722:	3601      	adds	r6, #1
 8009724:	1064      	asrs	r4, r4, #1
 8009726:	9208      	str	r2, [sp, #32]
 8009728:	e7cd      	b.n	80096c6 <_strtod_l+0x4d6>
 800972a:	d0ed      	beq.n	8009708 <_strtod_l+0x518>
 800972c:	4264      	negs	r4, r4
 800972e:	f014 020f 	ands.w	r2, r4, #15
 8009732:	d00a      	beq.n	800974a <_strtod_l+0x55a>
 8009734:	4b12      	ldr	r3, [pc, #72]	@ (8009780 <_strtod_l+0x590>)
 8009736:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800973a:	4650      	mov	r0, sl
 800973c:	4659      	mov	r1, fp
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f7f7 f89b 	bl	800087c <__aeabi_ddiv>
 8009746:	4682      	mov	sl, r0
 8009748:	468b      	mov	fp, r1
 800974a:	1124      	asrs	r4, r4, #4
 800974c:	d0dc      	beq.n	8009708 <_strtod_l+0x518>
 800974e:	2c1f      	cmp	r4, #31
 8009750:	dd20      	ble.n	8009794 <_strtod_l+0x5a4>
 8009752:	2400      	movs	r4, #0
 8009754:	46a0      	mov	r8, r4
 8009756:	940a      	str	r4, [sp, #40]	@ 0x28
 8009758:	46a1      	mov	r9, r4
 800975a:	9a05      	ldr	r2, [sp, #20]
 800975c:	2322      	movs	r3, #34	@ 0x22
 800975e:	f04f 0a00 	mov.w	sl, #0
 8009762:	f04f 0b00 	mov.w	fp, #0
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	e768      	b.n	800963c <_strtod_l+0x44c>
 800976a:	bf00      	nop
 800976c:	0800b9da 	.word	0x0800b9da
 8009770:	0800bbec 	.word	0x0800bbec
 8009774:	0800b9d2 	.word	0x0800b9d2
 8009778:	0800ba09 	.word	0x0800ba09
 800977c:	0800bd95 	.word	0x0800bd95
 8009780:	0800bb20 	.word	0x0800bb20
 8009784:	0800baf8 	.word	0x0800baf8
 8009788:	7ff00000 	.word	0x7ff00000
 800978c:	7ca00000 	.word	0x7ca00000
 8009790:	7fefffff 	.word	0x7fefffff
 8009794:	f014 0310 	ands.w	r3, r4, #16
 8009798:	bf18      	it	ne
 800979a:	236a      	movne	r3, #106	@ 0x6a
 800979c:	4ea9      	ldr	r6, [pc, #676]	@ (8009a44 <_strtod_l+0x854>)
 800979e:	9308      	str	r3, [sp, #32]
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	2300      	movs	r3, #0
 80097a6:	07e2      	lsls	r2, r4, #31
 80097a8:	d504      	bpl.n	80097b4 <_strtod_l+0x5c4>
 80097aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80097ae:	f7f6 ff3b 	bl	8000628 <__aeabi_dmul>
 80097b2:	2301      	movs	r3, #1
 80097b4:	1064      	asrs	r4, r4, #1
 80097b6:	f106 0608 	add.w	r6, r6, #8
 80097ba:	d1f4      	bne.n	80097a6 <_strtod_l+0x5b6>
 80097bc:	b10b      	cbz	r3, 80097c2 <_strtod_l+0x5d2>
 80097be:	4682      	mov	sl, r0
 80097c0:	468b      	mov	fp, r1
 80097c2:	9b08      	ldr	r3, [sp, #32]
 80097c4:	b1b3      	cbz	r3, 80097f4 <_strtod_l+0x604>
 80097c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80097ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	4659      	mov	r1, fp
 80097d2:	dd0f      	ble.n	80097f4 <_strtod_l+0x604>
 80097d4:	2b1f      	cmp	r3, #31
 80097d6:	dd55      	ble.n	8009884 <_strtod_l+0x694>
 80097d8:	2b34      	cmp	r3, #52	@ 0x34
 80097da:	bfde      	ittt	le
 80097dc:	f04f 33ff 	movle.w	r3, #4294967295
 80097e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80097e4:	4093      	lslle	r3, r2
 80097e6:	f04f 0a00 	mov.w	sl, #0
 80097ea:	bfcc      	ite	gt
 80097ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80097f0:	ea03 0b01 	andle.w	fp, r3, r1
 80097f4:	2200      	movs	r2, #0
 80097f6:	2300      	movs	r3, #0
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	f7f7 f97c 	bl	8000af8 <__aeabi_dcmpeq>
 8009800:	2800      	cmp	r0, #0
 8009802:	d1a6      	bne.n	8009752 <_strtod_l+0x562>
 8009804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800980a:	9805      	ldr	r0, [sp, #20]
 800980c:	462b      	mov	r3, r5
 800980e:	463a      	mov	r2, r7
 8009810:	f7ff f8c6 	bl	80089a0 <__s2b>
 8009814:	900a      	str	r0, [sp, #40]	@ 0x28
 8009816:	2800      	cmp	r0, #0
 8009818:	f43f af05 	beq.w	8009626 <_strtod_l+0x436>
 800981c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800981e:	2a00      	cmp	r2, #0
 8009820:	eba9 0308 	sub.w	r3, r9, r8
 8009824:	bfa8      	it	ge
 8009826:	2300      	movge	r3, #0
 8009828:	9312      	str	r3, [sp, #72]	@ 0x48
 800982a:	2400      	movs	r4, #0
 800982c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009830:	9316      	str	r3, [sp, #88]	@ 0x58
 8009832:	46a0      	mov	r8, r4
 8009834:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009836:	9805      	ldr	r0, [sp, #20]
 8009838:	6859      	ldr	r1, [r3, #4]
 800983a:	f7ff f809 	bl	8008850 <_Balloc>
 800983e:	4681      	mov	r9, r0
 8009840:	2800      	cmp	r0, #0
 8009842:	f43f aef4 	beq.w	800962e <_strtod_l+0x43e>
 8009846:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009848:	691a      	ldr	r2, [r3, #16]
 800984a:	3202      	adds	r2, #2
 800984c:	f103 010c 	add.w	r1, r3, #12
 8009850:	0092      	lsls	r2, r2, #2
 8009852:	300c      	adds	r0, #12
 8009854:	f7fe f899 	bl	800798a <memcpy>
 8009858:	ec4b ab10 	vmov	d0, sl, fp
 800985c:	9805      	ldr	r0, [sp, #20]
 800985e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009860:	a91b      	add	r1, sp, #108	@ 0x6c
 8009862:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009866:	f7ff fbd7 	bl	8009018 <__d2b>
 800986a:	901a      	str	r0, [sp, #104]	@ 0x68
 800986c:	2800      	cmp	r0, #0
 800986e:	f43f aede 	beq.w	800962e <_strtod_l+0x43e>
 8009872:	9805      	ldr	r0, [sp, #20]
 8009874:	2101      	movs	r1, #1
 8009876:	f7ff f929 	bl	8008acc <__i2b>
 800987a:	4680      	mov	r8, r0
 800987c:	b948      	cbnz	r0, 8009892 <_strtod_l+0x6a2>
 800987e:	f04f 0800 	mov.w	r8, #0
 8009882:	e6d4      	b.n	800962e <_strtod_l+0x43e>
 8009884:	f04f 32ff 	mov.w	r2, #4294967295
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	ea03 0a0a 	and.w	sl, r3, sl
 8009890:	e7b0      	b.n	80097f4 <_strtod_l+0x604>
 8009892:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009894:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009896:	2d00      	cmp	r5, #0
 8009898:	bfab      	itete	ge
 800989a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800989c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800989e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80098a0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80098a2:	bfac      	ite	ge
 80098a4:	18ef      	addge	r7, r5, r3
 80098a6:	1b5e      	sublt	r6, r3, r5
 80098a8:	9b08      	ldr	r3, [sp, #32]
 80098aa:	1aed      	subs	r5, r5, r3
 80098ac:	4415      	add	r5, r2
 80098ae:	4b66      	ldr	r3, [pc, #408]	@ (8009a48 <_strtod_l+0x858>)
 80098b0:	3d01      	subs	r5, #1
 80098b2:	429d      	cmp	r5, r3
 80098b4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80098b8:	da50      	bge.n	800995c <_strtod_l+0x76c>
 80098ba:	1b5b      	subs	r3, r3, r5
 80098bc:	2b1f      	cmp	r3, #31
 80098be:	eba2 0203 	sub.w	r2, r2, r3
 80098c2:	f04f 0101 	mov.w	r1, #1
 80098c6:	dc3d      	bgt.n	8009944 <_strtod_l+0x754>
 80098c8:	fa01 f303 	lsl.w	r3, r1, r3
 80098cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098ce:	2300      	movs	r3, #0
 80098d0:	9310      	str	r3, [sp, #64]	@ 0x40
 80098d2:	18bd      	adds	r5, r7, r2
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	42af      	cmp	r7, r5
 80098d8:	4416      	add	r6, r2
 80098da:	441e      	add	r6, r3
 80098dc:	463b      	mov	r3, r7
 80098de:	bfa8      	it	ge
 80098e0:	462b      	movge	r3, r5
 80098e2:	42b3      	cmp	r3, r6
 80098e4:	bfa8      	it	ge
 80098e6:	4633      	movge	r3, r6
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	bfc2      	ittt	gt
 80098ec:	1aed      	subgt	r5, r5, r3
 80098ee:	1af6      	subgt	r6, r6, r3
 80098f0:	1aff      	subgt	r7, r7, r3
 80098f2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	dd16      	ble.n	8009926 <_strtod_l+0x736>
 80098f8:	4641      	mov	r1, r8
 80098fa:	9805      	ldr	r0, [sp, #20]
 80098fc:	461a      	mov	r2, r3
 80098fe:	f7ff f9a5 	bl	8008c4c <__pow5mult>
 8009902:	4680      	mov	r8, r0
 8009904:	2800      	cmp	r0, #0
 8009906:	d0ba      	beq.n	800987e <_strtod_l+0x68e>
 8009908:	4601      	mov	r1, r0
 800990a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800990c:	9805      	ldr	r0, [sp, #20]
 800990e:	f7ff f8f3 	bl	8008af8 <__multiply>
 8009912:	900e      	str	r0, [sp, #56]	@ 0x38
 8009914:	2800      	cmp	r0, #0
 8009916:	f43f ae8a 	beq.w	800962e <_strtod_l+0x43e>
 800991a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800991c:	9805      	ldr	r0, [sp, #20]
 800991e:	f7fe ffd7 	bl	80088d0 <_Bfree>
 8009922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009924:	931a      	str	r3, [sp, #104]	@ 0x68
 8009926:	2d00      	cmp	r5, #0
 8009928:	dc1d      	bgt.n	8009966 <_strtod_l+0x776>
 800992a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800992c:	2b00      	cmp	r3, #0
 800992e:	dd23      	ble.n	8009978 <_strtod_l+0x788>
 8009930:	4649      	mov	r1, r9
 8009932:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009934:	9805      	ldr	r0, [sp, #20]
 8009936:	f7ff f989 	bl	8008c4c <__pow5mult>
 800993a:	4681      	mov	r9, r0
 800993c:	b9e0      	cbnz	r0, 8009978 <_strtod_l+0x788>
 800993e:	f04f 0900 	mov.w	r9, #0
 8009942:	e674      	b.n	800962e <_strtod_l+0x43e>
 8009944:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009948:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800994c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009950:	35e2      	adds	r5, #226	@ 0xe2
 8009952:	fa01 f305 	lsl.w	r3, r1, r5
 8009956:	9310      	str	r3, [sp, #64]	@ 0x40
 8009958:	9113      	str	r1, [sp, #76]	@ 0x4c
 800995a:	e7ba      	b.n	80098d2 <_strtod_l+0x6e2>
 800995c:	2300      	movs	r3, #0
 800995e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009960:	2301      	movs	r3, #1
 8009962:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009964:	e7b5      	b.n	80098d2 <_strtod_l+0x6e2>
 8009966:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009968:	9805      	ldr	r0, [sp, #20]
 800996a:	462a      	mov	r2, r5
 800996c:	f7ff f9c8 	bl	8008d00 <__lshift>
 8009970:	901a      	str	r0, [sp, #104]	@ 0x68
 8009972:	2800      	cmp	r0, #0
 8009974:	d1d9      	bne.n	800992a <_strtod_l+0x73a>
 8009976:	e65a      	b.n	800962e <_strtod_l+0x43e>
 8009978:	2e00      	cmp	r6, #0
 800997a:	dd07      	ble.n	800998c <_strtod_l+0x79c>
 800997c:	4649      	mov	r1, r9
 800997e:	9805      	ldr	r0, [sp, #20]
 8009980:	4632      	mov	r2, r6
 8009982:	f7ff f9bd 	bl	8008d00 <__lshift>
 8009986:	4681      	mov	r9, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	d0d8      	beq.n	800993e <_strtod_l+0x74e>
 800998c:	2f00      	cmp	r7, #0
 800998e:	dd08      	ble.n	80099a2 <_strtod_l+0x7b2>
 8009990:	4641      	mov	r1, r8
 8009992:	9805      	ldr	r0, [sp, #20]
 8009994:	463a      	mov	r2, r7
 8009996:	f7ff f9b3 	bl	8008d00 <__lshift>
 800999a:	4680      	mov	r8, r0
 800999c:	2800      	cmp	r0, #0
 800999e:	f43f ae46 	beq.w	800962e <_strtod_l+0x43e>
 80099a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099a4:	9805      	ldr	r0, [sp, #20]
 80099a6:	464a      	mov	r2, r9
 80099a8:	f7ff fa32 	bl	8008e10 <__mdiff>
 80099ac:	4604      	mov	r4, r0
 80099ae:	2800      	cmp	r0, #0
 80099b0:	f43f ae3d 	beq.w	800962e <_strtod_l+0x43e>
 80099b4:	68c3      	ldr	r3, [r0, #12]
 80099b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099b8:	2300      	movs	r3, #0
 80099ba:	60c3      	str	r3, [r0, #12]
 80099bc:	4641      	mov	r1, r8
 80099be:	f7ff fa0b 	bl	8008dd8 <__mcmp>
 80099c2:	2800      	cmp	r0, #0
 80099c4:	da46      	bge.n	8009a54 <_strtod_l+0x864>
 80099c6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099c8:	ea53 030a 	orrs.w	r3, r3, sl
 80099cc:	d16c      	bne.n	8009aa8 <_strtod_l+0x8b8>
 80099ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d168      	bne.n	8009aa8 <_strtod_l+0x8b8>
 80099d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80099da:	0d1b      	lsrs	r3, r3, #20
 80099dc:	051b      	lsls	r3, r3, #20
 80099de:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80099e2:	d961      	bls.n	8009aa8 <_strtod_l+0x8b8>
 80099e4:	6963      	ldr	r3, [r4, #20]
 80099e6:	b913      	cbnz	r3, 80099ee <_strtod_l+0x7fe>
 80099e8:	6923      	ldr	r3, [r4, #16]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	dd5c      	ble.n	8009aa8 <_strtod_l+0x8b8>
 80099ee:	4621      	mov	r1, r4
 80099f0:	2201      	movs	r2, #1
 80099f2:	9805      	ldr	r0, [sp, #20]
 80099f4:	f7ff f984 	bl	8008d00 <__lshift>
 80099f8:	4641      	mov	r1, r8
 80099fa:	4604      	mov	r4, r0
 80099fc:	f7ff f9ec 	bl	8008dd8 <__mcmp>
 8009a00:	2800      	cmp	r0, #0
 8009a02:	dd51      	ble.n	8009aa8 <_strtod_l+0x8b8>
 8009a04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a08:	9a08      	ldr	r2, [sp, #32]
 8009a0a:	0d1b      	lsrs	r3, r3, #20
 8009a0c:	051b      	lsls	r3, r3, #20
 8009a0e:	2a00      	cmp	r2, #0
 8009a10:	d06b      	beq.n	8009aea <_strtod_l+0x8fa>
 8009a12:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009a16:	d868      	bhi.n	8009aea <_strtod_l+0x8fa>
 8009a18:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009a1c:	f67f ae9d 	bls.w	800975a <_strtod_l+0x56a>
 8009a20:	4b0a      	ldr	r3, [pc, #40]	@ (8009a4c <_strtod_l+0x85c>)
 8009a22:	4650      	mov	r0, sl
 8009a24:	4659      	mov	r1, fp
 8009a26:	2200      	movs	r2, #0
 8009a28:	f7f6 fdfe 	bl	8000628 <__aeabi_dmul>
 8009a2c:	4b08      	ldr	r3, [pc, #32]	@ (8009a50 <_strtod_l+0x860>)
 8009a2e:	400b      	ands	r3, r1
 8009a30:	4682      	mov	sl, r0
 8009a32:	468b      	mov	fp, r1
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	f47f ae05 	bne.w	8009644 <_strtod_l+0x454>
 8009a3a:	9a05      	ldr	r2, [sp, #20]
 8009a3c:	2322      	movs	r3, #34	@ 0x22
 8009a3e:	6013      	str	r3, [r2, #0]
 8009a40:	e600      	b.n	8009644 <_strtod_l+0x454>
 8009a42:	bf00      	nop
 8009a44:	0800bc18 	.word	0x0800bc18
 8009a48:	fffffc02 	.word	0xfffffc02
 8009a4c:	39500000 	.word	0x39500000
 8009a50:	7ff00000 	.word	0x7ff00000
 8009a54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009a58:	d165      	bne.n	8009b26 <_strtod_l+0x936>
 8009a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a60:	b35a      	cbz	r2, 8009aba <_strtod_l+0x8ca>
 8009a62:	4a9f      	ldr	r2, [pc, #636]	@ (8009ce0 <_strtod_l+0xaf0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d12b      	bne.n	8009ac0 <_strtod_l+0x8d0>
 8009a68:	9b08      	ldr	r3, [sp, #32]
 8009a6a:	4651      	mov	r1, sl
 8009a6c:	b303      	cbz	r3, 8009ab0 <_strtod_l+0x8c0>
 8009a6e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ce4 <_strtod_l+0xaf4>)
 8009a70:	465a      	mov	r2, fp
 8009a72:	4013      	ands	r3, r2
 8009a74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009a78:	f04f 32ff 	mov.w	r2, #4294967295
 8009a7c:	d81b      	bhi.n	8009ab6 <_strtod_l+0x8c6>
 8009a7e:	0d1b      	lsrs	r3, r3, #20
 8009a80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009a84:	fa02 f303 	lsl.w	r3, r2, r3
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d119      	bne.n	8009ac0 <_strtod_l+0x8d0>
 8009a8c:	4b96      	ldr	r3, [pc, #600]	@ (8009ce8 <_strtod_l+0xaf8>)
 8009a8e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d102      	bne.n	8009a9a <_strtod_l+0x8aa>
 8009a94:	3101      	adds	r1, #1
 8009a96:	f43f adca 	beq.w	800962e <_strtod_l+0x43e>
 8009a9a:	4b92      	ldr	r3, [pc, #584]	@ (8009ce4 <_strtod_l+0xaf4>)
 8009a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a9e:	401a      	ands	r2, r3
 8009aa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009aa4:	f04f 0a00 	mov.w	sl, #0
 8009aa8:	9b08      	ldr	r3, [sp, #32]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1b8      	bne.n	8009a20 <_strtod_l+0x830>
 8009aae:	e5c9      	b.n	8009644 <_strtod_l+0x454>
 8009ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ab4:	e7e8      	b.n	8009a88 <_strtod_l+0x898>
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	e7e6      	b.n	8009a88 <_strtod_l+0x898>
 8009aba:	ea53 030a 	orrs.w	r3, r3, sl
 8009abe:	d0a1      	beq.n	8009a04 <_strtod_l+0x814>
 8009ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009ac2:	b1db      	cbz	r3, 8009afc <_strtod_l+0x90c>
 8009ac4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ac6:	4213      	tst	r3, r2
 8009ac8:	d0ee      	beq.n	8009aa8 <_strtod_l+0x8b8>
 8009aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009acc:	9a08      	ldr	r2, [sp, #32]
 8009ace:	4650      	mov	r0, sl
 8009ad0:	4659      	mov	r1, fp
 8009ad2:	b1bb      	cbz	r3, 8009b04 <_strtod_l+0x914>
 8009ad4:	f7ff fb6e 	bl	80091b4 <sulp>
 8009ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009adc:	ec53 2b10 	vmov	r2, r3, d0
 8009ae0:	f7f6 fbec 	bl	80002bc <__adddf3>
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	468b      	mov	fp, r1
 8009ae8:	e7de      	b.n	8009aa8 <_strtod_l+0x8b8>
 8009aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009af2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009af6:	f04f 3aff 	mov.w	sl, #4294967295
 8009afa:	e7d5      	b.n	8009aa8 <_strtod_l+0x8b8>
 8009afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009afe:	ea13 0f0a 	tst.w	r3, sl
 8009b02:	e7e1      	b.n	8009ac8 <_strtod_l+0x8d8>
 8009b04:	f7ff fb56 	bl	80091b4 <sulp>
 8009b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009b0c:	ec53 2b10 	vmov	r2, r3, d0
 8009b10:	f7f6 fbd2 	bl	80002b8 <__aeabi_dsub>
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	4682      	mov	sl, r0
 8009b1a:	468b      	mov	fp, r1
 8009b1c:	f7f6 ffec 	bl	8000af8 <__aeabi_dcmpeq>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d0c1      	beq.n	8009aa8 <_strtod_l+0x8b8>
 8009b24:	e619      	b.n	800975a <_strtod_l+0x56a>
 8009b26:	4641      	mov	r1, r8
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f7ff facd 	bl	80090c8 <__ratio>
 8009b2e:	ec57 6b10 	vmov	r6, r7, d0
 8009b32:	2200      	movs	r2, #0
 8009b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009b38:	4630      	mov	r0, r6
 8009b3a:	4639      	mov	r1, r7
 8009b3c:	f7f6 fff0 	bl	8000b20 <__aeabi_dcmple>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d06f      	beq.n	8009c24 <_strtod_l+0xa34>
 8009b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d17a      	bne.n	8009c40 <_strtod_l+0xa50>
 8009b4a:	f1ba 0f00 	cmp.w	sl, #0
 8009b4e:	d158      	bne.n	8009c02 <_strtod_l+0xa12>
 8009b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d15a      	bne.n	8009c10 <_strtod_l+0xa20>
 8009b5a:	4b64      	ldr	r3, [pc, #400]	@ (8009cec <_strtod_l+0xafc>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	4639      	mov	r1, r7
 8009b62:	f7f6 ffd3 	bl	8000b0c <__aeabi_dcmplt>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d159      	bne.n	8009c1e <_strtod_l+0xa2e>
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	4639      	mov	r1, r7
 8009b6e:	4b60      	ldr	r3, [pc, #384]	@ (8009cf0 <_strtod_l+0xb00>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	f7f6 fd59 	bl	8000628 <__aeabi_dmul>
 8009b76:	4606      	mov	r6, r0
 8009b78:	460f      	mov	r7, r1
 8009b7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009b7e:	9606      	str	r6, [sp, #24]
 8009b80:	9307      	str	r3, [sp, #28]
 8009b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009b86:	4d57      	ldr	r5, [pc, #348]	@ (8009ce4 <_strtod_l+0xaf4>)
 8009b88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b8e:	401d      	ands	r5, r3
 8009b90:	4b58      	ldr	r3, [pc, #352]	@ (8009cf4 <_strtod_l+0xb04>)
 8009b92:	429d      	cmp	r5, r3
 8009b94:	f040 80b2 	bne.w	8009cfc <_strtod_l+0xb0c>
 8009b98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009b9e:	ec4b ab10 	vmov	d0, sl, fp
 8009ba2:	f7ff f9c9 	bl	8008f38 <__ulp>
 8009ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009baa:	ec51 0b10 	vmov	r0, r1, d0
 8009bae:	f7f6 fd3b 	bl	8000628 <__aeabi_dmul>
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	465b      	mov	r3, fp
 8009bb6:	f7f6 fb81 	bl	80002bc <__adddf3>
 8009bba:	460b      	mov	r3, r1
 8009bbc:	4949      	ldr	r1, [pc, #292]	@ (8009ce4 <_strtod_l+0xaf4>)
 8009bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8009cf8 <_strtod_l+0xb08>)
 8009bc0:	4019      	ands	r1, r3
 8009bc2:	4291      	cmp	r1, r2
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	d942      	bls.n	8009c4e <_strtod_l+0xa5e>
 8009bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bca:	4b47      	ldr	r3, [pc, #284]	@ (8009ce8 <_strtod_l+0xaf8>)
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d103      	bne.n	8009bd8 <_strtod_l+0x9e8>
 8009bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	f43f ad2b 	beq.w	800962e <_strtod_l+0x43e>
 8009bd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ce8 <_strtod_l+0xaf8>
 8009bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8009be0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009be2:	9805      	ldr	r0, [sp, #20]
 8009be4:	f7fe fe74 	bl	80088d0 <_Bfree>
 8009be8:	9805      	ldr	r0, [sp, #20]
 8009bea:	4649      	mov	r1, r9
 8009bec:	f7fe fe70 	bl	80088d0 <_Bfree>
 8009bf0:	9805      	ldr	r0, [sp, #20]
 8009bf2:	4641      	mov	r1, r8
 8009bf4:	f7fe fe6c 	bl	80088d0 <_Bfree>
 8009bf8:	9805      	ldr	r0, [sp, #20]
 8009bfa:	4621      	mov	r1, r4
 8009bfc:	f7fe fe68 	bl	80088d0 <_Bfree>
 8009c00:	e618      	b.n	8009834 <_strtod_l+0x644>
 8009c02:	f1ba 0f01 	cmp.w	sl, #1
 8009c06:	d103      	bne.n	8009c10 <_strtod_l+0xa20>
 8009c08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f43f ada5 	beq.w	800975a <_strtod_l+0x56a>
 8009c10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009cc0 <_strtod_l+0xad0>
 8009c14:	4f35      	ldr	r7, [pc, #212]	@ (8009cec <_strtod_l+0xafc>)
 8009c16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c1a:	2600      	movs	r6, #0
 8009c1c:	e7b1      	b.n	8009b82 <_strtod_l+0x992>
 8009c1e:	4f34      	ldr	r7, [pc, #208]	@ (8009cf0 <_strtod_l+0xb00>)
 8009c20:	2600      	movs	r6, #0
 8009c22:	e7aa      	b.n	8009b7a <_strtod_l+0x98a>
 8009c24:	4b32      	ldr	r3, [pc, #200]	@ (8009cf0 <_strtod_l+0xb00>)
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f7f6 fcfc 	bl	8000628 <__aeabi_dmul>
 8009c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c32:	4606      	mov	r6, r0
 8009c34:	460f      	mov	r7, r1
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d09f      	beq.n	8009b7a <_strtod_l+0x98a>
 8009c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009c3e:	e7a0      	b.n	8009b82 <_strtod_l+0x992>
 8009c40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009cc8 <_strtod_l+0xad8>
 8009c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009c48:	ec57 6b17 	vmov	r6, r7, d7
 8009c4c:	e799      	b.n	8009b82 <_strtod_l+0x992>
 8009c4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009c52:	9b08      	ldr	r3, [sp, #32]
 8009c54:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1c1      	bne.n	8009be0 <_strtod_l+0x9f0>
 8009c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009c60:	0d1b      	lsrs	r3, r3, #20
 8009c62:	051b      	lsls	r3, r3, #20
 8009c64:	429d      	cmp	r5, r3
 8009c66:	d1bb      	bne.n	8009be0 <_strtod_l+0x9f0>
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f7 f83c 	bl	8000ce8 <__aeabi_d2lz>
 8009c70:	f7f6 fcac 	bl	80005cc <__aeabi_l2d>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4630      	mov	r0, r6
 8009c7a:	4639      	mov	r1, r7
 8009c7c:	f7f6 fb1c 	bl	80002b8 <__aeabi_dsub>
 8009c80:	460b      	mov	r3, r1
 8009c82:	4602      	mov	r2, r0
 8009c84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009c88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c8e:	ea46 060a 	orr.w	r6, r6, sl
 8009c92:	431e      	orrs	r6, r3
 8009c94:	d06f      	beq.n	8009d76 <_strtod_l+0xb86>
 8009c96:	a30e      	add	r3, pc, #56	@ (adr r3, 8009cd0 <_strtod_l+0xae0>)
 8009c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c9c:	f7f6 ff36 	bl	8000b0c <__aeabi_dcmplt>
 8009ca0:	2800      	cmp	r0, #0
 8009ca2:	f47f accf 	bne.w	8009644 <_strtod_l+0x454>
 8009ca6:	a30c      	add	r3, pc, #48	@ (adr r3, 8009cd8 <_strtod_l+0xae8>)
 8009ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009cb0:	f7f6 ff4a 	bl	8000b48 <__aeabi_dcmpgt>
 8009cb4:	2800      	cmp	r0, #0
 8009cb6:	d093      	beq.n	8009be0 <_strtod_l+0x9f0>
 8009cb8:	e4c4      	b.n	8009644 <_strtod_l+0x454>
 8009cba:	bf00      	nop
 8009cbc:	f3af 8000 	nop.w
 8009cc0:	00000000 	.word	0x00000000
 8009cc4:	bff00000 	.word	0xbff00000
 8009cc8:	00000000 	.word	0x00000000
 8009ccc:	3ff00000 	.word	0x3ff00000
 8009cd0:	94a03595 	.word	0x94a03595
 8009cd4:	3fdfffff 	.word	0x3fdfffff
 8009cd8:	35afe535 	.word	0x35afe535
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	000fffff 	.word	0x000fffff
 8009ce4:	7ff00000 	.word	0x7ff00000
 8009ce8:	7fefffff 	.word	0x7fefffff
 8009cec:	3ff00000 	.word	0x3ff00000
 8009cf0:	3fe00000 	.word	0x3fe00000
 8009cf4:	7fe00000 	.word	0x7fe00000
 8009cf8:	7c9fffff 	.word	0x7c9fffff
 8009cfc:	9b08      	ldr	r3, [sp, #32]
 8009cfe:	b323      	cbz	r3, 8009d4a <_strtod_l+0xb5a>
 8009d00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009d04:	d821      	bhi.n	8009d4a <_strtod_l+0xb5a>
 8009d06:	a328      	add	r3, pc, #160	@ (adr r3, 8009da8 <_strtod_l+0xbb8>)
 8009d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0c:	4630      	mov	r0, r6
 8009d0e:	4639      	mov	r1, r7
 8009d10:	f7f6 ff06 	bl	8000b20 <__aeabi_dcmple>
 8009d14:	b1a0      	cbz	r0, 8009d40 <_strtod_l+0xb50>
 8009d16:	4639      	mov	r1, r7
 8009d18:	4630      	mov	r0, r6
 8009d1a:	f7f6 ff5d 	bl	8000bd8 <__aeabi_d2uiz>
 8009d1e:	2801      	cmp	r0, #1
 8009d20:	bf38      	it	cc
 8009d22:	2001      	movcc	r0, #1
 8009d24:	f7f6 fc06 	bl	8000534 <__aeabi_ui2d>
 8009d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d2a:	4606      	mov	r6, r0
 8009d2c:	460f      	mov	r7, r1
 8009d2e:	b9fb      	cbnz	r3, 8009d70 <_strtod_l+0xb80>
 8009d30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009d34:	9014      	str	r0, [sp, #80]	@ 0x50
 8009d36:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009d40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009d46:	1b5b      	subs	r3, r3, r5
 8009d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8009d4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009d4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009d52:	f7ff f8f1 	bl	8008f38 <__ulp>
 8009d56:	4650      	mov	r0, sl
 8009d58:	ec53 2b10 	vmov	r2, r3, d0
 8009d5c:	4659      	mov	r1, fp
 8009d5e:	f7f6 fc63 	bl	8000628 <__aeabi_dmul>
 8009d62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d66:	f7f6 faa9 	bl	80002bc <__adddf3>
 8009d6a:	4682      	mov	sl, r0
 8009d6c:	468b      	mov	fp, r1
 8009d6e:	e770      	b.n	8009c52 <_strtod_l+0xa62>
 8009d70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009d74:	e7e0      	b.n	8009d38 <_strtod_l+0xb48>
 8009d76:	a30e      	add	r3, pc, #56	@ (adr r3, 8009db0 <_strtod_l+0xbc0>)
 8009d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7c:	f7f6 fec6 	bl	8000b0c <__aeabi_dcmplt>
 8009d80:	e798      	b.n	8009cb4 <_strtod_l+0xac4>
 8009d82:	2300      	movs	r3, #0
 8009d84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	f7ff ba6d 	b.w	800926a <_strtod_l+0x7a>
 8009d90:	2a65      	cmp	r2, #101	@ 0x65
 8009d92:	f43f ab66 	beq.w	8009462 <_strtod_l+0x272>
 8009d96:	2a45      	cmp	r2, #69	@ 0x45
 8009d98:	f43f ab63 	beq.w	8009462 <_strtod_l+0x272>
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	f7ff bb9e 	b.w	80094de <_strtod_l+0x2ee>
 8009da2:	bf00      	nop
 8009da4:	f3af 8000 	nop.w
 8009da8:	ffc00000 	.word	0xffc00000
 8009dac:	41dfffff 	.word	0x41dfffff
 8009db0:	94a03595 	.word	0x94a03595
 8009db4:	3fcfffff 	.word	0x3fcfffff

08009db8 <_strtod_r>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	@ (8009dc0 <_strtod_r+0x8>)
 8009dba:	f7ff ba19 	b.w	80091f0 <_strtod_l>
 8009dbe:	bf00      	nop
 8009dc0:	20000128 	.word	0x20000128

08009dc4 <_strtol_l.constprop.0>:
 8009dc4:	2b24      	cmp	r3, #36	@ 0x24
 8009dc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dca:	4686      	mov	lr, r0
 8009dcc:	4690      	mov	r8, r2
 8009dce:	d801      	bhi.n	8009dd4 <_strtol_l.constprop.0+0x10>
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d106      	bne.n	8009de2 <_strtol_l.constprop.0+0x1e>
 8009dd4:	f7fd fdac 	bl	8007930 <__errno>
 8009dd8:	2316      	movs	r3, #22
 8009dda:	6003      	str	r3, [r0, #0]
 8009ddc:	2000      	movs	r0, #0
 8009dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de2:	4834      	ldr	r0, [pc, #208]	@ (8009eb4 <_strtol_l.constprop.0+0xf0>)
 8009de4:	460d      	mov	r5, r1
 8009de6:	462a      	mov	r2, r5
 8009de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dec:	5d06      	ldrb	r6, [r0, r4]
 8009dee:	f016 0608 	ands.w	r6, r6, #8
 8009df2:	d1f8      	bne.n	8009de6 <_strtol_l.constprop.0+0x22>
 8009df4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009df6:	d12d      	bne.n	8009e54 <_strtol_l.constprop.0+0x90>
 8009df8:	782c      	ldrb	r4, [r5, #0]
 8009dfa:	2601      	movs	r6, #1
 8009dfc:	1c95      	adds	r5, r2, #2
 8009dfe:	f033 0210 	bics.w	r2, r3, #16
 8009e02:	d109      	bne.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e04:	2c30      	cmp	r4, #48	@ 0x30
 8009e06:	d12a      	bne.n	8009e5e <_strtol_l.constprop.0+0x9a>
 8009e08:	782a      	ldrb	r2, [r5, #0]
 8009e0a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009e0e:	2a58      	cmp	r2, #88	@ 0x58
 8009e10:	d125      	bne.n	8009e5e <_strtol_l.constprop.0+0x9a>
 8009e12:	786c      	ldrb	r4, [r5, #1]
 8009e14:	2310      	movs	r3, #16
 8009e16:	3502      	adds	r5, #2
 8009e18:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009e1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009e20:	2200      	movs	r2, #0
 8009e22:	fbbc f9f3 	udiv	r9, ip, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	fb03 ca19 	mls	sl, r3, r9, ip
 8009e2c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009e30:	2f09      	cmp	r7, #9
 8009e32:	d81b      	bhi.n	8009e6c <_strtol_l.constprop.0+0xa8>
 8009e34:	463c      	mov	r4, r7
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	dd27      	ble.n	8009e8a <_strtol_l.constprop.0+0xc6>
 8009e3a:	1c57      	adds	r7, r2, #1
 8009e3c:	d007      	beq.n	8009e4e <_strtol_l.constprop.0+0x8a>
 8009e3e:	4581      	cmp	r9, r0
 8009e40:	d320      	bcc.n	8009e84 <_strtol_l.constprop.0+0xc0>
 8009e42:	d101      	bne.n	8009e48 <_strtol_l.constprop.0+0x84>
 8009e44:	45a2      	cmp	sl, r4
 8009e46:	db1d      	blt.n	8009e84 <_strtol_l.constprop.0+0xc0>
 8009e48:	fb00 4003 	mla	r0, r0, r3, r4
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e52:	e7eb      	b.n	8009e2c <_strtol_l.constprop.0+0x68>
 8009e54:	2c2b      	cmp	r4, #43	@ 0x2b
 8009e56:	bf04      	itt	eq
 8009e58:	782c      	ldrbeq	r4, [r5, #0]
 8009e5a:	1c95      	addeq	r5, r2, #2
 8009e5c:	e7cf      	b.n	8009dfe <_strtol_l.constprop.0+0x3a>
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1da      	bne.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e62:	2c30      	cmp	r4, #48	@ 0x30
 8009e64:	bf0c      	ite	eq
 8009e66:	2308      	moveq	r3, #8
 8009e68:	230a      	movne	r3, #10
 8009e6a:	e7d5      	b.n	8009e18 <_strtol_l.constprop.0+0x54>
 8009e6c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009e70:	2f19      	cmp	r7, #25
 8009e72:	d801      	bhi.n	8009e78 <_strtol_l.constprop.0+0xb4>
 8009e74:	3c37      	subs	r4, #55	@ 0x37
 8009e76:	e7de      	b.n	8009e36 <_strtol_l.constprop.0+0x72>
 8009e78:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009e7c:	2f19      	cmp	r7, #25
 8009e7e:	d804      	bhi.n	8009e8a <_strtol_l.constprop.0+0xc6>
 8009e80:	3c57      	subs	r4, #87	@ 0x57
 8009e82:	e7d8      	b.n	8009e36 <_strtol_l.constprop.0+0x72>
 8009e84:	f04f 32ff 	mov.w	r2, #4294967295
 8009e88:	e7e1      	b.n	8009e4e <_strtol_l.constprop.0+0x8a>
 8009e8a:	1c53      	adds	r3, r2, #1
 8009e8c:	d108      	bne.n	8009ea0 <_strtol_l.constprop.0+0xdc>
 8009e8e:	2322      	movs	r3, #34	@ 0x22
 8009e90:	f8ce 3000 	str.w	r3, [lr]
 8009e94:	4660      	mov	r0, ip
 8009e96:	f1b8 0f00 	cmp.w	r8, #0
 8009e9a:	d0a0      	beq.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009e9c:	1e69      	subs	r1, r5, #1
 8009e9e:	e006      	b.n	8009eae <_strtol_l.constprop.0+0xea>
 8009ea0:	b106      	cbz	r6, 8009ea4 <_strtol_l.constprop.0+0xe0>
 8009ea2:	4240      	negs	r0, r0
 8009ea4:	f1b8 0f00 	cmp.w	r8, #0
 8009ea8:	d099      	beq.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d1f6      	bne.n	8009e9c <_strtol_l.constprop.0+0xd8>
 8009eae:	f8c8 1000 	str.w	r1, [r8]
 8009eb2:	e794      	b.n	8009dde <_strtol_l.constprop.0+0x1a>
 8009eb4:	0800bc41 	.word	0x0800bc41

08009eb8 <_strtol_r>:
 8009eb8:	f7ff bf84 	b.w	8009dc4 <_strtol_l.constprop.0>

08009ebc <__ssputs_r>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	688e      	ldr	r6, [r1, #8]
 8009ec2:	461f      	mov	r7, r3
 8009ec4:	42be      	cmp	r6, r7
 8009ec6:	680b      	ldr	r3, [r1, #0]
 8009ec8:	4682      	mov	sl, r0
 8009eca:	460c      	mov	r4, r1
 8009ecc:	4690      	mov	r8, r2
 8009ece:	d82d      	bhi.n	8009f2c <__ssputs_r+0x70>
 8009ed0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ed4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ed8:	d026      	beq.n	8009f28 <__ssputs_r+0x6c>
 8009eda:	6965      	ldr	r5, [r4, #20]
 8009edc:	6909      	ldr	r1, [r1, #16]
 8009ede:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ee2:	eba3 0901 	sub.w	r9, r3, r1
 8009ee6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009eea:	1c7b      	adds	r3, r7, #1
 8009eec:	444b      	add	r3, r9
 8009eee:	106d      	asrs	r5, r5, #1
 8009ef0:	429d      	cmp	r5, r3
 8009ef2:	bf38      	it	cc
 8009ef4:	461d      	movcc	r5, r3
 8009ef6:	0553      	lsls	r3, r2, #21
 8009ef8:	d527      	bpl.n	8009f4a <__ssputs_r+0x8e>
 8009efa:	4629      	mov	r1, r5
 8009efc:	f7fe fc1c 	bl	8008738 <_malloc_r>
 8009f00:	4606      	mov	r6, r0
 8009f02:	b360      	cbz	r0, 8009f5e <__ssputs_r+0xa2>
 8009f04:	6921      	ldr	r1, [r4, #16]
 8009f06:	464a      	mov	r2, r9
 8009f08:	f7fd fd3f 	bl	800798a <memcpy>
 8009f0c:	89a3      	ldrh	r3, [r4, #12]
 8009f0e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f16:	81a3      	strh	r3, [r4, #12]
 8009f18:	6126      	str	r6, [r4, #16]
 8009f1a:	6165      	str	r5, [r4, #20]
 8009f1c:	444e      	add	r6, r9
 8009f1e:	eba5 0509 	sub.w	r5, r5, r9
 8009f22:	6026      	str	r6, [r4, #0]
 8009f24:	60a5      	str	r5, [r4, #8]
 8009f26:	463e      	mov	r6, r7
 8009f28:	42be      	cmp	r6, r7
 8009f2a:	d900      	bls.n	8009f2e <__ssputs_r+0x72>
 8009f2c:	463e      	mov	r6, r7
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	4632      	mov	r2, r6
 8009f32:	4641      	mov	r1, r8
 8009f34:	f000 fbd0 	bl	800a6d8 <memmove>
 8009f38:	68a3      	ldr	r3, [r4, #8]
 8009f3a:	1b9b      	subs	r3, r3, r6
 8009f3c:	60a3      	str	r3, [r4, #8]
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	4433      	add	r3, r6
 8009f42:	6023      	str	r3, [r4, #0]
 8009f44:	2000      	movs	r0, #0
 8009f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4a:	462a      	mov	r2, r5
 8009f4c:	f000 ff85 	bl	800ae5a <_realloc_r>
 8009f50:	4606      	mov	r6, r0
 8009f52:	2800      	cmp	r0, #0
 8009f54:	d1e0      	bne.n	8009f18 <__ssputs_r+0x5c>
 8009f56:	6921      	ldr	r1, [r4, #16]
 8009f58:	4650      	mov	r0, sl
 8009f5a:	f7fe fb79 	bl	8008650 <_free_r>
 8009f5e:	230c      	movs	r3, #12
 8009f60:	f8ca 3000 	str.w	r3, [sl]
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f6a:	81a3      	strh	r3, [r4, #12]
 8009f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f70:	e7e9      	b.n	8009f46 <__ssputs_r+0x8a>
	...

08009f74 <_svfiprintf_r>:
 8009f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f78:	4698      	mov	r8, r3
 8009f7a:	898b      	ldrh	r3, [r1, #12]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	b09d      	sub	sp, #116	@ 0x74
 8009f80:	4607      	mov	r7, r0
 8009f82:	460d      	mov	r5, r1
 8009f84:	4614      	mov	r4, r2
 8009f86:	d510      	bpl.n	8009faa <_svfiprintf_r+0x36>
 8009f88:	690b      	ldr	r3, [r1, #16]
 8009f8a:	b973      	cbnz	r3, 8009faa <_svfiprintf_r+0x36>
 8009f8c:	2140      	movs	r1, #64	@ 0x40
 8009f8e:	f7fe fbd3 	bl	8008738 <_malloc_r>
 8009f92:	6028      	str	r0, [r5, #0]
 8009f94:	6128      	str	r0, [r5, #16]
 8009f96:	b930      	cbnz	r0, 8009fa6 <_svfiprintf_r+0x32>
 8009f98:	230c      	movs	r3, #12
 8009f9a:	603b      	str	r3, [r7, #0]
 8009f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa0:	b01d      	add	sp, #116	@ 0x74
 8009fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa6:	2340      	movs	r3, #64	@ 0x40
 8009fa8:	616b      	str	r3, [r5, #20]
 8009faa:	2300      	movs	r3, #0
 8009fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fae:	2320      	movs	r3, #32
 8009fb0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8009fb8:	2330      	movs	r3, #48	@ 0x30
 8009fba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a158 <_svfiprintf_r+0x1e4>
 8009fbe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009fc2:	f04f 0901 	mov.w	r9, #1
 8009fc6:	4623      	mov	r3, r4
 8009fc8:	469a      	mov	sl, r3
 8009fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fce:	b10a      	cbz	r2, 8009fd4 <_svfiprintf_r+0x60>
 8009fd0:	2a25      	cmp	r2, #37	@ 0x25
 8009fd2:	d1f9      	bne.n	8009fc8 <_svfiprintf_r+0x54>
 8009fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8009fd8:	d00b      	beq.n	8009ff2 <_svfiprintf_r+0x7e>
 8009fda:	465b      	mov	r3, fp
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4629      	mov	r1, r5
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f7ff ff6b 	bl	8009ebc <__ssputs_r>
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f000 80a7 	beq.w	800a13a <_svfiprintf_r+0x1c6>
 8009fec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fee:	445a      	add	r2, fp
 8009ff0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 809f 	beq.w	800a13a <_svfiprintf_r+0x1c6>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f04f 32ff 	mov.w	r2, #4294967295
 800a002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a006:	f10a 0a01 	add.w	sl, sl, #1
 800a00a:	9304      	str	r3, [sp, #16]
 800a00c:	9307      	str	r3, [sp, #28]
 800a00e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a012:	931a      	str	r3, [sp, #104]	@ 0x68
 800a014:	4654      	mov	r4, sl
 800a016:	2205      	movs	r2, #5
 800a018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01c:	484e      	ldr	r0, [pc, #312]	@ (800a158 <_svfiprintf_r+0x1e4>)
 800a01e:	f7f6 f8ef 	bl	8000200 <memchr>
 800a022:	9a04      	ldr	r2, [sp, #16]
 800a024:	b9d8      	cbnz	r0, 800a05e <_svfiprintf_r+0xea>
 800a026:	06d0      	lsls	r0, r2, #27
 800a028:	bf44      	itt	mi
 800a02a:	2320      	movmi	r3, #32
 800a02c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a030:	0711      	lsls	r1, r2, #28
 800a032:	bf44      	itt	mi
 800a034:	232b      	movmi	r3, #43	@ 0x2b
 800a036:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a03a:	f89a 3000 	ldrb.w	r3, [sl]
 800a03e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a040:	d015      	beq.n	800a06e <_svfiprintf_r+0xfa>
 800a042:	9a07      	ldr	r2, [sp, #28]
 800a044:	4654      	mov	r4, sl
 800a046:	2000      	movs	r0, #0
 800a048:	f04f 0c0a 	mov.w	ip, #10
 800a04c:	4621      	mov	r1, r4
 800a04e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a052:	3b30      	subs	r3, #48	@ 0x30
 800a054:	2b09      	cmp	r3, #9
 800a056:	d94b      	bls.n	800a0f0 <_svfiprintf_r+0x17c>
 800a058:	b1b0      	cbz	r0, 800a088 <_svfiprintf_r+0x114>
 800a05a:	9207      	str	r2, [sp, #28]
 800a05c:	e014      	b.n	800a088 <_svfiprintf_r+0x114>
 800a05e:	eba0 0308 	sub.w	r3, r0, r8
 800a062:	fa09 f303 	lsl.w	r3, r9, r3
 800a066:	4313      	orrs	r3, r2
 800a068:	9304      	str	r3, [sp, #16]
 800a06a:	46a2      	mov	sl, r4
 800a06c:	e7d2      	b.n	800a014 <_svfiprintf_r+0xa0>
 800a06e:	9b03      	ldr	r3, [sp, #12]
 800a070:	1d19      	adds	r1, r3, #4
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	9103      	str	r1, [sp, #12]
 800a076:	2b00      	cmp	r3, #0
 800a078:	bfbb      	ittet	lt
 800a07a:	425b      	neglt	r3, r3
 800a07c:	f042 0202 	orrlt.w	r2, r2, #2
 800a080:	9307      	strge	r3, [sp, #28]
 800a082:	9307      	strlt	r3, [sp, #28]
 800a084:	bfb8      	it	lt
 800a086:	9204      	strlt	r2, [sp, #16]
 800a088:	7823      	ldrb	r3, [r4, #0]
 800a08a:	2b2e      	cmp	r3, #46	@ 0x2e
 800a08c:	d10a      	bne.n	800a0a4 <_svfiprintf_r+0x130>
 800a08e:	7863      	ldrb	r3, [r4, #1]
 800a090:	2b2a      	cmp	r3, #42	@ 0x2a
 800a092:	d132      	bne.n	800a0fa <_svfiprintf_r+0x186>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	1d1a      	adds	r2, r3, #4
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	9203      	str	r2, [sp, #12]
 800a09c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0a0:	3402      	adds	r4, #2
 800a0a2:	9305      	str	r3, [sp, #20]
 800a0a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a168 <_svfiprintf_r+0x1f4>
 800a0a8:	7821      	ldrb	r1, [r4, #0]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	4650      	mov	r0, sl
 800a0ae:	f7f6 f8a7 	bl	8000200 <memchr>
 800a0b2:	b138      	cbz	r0, 800a0c4 <_svfiprintf_r+0x150>
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	eba0 000a 	sub.w	r0, r0, sl
 800a0ba:	2240      	movs	r2, #64	@ 0x40
 800a0bc:	4082      	lsls	r2, r0
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	3401      	adds	r4, #1
 800a0c2:	9304      	str	r3, [sp, #16]
 800a0c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c8:	4824      	ldr	r0, [pc, #144]	@ (800a15c <_svfiprintf_r+0x1e8>)
 800a0ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a0ce:	2206      	movs	r2, #6
 800a0d0:	f7f6 f896 	bl	8000200 <memchr>
 800a0d4:	2800      	cmp	r0, #0
 800a0d6:	d036      	beq.n	800a146 <_svfiprintf_r+0x1d2>
 800a0d8:	4b21      	ldr	r3, [pc, #132]	@ (800a160 <_svfiprintf_r+0x1ec>)
 800a0da:	bb1b      	cbnz	r3, 800a124 <_svfiprintf_r+0x1b0>
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	3307      	adds	r3, #7
 800a0e0:	f023 0307 	bic.w	r3, r3, #7
 800a0e4:	3308      	adds	r3, #8
 800a0e6:	9303      	str	r3, [sp, #12]
 800a0e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0ea:	4433      	add	r3, r6
 800a0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ee:	e76a      	b.n	8009fc6 <_svfiprintf_r+0x52>
 800a0f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0f4:	460c      	mov	r4, r1
 800a0f6:	2001      	movs	r0, #1
 800a0f8:	e7a8      	b.n	800a04c <_svfiprintf_r+0xd8>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	3401      	adds	r4, #1
 800a0fe:	9305      	str	r3, [sp, #20]
 800a100:	4619      	mov	r1, r3
 800a102:	f04f 0c0a 	mov.w	ip, #10
 800a106:	4620      	mov	r0, r4
 800a108:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a10c:	3a30      	subs	r2, #48	@ 0x30
 800a10e:	2a09      	cmp	r2, #9
 800a110:	d903      	bls.n	800a11a <_svfiprintf_r+0x1a6>
 800a112:	2b00      	cmp	r3, #0
 800a114:	d0c6      	beq.n	800a0a4 <_svfiprintf_r+0x130>
 800a116:	9105      	str	r1, [sp, #20]
 800a118:	e7c4      	b.n	800a0a4 <_svfiprintf_r+0x130>
 800a11a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a11e:	4604      	mov	r4, r0
 800a120:	2301      	movs	r3, #1
 800a122:	e7f0      	b.n	800a106 <_svfiprintf_r+0x192>
 800a124:	ab03      	add	r3, sp, #12
 800a126:	9300      	str	r3, [sp, #0]
 800a128:	462a      	mov	r2, r5
 800a12a:	4b0e      	ldr	r3, [pc, #56]	@ (800a164 <_svfiprintf_r+0x1f0>)
 800a12c:	a904      	add	r1, sp, #16
 800a12e:	4638      	mov	r0, r7
 800a130:	f7fc fca0 	bl	8006a74 <_printf_float>
 800a134:	1c42      	adds	r2, r0, #1
 800a136:	4606      	mov	r6, r0
 800a138:	d1d6      	bne.n	800a0e8 <_svfiprintf_r+0x174>
 800a13a:	89ab      	ldrh	r3, [r5, #12]
 800a13c:	065b      	lsls	r3, r3, #25
 800a13e:	f53f af2d 	bmi.w	8009f9c <_svfiprintf_r+0x28>
 800a142:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a144:	e72c      	b.n	8009fa0 <_svfiprintf_r+0x2c>
 800a146:	ab03      	add	r3, sp, #12
 800a148:	9300      	str	r3, [sp, #0]
 800a14a:	462a      	mov	r2, r5
 800a14c:	4b05      	ldr	r3, [pc, #20]	@ (800a164 <_svfiprintf_r+0x1f0>)
 800a14e:	a904      	add	r1, sp, #16
 800a150:	4638      	mov	r0, r7
 800a152:	f7fc ff27 	bl	8006fa4 <_printf_i>
 800a156:	e7ed      	b.n	800a134 <_svfiprintf_r+0x1c0>
 800a158:	0800bd41 	.word	0x0800bd41
 800a15c:	0800bd4b 	.word	0x0800bd4b
 800a160:	08006a75 	.word	0x08006a75
 800a164:	08009ebd 	.word	0x08009ebd
 800a168:	0800bd47 	.word	0x0800bd47

0800a16c <__sfputc_r>:
 800a16c:	6893      	ldr	r3, [r2, #8]
 800a16e:	3b01      	subs	r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	b410      	push	{r4}
 800a174:	6093      	str	r3, [r2, #8]
 800a176:	da08      	bge.n	800a18a <__sfputc_r+0x1e>
 800a178:	6994      	ldr	r4, [r2, #24]
 800a17a:	42a3      	cmp	r3, r4
 800a17c:	db01      	blt.n	800a182 <__sfputc_r+0x16>
 800a17e:	290a      	cmp	r1, #10
 800a180:	d103      	bne.n	800a18a <__sfputc_r+0x1e>
 800a182:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a186:	f000 ba13 	b.w	800a5b0 <__swbuf_r>
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	1c58      	adds	r0, r3, #1
 800a18e:	6010      	str	r0, [r2, #0]
 800a190:	7019      	strb	r1, [r3, #0]
 800a192:	4608      	mov	r0, r1
 800a194:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <__sfputs_r>:
 800a19a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a19c:	4606      	mov	r6, r0
 800a19e:	460f      	mov	r7, r1
 800a1a0:	4614      	mov	r4, r2
 800a1a2:	18d5      	adds	r5, r2, r3
 800a1a4:	42ac      	cmp	r4, r5
 800a1a6:	d101      	bne.n	800a1ac <__sfputs_r+0x12>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e007      	b.n	800a1bc <__sfputs_r+0x22>
 800a1ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b0:	463a      	mov	r2, r7
 800a1b2:	4630      	mov	r0, r6
 800a1b4:	f7ff ffda 	bl	800a16c <__sfputc_r>
 800a1b8:	1c43      	adds	r3, r0, #1
 800a1ba:	d1f3      	bne.n	800a1a4 <__sfputs_r+0xa>
 800a1bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a1c0 <_vfiprintf_r>:
 800a1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c4:	460d      	mov	r5, r1
 800a1c6:	b09d      	sub	sp, #116	@ 0x74
 800a1c8:	4614      	mov	r4, r2
 800a1ca:	4698      	mov	r8, r3
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	b118      	cbz	r0, 800a1d8 <_vfiprintf_r+0x18>
 800a1d0:	6a03      	ldr	r3, [r0, #32]
 800a1d2:	b90b      	cbnz	r3, 800a1d8 <_vfiprintf_r+0x18>
 800a1d4:	f7fd faa6 	bl	8007724 <__sinit>
 800a1d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1da:	07d9      	lsls	r1, r3, #31
 800a1dc:	d405      	bmi.n	800a1ea <_vfiprintf_r+0x2a>
 800a1de:	89ab      	ldrh	r3, [r5, #12]
 800a1e0:	059a      	lsls	r2, r3, #22
 800a1e2:	d402      	bmi.n	800a1ea <_vfiprintf_r+0x2a>
 800a1e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a1e6:	f7fd fbce 	bl	8007986 <__retarget_lock_acquire_recursive>
 800a1ea:	89ab      	ldrh	r3, [r5, #12]
 800a1ec:	071b      	lsls	r3, r3, #28
 800a1ee:	d501      	bpl.n	800a1f4 <_vfiprintf_r+0x34>
 800a1f0:	692b      	ldr	r3, [r5, #16]
 800a1f2:	b99b      	cbnz	r3, 800a21c <_vfiprintf_r+0x5c>
 800a1f4:	4629      	mov	r1, r5
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f000 fa18 	bl	800a62c <__swsetup_r>
 800a1fc:	b170      	cbz	r0, 800a21c <_vfiprintf_r+0x5c>
 800a1fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a200:	07dc      	lsls	r4, r3, #31
 800a202:	d504      	bpl.n	800a20e <_vfiprintf_r+0x4e>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	b01d      	add	sp, #116	@ 0x74
 800a20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a20e:	89ab      	ldrh	r3, [r5, #12]
 800a210:	0598      	lsls	r0, r3, #22
 800a212:	d4f7      	bmi.n	800a204 <_vfiprintf_r+0x44>
 800a214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a216:	f7fd fbb7 	bl	8007988 <__retarget_lock_release_recursive>
 800a21a:	e7f3      	b.n	800a204 <_vfiprintf_r+0x44>
 800a21c:	2300      	movs	r3, #0
 800a21e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a220:	2320      	movs	r3, #32
 800a222:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a226:	f8cd 800c 	str.w	r8, [sp, #12]
 800a22a:	2330      	movs	r3, #48	@ 0x30
 800a22c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a3dc <_vfiprintf_r+0x21c>
 800a230:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a234:	f04f 0901 	mov.w	r9, #1
 800a238:	4623      	mov	r3, r4
 800a23a:	469a      	mov	sl, r3
 800a23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a240:	b10a      	cbz	r2, 800a246 <_vfiprintf_r+0x86>
 800a242:	2a25      	cmp	r2, #37	@ 0x25
 800a244:	d1f9      	bne.n	800a23a <_vfiprintf_r+0x7a>
 800a246:	ebba 0b04 	subs.w	fp, sl, r4
 800a24a:	d00b      	beq.n	800a264 <_vfiprintf_r+0xa4>
 800a24c:	465b      	mov	r3, fp
 800a24e:	4622      	mov	r2, r4
 800a250:	4629      	mov	r1, r5
 800a252:	4630      	mov	r0, r6
 800a254:	f7ff ffa1 	bl	800a19a <__sfputs_r>
 800a258:	3001      	adds	r0, #1
 800a25a:	f000 80a7 	beq.w	800a3ac <_vfiprintf_r+0x1ec>
 800a25e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a260:	445a      	add	r2, fp
 800a262:	9209      	str	r2, [sp, #36]	@ 0x24
 800a264:	f89a 3000 	ldrb.w	r3, [sl]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	f000 809f 	beq.w	800a3ac <_vfiprintf_r+0x1ec>
 800a26e:	2300      	movs	r3, #0
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a278:	f10a 0a01 	add.w	sl, sl, #1
 800a27c:	9304      	str	r3, [sp, #16]
 800a27e:	9307      	str	r3, [sp, #28]
 800a280:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a284:	931a      	str	r3, [sp, #104]	@ 0x68
 800a286:	4654      	mov	r4, sl
 800a288:	2205      	movs	r2, #5
 800a28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a28e:	4853      	ldr	r0, [pc, #332]	@ (800a3dc <_vfiprintf_r+0x21c>)
 800a290:	f7f5 ffb6 	bl	8000200 <memchr>
 800a294:	9a04      	ldr	r2, [sp, #16]
 800a296:	b9d8      	cbnz	r0, 800a2d0 <_vfiprintf_r+0x110>
 800a298:	06d1      	lsls	r1, r2, #27
 800a29a:	bf44      	itt	mi
 800a29c:	2320      	movmi	r3, #32
 800a29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2a2:	0713      	lsls	r3, r2, #28
 800a2a4:	bf44      	itt	mi
 800a2a6:	232b      	movmi	r3, #43	@ 0x2b
 800a2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800a2b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2b2:	d015      	beq.n	800a2e0 <_vfiprintf_r+0x120>
 800a2b4:	9a07      	ldr	r2, [sp, #28]
 800a2b6:	4654      	mov	r4, sl
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f04f 0c0a 	mov.w	ip, #10
 800a2be:	4621      	mov	r1, r4
 800a2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2c4:	3b30      	subs	r3, #48	@ 0x30
 800a2c6:	2b09      	cmp	r3, #9
 800a2c8:	d94b      	bls.n	800a362 <_vfiprintf_r+0x1a2>
 800a2ca:	b1b0      	cbz	r0, 800a2fa <_vfiprintf_r+0x13a>
 800a2cc:	9207      	str	r2, [sp, #28]
 800a2ce:	e014      	b.n	800a2fa <_vfiprintf_r+0x13a>
 800a2d0:	eba0 0308 	sub.w	r3, r0, r8
 800a2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	9304      	str	r3, [sp, #16]
 800a2dc:	46a2      	mov	sl, r4
 800a2de:	e7d2      	b.n	800a286 <_vfiprintf_r+0xc6>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	1d19      	adds	r1, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	9103      	str	r1, [sp, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfbb      	ittet	lt
 800a2ec:	425b      	neglt	r3, r3
 800a2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800a2f2:	9307      	strge	r3, [sp, #28]
 800a2f4:	9307      	strlt	r3, [sp, #28]
 800a2f6:	bfb8      	it	lt
 800a2f8:	9204      	strlt	r2, [sp, #16]
 800a2fa:	7823      	ldrb	r3, [r4, #0]
 800a2fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a2fe:	d10a      	bne.n	800a316 <_vfiprintf_r+0x156>
 800a300:	7863      	ldrb	r3, [r4, #1]
 800a302:	2b2a      	cmp	r3, #42	@ 0x2a
 800a304:	d132      	bne.n	800a36c <_vfiprintf_r+0x1ac>
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	1d1a      	adds	r2, r3, #4
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	9203      	str	r2, [sp, #12]
 800a30e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a312:	3402      	adds	r4, #2
 800a314:	9305      	str	r3, [sp, #20]
 800a316:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a3ec <_vfiprintf_r+0x22c>
 800a31a:	7821      	ldrb	r1, [r4, #0]
 800a31c:	2203      	movs	r2, #3
 800a31e:	4650      	mov	r0, sl
 800a320:	f7f5 ff6e 	bl	8000200 <memchr>
 800a324:	b138      	cbz	r0, 800a336 <_vfiprintf_r+0x176>
 800a326:	9b04      	ldr	r3, [sp, #16]
 800a328:	eba0 000a 	sub.w	r0, r0, sl
 800a32c:	2240      	movs	r2, #64	@ 0x40
 800a32e:	4082      	lsls	r2, r0
 800a330:	4313      	orrs	r3, r2
 800a332:	3401      	adds	r4, #1
 800a334:	9304      	str	r3, [sp, #16]
 800a336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a33a:	4829      	ldr	r0, [pc, #164]	@ (800a3e0 <_vfiprintf_r+0x220>)
 800a33c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a340:	2206      	movs	r2, #6
 800a342:	f7f5 ff5d 	bl	8000200 <memchr>
 800a346:	2800      	cmp	r0, #0
 800a348:	d03f      	beq.n	800a3ca <_vfiprintf_r+0x20a>
 800a34a:	4b26      	ldr	r3, [pc, #152]	@ (800a3e4 <_vfiprintf_r+0x224>)
 800a34c:	bb1b      	cbnz	r3, 800a396 <_vfiprintf_r+0x1d6>
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	3307      	adds	r3, #7
 800a352:	f023 0307 	bic.w	r3, r3, #7
 800a356:	3308      	adds	r3, #8
 800a358:	9303      	str	r3, [sp, #12]
 800a35a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a35c:	443b      	add	r3, r7
 800a35e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a360:	e76a      	b.n	800a238 <_vfiprintf_r+0x78>
 800a362:	fb0c 3202 	mla	r2, ip, r2, r3
 800a366:	460c      	mov	r4, r1
 800a368:	2001      	movs	r0, #1
 800a36a:	e7a8      	b.n	800a2be <_vfiprintf_r+0xfe>
 800a36c:	2300      	movs	r3, #0
 800a36e:	3401      	adds	r4, #1
 800a370:	9305      	str	r3, [sp, #20]
 800a372:	4619      	mov	r1, r3
 800a374:	f04f 0c0a 	mov.w	ip, #10
 800a378:	4620      	mov	r0, r4
 800a37a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a37e:	3a30      	subs	r2, #48	@ 0x30
 800a380:	2a09      	cmp	r2, #9
 800a382:	d903      	bls.n	800a38c <_vfiprintf_r+0x1cc>
 800a384:	2b00      	cmp	r3, #0
 800a386:	d0c6      	beq.n	800a316 <_vfiprintf_r+0x156>
 800a388:	9105      	str	r1, [sp, #20]
 800a38a:	e7c4      	b.n	800a316 <_vfiprintf_r+0x156>
 800a38c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a390:	4604      	mov	r4, r0
 800a392:	2301      	movs	r3, #1
 800a394:	e7f0      	b.n	800a378 <_vfiprintf_r+0x1b8>
 800a396:	ab03      	add	r3, sp, #12
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	462a      	mov	r2, r5
 800a39c:	4b12      	ldr	r3, [pc, #72]	@ (800a3e8 <_vfiprintf_r+0x228>)
 800a39e:	a904      	add	r1, sp, #16
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	f7fc fb67 	bl	8006a74 <_printf_float>
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	1c78      	adds	r0, r7, #1
 800a3aa:	d1d6      	bne.n	800a35a <_vfiprintf_r+0x19a>
 800a3ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ae:	07d9      	lsls	r1, r3, #31
 800a3b0:	d405      	bmi.n	800a3be <_vfiprintf_r+0x1fe>
 800a3b2:	89ab      	ldrh	r3, [r5, #12]
 800a3b4:	059a      	lsls	r2, r3, #22
 800a3b6:	d402      	bmi.n	800a3be <_vfiprintf_r+0x1fe>
 800a3b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3ba:	f7fd fae5 	bl	8007988 <__retarget_lock_release_recursive>
 800a3be:	89ab      	ldrh	r3, [r5, #12]
 800a3c0:	065b      	lsls	r3, r3, #25
 800a3c2:	f53f af1f 	bmi.w	800a204 <_vfiprintf_r+0x44>
 800a3c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3c8:	e71e      	b.n	800a208 <_vfiprintf_r+0x48>
 800a3ca:	ab03      	add	r3, sp, #12
 800a3cc:	9300      	str	r3, [sp, #0]
 800a3ce:	462a      	mov	r2, r5
 800a3d0:	4b05      	ldr	r3, [pc, #20]	@ (800a3e8 <_vfiprintf_r+0x228>)
 800a3d2:	a904      	add	r1, sp, #16
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7fc fde5 	bl	8006fa4 <_printf_i>
 800a3da:	e7e4      	b.n	800a3a6 <_vfiprintf_r+0x1e6>
 800a3dc:	0800bd41 	.word	0x0800bd41
 800a3e0:	0800bd4b 	.word	0x0800bd4b
 800a3e4:	08006a75 	.word	0x08006a75
 800a3e8:	0800a19b 	.word	0x0800a19b
 800a3ec:	0800bd47 	.word	0x0800bd47

0800a3f0 <__sflush_r>:
 800a3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a3f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3f8:	0716      	lsls	r6, r2, #28
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	d454      	bmi.n	800a4aa <__sflush_r+0xba>
 800a400:	684b      	ldr	r3, [r1, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	dc02      	bgt.n	800a40c <__sflush_r+0x1c>
 800a406:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a408:	2b00      	cmp	r3, #0
 800a40a:	dd48      	ble.n	800a49e <__sflush_r+0xae>
 800a40c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a40e:	2e00      	cmp	r6, #0
 800a410:	d045      	beq.n	800a49e <__sflush_r+0xae>
 800a412:	2300      	movs	r3, #0
 800a414:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a418:	682f      	ldr	r7, [r5, #0]
 800a41a:	6a21      	ldr	r1, [r4, #32]
 800a41c:	602b      	str	r3, [r5, #0]
 800a41e:	d030      	beq.n	800a482 <__sflush_r+0x92>
 800a420:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	0759      	lsls	r1, r3, #29
 800a426:	d505      	bpl.n	800a434 <__sflush_r+0x44>
 800a428:	6863      	ldr	r3, [r4, #4]
 800a42a:	1ad2      	subs	r2, r2, r3
 800a42c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a42e:	b10b      	cbz	r3, 800a434 <__sflush_r+0x44>
 800a430:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a432:	1ad2      	subs	r2, r2, r3
 800a434:	2300      	movs	r3, #0
 800a436:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a438:	6a21      	ldr	r1, [r4, #32]
 800a43a:	4628      	mov	r0, r5
 800a43c:	47b0      	blx	r6
 800a43e:	1c43      	adds	r3, r0, #1
 800a440:	89a3      	ldrh	r3, [r4, #12]
 800a442:	d106      	bne.n	800a452 <__sflush_r+0x62>
 800a444:	6829      	ldr	r1, [r5, #0]
 800a446:	291d      	cmp	r1, #29
 800a448:	d82b      	bhi.n	800a4a2 <__sflush_r+0xb2>
 800a44a:	4a2a      	ldr	r2, [pc, #168]	@ (800a4f4 <__sflush_r+0x104>)
 800a44c:	410a      	asrs	r2, r1
 800a44e:	07d6      	lsls	r6, r2, #31
 800a450:	d427      	bmi.n	800a4a2 <__sflush_r+0xb2>
 800a452:	2200      	movs	r2, #0
 800a454:	6062      	str	r2, [r4, #4]
 800a456:	04d9      	lsls	r1, r3, #19
 800a458:	6922      	ldr	r2, [r4, #16]
 800a45a:	6022      	str	r2, [r4, #0]
 800a45c:	d504      	bpl.n	800a468 <__sflush_r+0x78>
 800a45e:	1c42      	adds	r2, r0, #1
 800a460:	d101      	bne.n	800a466 <__sflush_r+0x76>
 800a462:	682b      	ldr	r3, [r5, #0]
 800a464:	b903      	cbnz	r3, 800a468 <__sflush_r+0x78>
 800a466:	6560      	str	r0, [r4, #84]	@ 0x54
 800a468:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a46a:	602f      	str	r7, [r5, #0]
 800a46c:	b1b9      	cbz	r1, 800a49e <__sflush_r+0xae>
 800a46e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a472:	4299      	cmp	r1, r3
 800a474:	d002      	beq.n	800a47c <__sflush_r+0x8c>
 800a476:	4628      	mov	r0, r5
 800a478:	f7fe f8ea 	bl	8008650 <_free_r>
 800a47c:	2300      	movs	r3, #0
 800a47e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a480:	e00d      	b.n	800a49e <__sflush_r+0xae>
 800a482:	2301      	movs	r3, #1
 800a484:	4628      	mov	r0, r5
 800a486:	47b0      	blx	r6
 800a488:	4602      	mov	r2, r0
 800a48a:	1c50      	adds	r0, r2, #1
 800a48c:	d1c9      	bne.n	800a422 <__sflush_r+0x32>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0c6      	beq.n	800a422 <__sflush_r+0x32>
 800a494:	2b1d      	cmp	r3, #29
 800a496:	d001      	beq.n	800a49c <__sflush_r+0xac>
 800a498:	2b16      	cmp	r3, #22
 800a49a:	d11e      	bne.n	800a4da <__sflush_r+0xea>
 800a49c:	602f      	str	r7, [r5, #0]
 800a49e:	2000      	movs	r0, #0
 800a4a0:	e022      	b.n	800a4e8 <__sflush_r+0xf8>
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4a6:	b21b      	sxth	r3, r3
 800a4a8:	e01b      	b.n	800a4e2 <__sflush_r+0xf2>
 800a4aa:	690f      	ldr	r7, [r1, #16]
 800a4ac:	2f00      	cmp	r7, #0
 800a4ae:	d0f6      	beq.n	800a49e <__sflush_r+0xae>
 800a4b0:	0793      	lsls	r3, r2, #30
 800a4b2:	680e      	ldr	r6, [r1, #0]
 800a4b4:	bf08      	it	eq
 800a4b6:	694b      	ldreq	r3, [r1, #20]
 800a4b8:	600f      	str	r7, [r1, #0]
 800a4ba:	bf18      	it	ne
 800a4bc:	2300      	movne	r3, #0
 800a4be:	eba6 0807 	sub.w	r8, r6, r7
 800a4c2:	608b      	str	r3, [r1, #8]
 800a4c4:	f1b8 0f00 	cmp.w	r8, #0
 800a4c8:	dde9      	ble.n	800a49e <__sflush_r+0xae>
 800a4ca:	6a21      	ldr	r1, [r4, #32]
 800a4cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a4ce:	4643      	mov	r3, r8
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	4628      	mov	r0, r5
 800a4d4:	47b0      	blx	r6
 800a4d6:	2800      	cmp	r0, #0
 800a4d8:	dc08      	bgt.n	800a4ec <__sflush_r+0xfc>
 800a4da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4e2:	81a3      	strh	r3, [r4, #12]
 800a4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ec:	4407      	add	r7, r0
 800a4ee:	eba8 0800 	sub.w	r8, r8, r0
 800a4f2:	e7e7      	b.n	800a4c4 <__sflush_r+0xd4>
 800a4f4:	dfbffffe 	.word	0xdfbffffe

0800a4f8 <_fflush_r>:
 800a4f8:	b538      	push	{r3, r4, r5, lr}
 800a4fa:	690b      	ldr	r3, [r1, #16]
 800a4fc:	4605      	mov	r5, r0
 800a4fe:	460c      	mov	r4, r1
 800a500:	b913      	cbnz	r3, 800a508 <_fflush_r+0x10>
 800a502:	2500      	movs	r5, #0
 800a504:	4628      	mov	r0, r5
 800a506:	bd38      	pop	{r3, r4, r5, pc}
 800a508:	b118      	cbz	r0, 800a512 <_fflush_r+0x1a>
 800a50a:	6a03      	ldr	r3, [r0, #32]
 800a50c:	b90b      	cbnz	r3, 800a512 <_fflush_r+0x1a>
 800a50e:	f7fd f909 	bl	8007724 <__sinit>
 800a512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d0f3      	beq.n	800a502 <_fflush_r+0xa>
 800a51a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a51c:	07d0      	lsls	r0, r2, #31
 800a51e:	d404      	bmi.n	800a52a <_fflush_r+0x32>
 800a520:	0599      	lsls	r1, r3, #22
 800a522:	d402      	bmi.n	800a52a <_fflush_r+0x32>
 800a524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a526:	f7fd fa2e 	bl	8007986 <__retarget_lock_acquire_recursive>
 800a52a:	4628      	mov	r0, r5
 800a52c:	4621      	mov	r1, r4
 800a52e:	f7ff ff5f 	bl	800a3f0 <__sflush_r>
 800a532:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a534:	07da      	lsls	r2, r3, #31
 800a536:	4605      	mov	r5, r0
 800a538:	d4e4      	bmi.n	800a504 <_fflush_r+0xc>
 800a53a:	89a3      	ldrh	r3, [r4, #12]
 800a53c:	059b      	lsls	r3, r3, #22
 800a53e:	d4e1      	bmi.n	800a504 <_fflush_r+0xc>
 800a540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a542:	f7fd fa21 	bl	8007988 <__retarget_lock_release_recursive>
 800a546:	e7dd      	b.n	800a504 <_fflush_r+0xc>

0800a548 <_putc_r>:
 800a548:	b570      	push	{r4, r5, r6, lr}
 800a54a:	460d      	mov	r5, r1
 800a54c:	4614      	mov	r4, r2
 800a54e:	4606      	mov	r6, r0
 800a550:	b118      	cbz	r0, 800a55a <_putc_r+0x12>
 800a552:	6a03      	ldr	r3, [r0, #32]
 800a554:	b90b      	cbnz	r3, 800a55a <_putc_r+0x12>
 800a556:	f7fd f8e5 	bl	8007724 <__sinit>
 800a55a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a55c:	07d8      	lsls	r0, r3, #31
 800a55e:	d405      	bmi.n	800a56c <_putc_r+0x24>
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	0599      	lsls	r1, r3, #22
 800a564:	d402      	bmi.n	800a56c <_putc_r+0x24>
 800a566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a568:	f7fd fa0d 	bl	8007986 <__retarget_lock_acquire_recursive>
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	3b01      	subs	r3, #1
 800a570:	2b00      	cmp	r3, #0
 800a572:	60a3      	str	r3, [r4, #8]
 800a574:	da05      	bge.n	800a582 <_putc_r+0x3a>
 800a576:	69a2      	ldr	r2, [r4, #24]
 800a578:	4293      	cmp	r3, r2
 800a57a:	db12      	blt.n	800a5a2 <_putc_r+0x5a>
 800a57c:	b2eb      	uxtb	r3, r5
 800a57e:	2b0a      	cmp	r3, #10
 800a580:	d00f      	beq.n	800a5a2 <_putc_r+0x5a>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	1c5a      	adds	r2, r3, #1
 800a586:	6022      	str	r2, [r4, #0]
 800a588:	701d      	strb	r5, [r3, #0]
 800a58a:	b2ed      	uxtb	r5, r5
 800a58c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a58e:	07da      	lsls	r2, r3, #31
 800a590:	d405      	bmi.n	800a59e <_putc_r+0x56>
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	059b      	lsls	r3, r3, #22
 800a596:	d402      	bmi.n	800a59e <_putc_r+0x56>
 800a598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a59a:	f7fd f9f5 	bl	8007988 <__retarget_lock_release_recursive>
 800a59e:	4628      	mov	r0, r5
 800a5a0:	bd70      	pop	{r4, r5, r6, pc}
 800a5a2:	4629      	mov	r1, r5
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f000 f802 	bl	800a5b0 <__swbuf_r>
 800a5ac:	4605      	mov	r5, r0
 800a5ae:	e7ed      	b.n	800a58c <_putc_r+0x44>

0800a5b0 <__swbuf_r>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	460e      	mov	r6, r1
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	4605      	mov	r5, r0
 800a5b8:	b118      	cbz	r0, 800a5c2 <__swbuf_r+0x12>
 800a5ba:	6a03      	ldr	r3, [r0, #32]
 800a5bc:	b90b      	cbnz	r3, 800a5c2 <__swbuf_r+0x12>
 800a5be:	f7fd f8b1 	bl	8007724 <__sinit>
 800a5c2:	69a3      	ldr	r3, [r4, #24]
 800a5c4:	60a3      	str	r3, [r4, #8]
 800a5c6:	89a3      	ldrh	r3, [r4, #12]
 800a5c8:	071a      	lsls	r2, r3, #28
 800a5ca:	d501      	bpl.n	800a5d0 <__swbuf_r+0x20>
 800a5cc:	6923      	ldr	r3, [r4, #16]
 800a5ce:	b943      	cbnz	r3, 800a5e2 <__swbuf_r+0x32>
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f000 f82a 	bl	800a62c <__swsetup_r>
 800a5d8:	b118      	cbz	r0, 800a5e2 <__swbuf_r+0x32>
 800a5da:	f04f 37ff 	mov.w	r7, #4294967295
 800a5de:	4638      	mov	r0, r7
 800a5e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5e2:	6823      	ldr	r3, [r4, #0]
 800a5e4:	6922      	ldr	r2, [r4, #16]
 800a5e6:	1a98      	subs	r0, r3, r2
 800a5e8:	6963      	ldr	r3, [r4, #20]
 800a5ea:	b2f6      	uxtb	r6, r6
 800a5ec:	4283      	cmp	r3, r0
 800a5ee:	4637      	mov	r7, r6
 800a5f0:	dc05      	bgt.n	800a5fe <__swbuf_r+0x4e>
 800a5f2:	4621      	mov	r1, r4
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	f7ff ff7f 	bl	800a4f8 <_fflush_r>
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d1ed      	bne.n	800a5da <__swbuf_r+0x2a>
 800a5fe:	68a3      	ldr	r3, [r4, #8]
 800a600:	3b01      	subs	r3, #1
 800a602:	60a3      	str	r3, [r4, #8]
 800a604:	6823      	ldr	r3, [r4, #0]
 800a606:	1c5a      	adds	r2, r3, #1
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	701e      	strb	r6, [r3, #0]
 800a60c:	6962      	ldr	r2, [r4, #20]
 800a60e:	1c43      	adds	r3, r0, #1
 800a610:	429a      	cmp	r2, r3
 800a612:	d004      	beq.n	800a61e <__swbuf_r+0x6e>
 800a614:	89a3      	ldrh	r3, [r4, #12]
 800a616:	07db      	lsls	r3, r3, #31
 800a618:	d5e1      	bpl.n	800a5de <__swbuf_r+0x2e>
 800a61a:	2e0a      	cmp	r6, #10
 800a61c:	d1df      	bne.n	800a5de <__swbuf_r+0x2e>
 800a61e:	4621      	mov	r1, r4
 800a620:	4628      	mov	r0, r5
 800a622:	f7ff ff69 	bl	800a4f8 <_fflush_r>
 800a626:	2800      	cmp	r0, #0
 800a628:	d0d9      	beq.n	800a5de <__swbuf_r+0x2e>
 800a62a:	e7d6      	b.n	800a5da <__swbuf_r+0x2a>

0800a62c <__swsetup_r>:
 800a62c:	b538      	push	{r3, r4, r5, lr}
 800a62e:	4b29      	ldr	r3, [pc, #164]	@ (800a6d4 <__swsetup_r+0xa8>)
 800a630:	4605      	mov	r5, r0
 800a632:	6818      	ldr	r0, [r3, #0]
 800a634:	460c      	mov	r4, r1
 800a636:	b118      	cbz	r0, 800a640 <__swsetup_r+0x14>
 800a638:	6a03      	ldr	r3, [r0, #32]
 800a63a:	b90b      	cbnz	r3, 800a640 <__swsetup_r+0x14>
 800a63c:	f7fd f872 	bl	8007724 <__sinit>
 800a640:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a644:	0719      	lsls	r1, r3, #28
 800a646:	d422      	bmi.n	800a68e <__swsetup_r+0x62>
 800a648:	06da      	lsls	r2, r3, #27
 800a64a:	d407      	bmi.n	800a65c <__swsetup_r+0x30>
 800a64c:	2209      	movs	r2, #9
 800a64e:	602a      	str	r2, [r5, #0]
 800a650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a654:	81a3      	strh	r3, [r4, #12]
 800a656:	f04f 30ff 	mov.w	r0, #4294967295
 800a65a:	e033      	b.n	800a6c4 <__swsetup_r+0x98>
 800a65c:	0758      	lsls	r0, r3, #29
 800a65e:	d512      	bpl.n	800a686 <__swsetup_r+0x5a>
 800a660:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a662:	b141      	cbz	r1, 800a676 <__swsetup_r+0x4a>
 800a664:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a668:	4299      	cmp	r1, r3
 800a66a:	d002      	beq.n	800a672 <__swsetup_r+0x46>
 800a66c:	4628      	mov	r0, r5
 800a66e:	f7fd ffef 	bl	8008650 <_free_r>
 800a672:	2300      	movs	r3, #0
 800a674:	6363      	str	r3, [r4, #52]	@ 0x34
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a67c:	81a3      	strh	r3, [r4, #12]
 800a67e:	2300      	movs	r3, #0
 800a680:	6063      	str	r3, [r4, #4]
 800a682:	6923      	ldr	r3, [r4, #16]
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	f043 0308 	orr.w	r3, r3, #8
 800a68c:	81a3      	strh	r3, [r4, #12]
 800a68e:	6923      	ldr	r3, [r4, #16]
 800a690:	b94b      	cbnz	r3, 800a6a6 <__swsetup_r+0x7a>
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a698:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a69c:	d003      	beq.n	800a6a6 <__swsetup_r+0x7a>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4628      	mov	r0, r5
 800a6a2:	f000 fc4d 	bl	800af40 <__smakebuf_r>
 800a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6aa:	f013 0201 	ands.w	r2, r3, #1
 800a6ae:	d00a      	beq.n	800a6c6 <__swsetup_r+0x9a>
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	60a2      	str	r2, [r4, #8]
 800a6b4:	6962      	ldr	r2, [r4, #20]
 800a6b6:	4252      	negs	r2, r2
 800a6b8:	61a2      	str	r2, [r4, #24]
 800a6ba:	6922      	ldr	r2, [r4, #16]
 800a6bc:	b942      	cbnz	r2, 800a6d0 <__swsetup_r+0xa4>
 800a6be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a6c2:	d1c5      	bne.n	800a650 <__swsetup_r+0x24>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	0799      	lsls	r1, r3, #30
 800a6c8:	bf58      	it	pl
 800a6ca:	6962      	ldrpl	r2, [r4, #20]
 800a6cc:	60a2      	str	r2, [r4, #8]
 800a6ce:	e7f4      	b.n	800a6ba <__swsetup_r+0x8e>
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7f7      	b.n	800a6c4 <__swsetup_r+0x98>
 800a6d4:	200000d8 	.word	0x200000d8

0800a6d8 <memmove>:
 800a6d8:	4288      	cmp	r0, r1
 800a6da:	b510      	push	{r4, lr}
 800a6dc:	eb01 0402 	add.w	r4, r1, r2
 800a6e0:	d902      	bls.n	800a6e8 <memmove+0x10>
 800a6e2:	4284      	cmp	r4, r0
 800a6e4:	4623      	mov	r3, r4
 800a6e6:	d807      	bhi.n	800a6f8 <memmove+0x20>
 800a6e8:	1e43      	subs	r3, r0, #1
 800a6ea:	42a1      	cmp	r1, r4
 800a6ec:	d008      	beq.n	800a700 <memmove+0x28>
 800a6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6f6:	e7f8      	b.n	800a6ea <memmove+0x12>
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4601      	mov	r1, r0
 800a6fc:	428a      	cmp	r2, r1
 800a6fe:	d100      	bne.n	800a702 <memmove+0x2a>
 800a700:	bd10      	pop	{r4, pc}
 800a702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a70a:	e7f7      	b.n	800a6fc <memmove+0x24>

0800a70c <strncmp>:
 800a70c:	b510      	push	{r4, lr}
 800a70e:	b16a      	cbz	r2, 800a72c <strncmp+0x20>
 800a710:	3901      	subs	r1, #1
 800a712:	1884      	adds	r4, r0, r2
 800a714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a718:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d103      	bne.n	800a728 <strncmp+0x1c>
 800a720:	42a0      	cmp	r0, r4
 800a722:	d001      	beq.n	800a728 <strncmp+0x1c>
 800a724:	2a00      	cmp	r2, #0
 800a726:	d1f5      	bne.n	800a714 <strncmp+0x8>
 800a728:	1ad0      	subs	r0, r2, r3
 800a72a:	bd10      	pop	{r4, pc}
 800a72c:	4610      	mov	r0, r2
 800a72e:	e7fc      	b.n	800a72a <strncmp+0x1e>

0800a730 <_sbrk_r>:
 800a730:	b538      	push	{r3, r4, r5, lr}
 800a732:	4d06      	ldr	r5, [pc, #24]	@ (800a74c <_sbrk_r+0x1c>)
 800a734:	2300      	movs	r3, #0
 800a736:	4604      	mov	r4, r0
 800a738:	4608      	mov	r0, r1
 800a73a:	602b      	str	r3, [r5, #0]
 800a73c:	f7f7 faa6 	bl	8001c8c <_sbrk>
 800a740:	1c43      	adds	r3, r0, #1
 800a742:	d102      	bne.n	800a74a <_sbrk_r+0x1a>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	b103      	cbz	r3, 800a74a <_sbrk_r+0x1a>
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	bd38      	pop	{r3, r4, r5, pc}
 800a74c:	20001724 	.word	0x20001724

0800a750 <nan>:
 800a750:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a758 <nan+0x8>
 800a754:	4770      	bx	lr
 800a756:	bf00      	nop
 800a758:	00000000 	.word	0x00000000
 800a75c:	7ff80000 	.word	0x7ff80000

0800a760 <__assert_func>:
 800a760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a762:	4614      	mov	r4, r2
 800a764:	461a      	mov	r2, r3
 800a766:	4b09      	ldr	r3, [pc, #36]	@ (800a78c <__assert_func+0x2c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4605      	mov	r5, r0
 800a76c:	68d8      	ldr	r0, [r3, #12]
 800a76e:	b954      	cbnz	r4, 800a786 <__assert_func+0x26>
 800a770:	4b07      	ldr	r3, [pc, #28]	@ (800a790 <__assert_func+0x30>)
 800a772:	461c      	mov	r4, r3
 800a774:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a778:	9100      	str	r1, [sp, #0]
 800a77a:	462b      	mov	r3, r5
 800a77c:	4905      	ldr	r1, [pc, #20]	@ (800a794 <__assert_func+0x34>)
 800a77e:	f000 fba7 	bl	800aed0 <fiprintf>
 800a782:	f000 fc3b 	bl	800affc <abort>
 800a786:	4b04      	ldr	r3, [pc, #16]	@ (800a798 <__assert_func+0x38>)
 800a788:	e7f4      	b.n	800a774 <__assert_func+0x14>
 800a78a:	bf00      	nop
 800a78c:	200000d8 	.word	0x200000d8
 800a790:	0800bd95 	.word	0x0800bd95
 800a794:	0800bd67 	.word	0x0800bd67
 800a798:	0800bd5a 	.word	0x0800bd5a

0800a79c <_calloc_r>:
 800a79c:	b570      	push	{r4, r5, r6, lr}
 800a79e:	fba1 5402 	umull	r5, r4, r1, r2
 800a7a2:	b93c      	cbnz	r4, 800a7b4 <_calloc_r+0x18>
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	f7fd ffc7 	bl	8008738 <_malloc_r>
 800a7aa:	4606      	mov	r6, r0
 800a7ac:	b928      	cbnz	r0, 800a7ba <_calloc_r+0x1e>
 800a7ae:	2600      	movs	r6, #0
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	bd70      	pop	{r4, r5, r6, pc}
 800a7b4:	220c      	movs	r2, #12
 800a7b6:	6002      	str	r2, [r0, #0]
 800a7b8:	e7f9      	b.n	800a7ae <_calloc_r+0x12>
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4621      	mov	r1, r4
 800a7be:	f7fd f864 	bl	800788a <memset>
 800a7c2:	e7f5      	b.n	800a7b0 <_calloc_r+0x14>

0800a7c4 <rshift>:
 800a7c4:	6903      	ldr	r3, [r0, #16]
 800a7c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7d2:	f100 0414 	add.w	r4, r0, #20
 800a7d6:	dd45      	ble.n	800a864 <rshift+0xa0>
 800a7d8:	f011 011f 	ands.w	r1, r1, #31
 800a7dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a7e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a7e4:	d10c      	bne.n	800a800 <rshift+0x3c>
 800a7e6:	f100 0710 	add.w	r7, r0, #16
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	42b1      	cmp	r1, r6
 800a7ee:	d334      	bcc.n	800a85a <rshift+0x96>
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	1eea      	subs	r2, r5, #3
 800a7f6:	4296      	cmp	r6, r2
 800a7f8:	bf38      	it	cc
 800a7fa:	2300      	movcc	r3, #0
 800a7fc:	4423      	add	r3, r4
 800a7fe:	e015      	b.n	800a82c <rshift+0x68>
 800a800:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a804:	f1c1 0820 	rsb	r8, r1, #32
 800a808:	40cf      	lsrs	r7, r1
 800a80a:	f105 0e04 	add.w	lr, r5, #4
 800a80e:	46a1      	mov	r9, r4
 800a810:	4576      	cmp	r6, lr
 800a812:	46f4      	mov	ip, lr
 800a814:	d815      	bhi.n	800a842 <rshift+0x7e>
 800a816:	1a9a      	subs	r2, r3, r2
 800a818:	0092      	lsls	r2, r2, #2
 800a81a:	3a04      	subs	r2, #4
 800a81c:	3501      	adds	r5, #1
 800a81e:	42ae      	cmp	r6, r5
 800a820:	bf38      	it	cc
 800a822:	2200      	movcc	r2, #0
 800a824:	18a3      	adds	r3, r4, r2
 800a826:	50a7      	str	r7, [r4, r2]
 800a828:	b107      	cbz	r7, 800a82c <rshift+0x68>
 800a82a:	3304      	adds	r3, #4
 800a82c:	1b1a      	subs	r2, r3, r4
 800a82e:	42a3      	cmp	r3, r4
 800a830:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a834:	bf08      	it	eq
 800a836:	2300      	moveq	r3, #0
 800a838:	6102      	str	r2, [r0, #16]
 800a83a:	bf08      	it	eq
 800a83c:	6143      	streq	r3, [r0, #20]
 800a83e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a842:	f8dc c000 	ldr.w	ip, [ip]
 800a846:	fa0c fc08 	lsl.w	ip, ip, r8
 800a84a:	ea4c 0707 	orr.w	r7, ip, r7
 800a84e:	f849 7b04 	str.w	r7, [r9], #4
 800a852:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a856:	40cf      	lsrs	r7, r1
 800a858:	e7da      	b.n	800a810 <rshift+0x4c>
 800a85a:	f851 cb04 	ldr.w	ip, [r1], #4
 800a85e:	f847 cf04 	str.w	ip, [r7, #4]!
 800a862:	e7c3      	b.n	800a7ec <rshift+0x28>
 800a864:	4623      	mov	r3, r4
 800a866:	e7e1      	b.n	800a82c <rshift+0x68>

0800a868 <__hexdig_fun>:
 800a868:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a86c:	2b09      	cmp	r3, #9
 800a86e:	d802      	bhi.n	800a876 <__hexdig_fun+0xe>
 800a870:	3820      	subs	r0, #32
 800a872:	b2c0      	uxtb	r0, r0
 800a874:	4770      	bx	lr
 800a876:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a87a:	2b05      	cmp	r3, #5
 800a87c:	d801      	bhi.n	800a882 <__hexdig_fun+0x1a>
 800a87e:	3847      	subs	r0, #71	@ 0x47
 800a880:	e7f7      	b.n	800a872 <__hexdig_fun+0xa>
 800a882:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a886:	2b05      	cmp	r3, #5
 800a888:	d801      	bhi.n	800a88e <__hexdig_fun+0x26>
 800a88a:	3827      	subs	r0, #39	@ 0x27
 800a88c:	e7f1      	b.n	800a872 <__hexdig_fun+0xa>
 800a88e:	2000      	movs	r0, #0
 800a890:	4770      	bx	lr
	...

0800a894 <__gethex>:
 800a894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a898:	b085      	sub	sp, #20
 800a89a:	468a      	mov	sl, r1
 800a89c:	9302      	str	r3, [sp, #8]
 800a89e:	680b      	ldr	r3, [r1, #0]
 800a8a0:	9001      	str	r0, [sp, #4]
 800a8a2:	4690      	mov	r8, r2
 800a8a4:	1c9c      	adds	r4, r3, #2
 800a8a6:	46a1      	mov	r9, r4
 800a8a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a8ac:	2830      	cmp	r0, #48	@ 0x30
 800a8ae:	d0fa      	beq.n	800a8a6 <__gethex+0x12>
 800a8b0:	eba9 0303 	sub.w	r3, r9, r3
 800a8b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800a8b8:	f7ff ffd6 	bl	800a868 <__hexdig_fun>
 800a8bc:	4605      	mov	r5, r0
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d168      	bne.n	800a994 <__gethex+0x100>
 800a8c2:	49a0      	ldr	r1, [pc, #640]	@ (800ab44 <__gethex+0x2b0>)
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	4648      	mov	r0, r9
 800a8c8:	f7ff ff20 	bl	800a70c <strncmp>
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	d167      	bne.n	800a9a2 <__gethex+0x10e>
 800a8d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a8d6:	4626      	mov	r6, r4
 800a8d8:	f7ff ffc6 	bl	800a868 <__hexdig_fun>
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d062      	beq.n	800a9a6 <__gethex+0x112>
 800a8e0:	4623      	mov	r3, r4
 800a8e2:	7818      	ldrb	r0, [r3, #0]
 800a8e4:	2830      	cmp	r0, #48	@ 0x30
 800a8e6:	4699      	mov	r9, r3
 800a8e8:	f103 0301 	add.w	r3, r3, #1
 800a8ec:	d0f9      	beq.n	800a8e2 <__gethex+0x4e>
 800a8ee:	f7ff ffbb 	bl	800a868 <__hexdig_fun>
 800a8f2:	fab0 f580 	clz	r5, r0
 800a8f6:	096d      	lsrs	r5, r5, #5
 800a8f8:	f04f 0b01 	mov.w	fp, #1
 800a8fc:	464a      	mov	r2, r9
 800a8fe:	4616      	mov	r6, r2
 800a900:	3201      	adds	r2, #1
 800a902:	7830      	ldrb	r0, [r6, #0]
 800a904:	f7ff ffb0 	bl	800a868 <__hexdig_fun>
 800a908:	2800      	cmp	r0, #0
 800a90a:	d1f8      	bne.n	800a8fe <__gethex+0x6a>
 800a90c:	498d      	ldr	r1, [pc, #564]	@ (800ab44 <__gethex+0x2b0>)
 800a90e:	2201      	movs	r2, #1
 800a910:	4630      	mov	r0, r6
 800a912:	f7ff fefb 	bl	800a70c <strncmp>
 800a916:	2800      	cmp	r0, #0
 800a918:	d13f      	bne.n	800a99a <__gethex+0x106>
 800a91a:	b944      	cbnz	r4, 800a92e <__gethex+0x9a>
 800a91c:	1c74      	adds	r4, r6, #1
 800a91e:	4622      	mov	r2, r4
 800a920:	4616      	mov	r6, r2
 800a922:	3201      	adds	r2, #1
 800a924:	7830      	ldrb	r0, [r6, #0]
 800a926:	f7ff ff9f 	bl	800a868 <__hexdig_fun>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d1f8      	bne.n	800a920 <__gethex+0x8c>
 800a92e:	1ba4      	subs	r4, r4, r6
 800a930:	00a7      	lsls	r7, r4, #2
 800a932:	7833      	ldrb	r3, [r6, #0]
 800a934:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a938:	2b50      	cmp	r3, #80	@ 0x50
 800a93a:	d13e      	bne.n	800a9ba <__gethex+0x126>
 800a93c:	7873      	ldrb	r3, [r6, #1]
 800a93e:	2b2b      	cmp	r3, #43	@ 0x2b
 800a940:	d033      	beq.n	800a9aa <__gethex+0x116>
 800a942:	2b2d      	cmp	r3, #45	@ 0x2d
 800a944:	d034      	beq.n	800a9b0 <__gethex+0x11c>
 800a946:	1c71      	adds	r1, r6, #1
 800a948:	2400      	movs	r4, #0
 800a94a:	7808      	ldrb	r0, [r1, #0]
 800a94c:	f7ff ff8c 	bl	800a868 <__hexdig_fun>
 800a950:	1e43      	subs	r3, r0, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b18      	cmp	r3, #24
 800a956:	d830      	bhi.n	800a9ba <__gethex+0x126>
 800a958:	f1a0 0210 	sub.w	r2, r0, #16
 800a95c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a960:	f7ff ff82 	bl	800a868 <__hexdig_fun>
 800a964:	f100 3cff 	add.w	ip, r0, #4294967295
 800a968:	fa5f fc8c 	uxtb.w	ip, ip
 800a96c:	f1bc 0f18 	cmp.w	ip, #24
 800a970:	f04f 030a 	mov.w	r3, #10
 800a974:	d91e      	bls.n	800a9b4 <__gethex+0x120>
 800a976:	b104      	cbz	r4, 800a97a <__gethex+0xe6>
 800a978:	4252      	negs	r2, r2
 800a97a:	4417      	add	r7, r2
 800a97c:	f8ca 1000 	str.w	r1, [sl]
 800a980:	b1ed      	cbz	r5, 800a9be <__gethex+0x12a>
 800a982:	f1bb 0f00 	cmp.w	fp, #0
 800a986:	bf0c      	ite	eq
 800a988:	2506      	moveq	r5, #6
 800a98a:	2500      	movne	r5, #0
 800a98c:	4628      	mov	r0, r5
 800a98e:	b005      	add	sp, #20
 800a990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a994:	2500      	movs	r5, #0
 800a996:	462c      	mov	r4, r5
 800a998:	e7b0      	b.n	800a8fc <__gethex+0x68>
 800a99a:	2c00      	cmp	r4, #0
 800a99c:	d1c7      	bne.n	800a92e <__gethex+0x9a>
 800a99e:	4627      	mov	r7, r4
 800a9a0:	e7c7      	b.n	800a932 <__gethex+0x9e>
 800a9a2:	464e      	mov	r6, r9
 800a9a4:	462f      	mov	r7, r5
 800a9a6:	2501      	movs	r5, #1
 800a9a8:	e7c3      	b.n	800a932 <__gethex+0x9e>
 800a9aa:	2400      	movs	r4, #0
 800a9ac:	1cb1      	adds	r1, r6, #2
 800a9ae:	e7cc      	b.n	800a94a <__gethex+0xb6>
 800a9b0:	2401      	movs	r4, #1
 800a9b2:	e7fb      	b.n	800a9ac <__gethex+0x118>
 800a9b4:	fb03 0002 	mla	r0, r3, r2, r0
 800a9b8:	e7ce      	b.n	800a958 <__gethex+0xc4>
 800a9ba:	4631      	mov	r1, r6
 800a9bc:	e7de      	b.n	800a97c <__gethex+0xe8>
 800a9be:	eba6 0309 	sub.w	r3, r6, r9
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	2b07      	cmp	r3, #7
 800a9c8:	dc0a      	bgt.n	800a9e0 <__gethex+0x14c>
 800a9ca:	9801      	ldr	r0, [sp, #4]
 800a9cc:	f7fd ff40 	bl	8008850 <_Balloc>
 800a9d0:	4604      	mov	r4, r0
 800a9d2:	b940      	cbnz	r0, 800a9e6 <__gethex+0x152>
 800a9d4:	4b5c      	ldr	r3, [pc, #368]	@ (800ab48 <__gethex+0x2b4>)
 800a9d6:	4602      	mov	r2, r0
 800a9d8:	21e4      	movs	r1, #228	@ 0xe4
 800a9da:	485c      	ldr	r0, [pc, #368]	@ (800ab4c <__gethex+0x2b8>)
 800a9dc:	f7ff fec0 	bl	800a760 <__assert_func>
 800a9e0:	3101      	adds	r1, #1
 800a9e2:	105b      	asrs	r3, r3, #1
 800a9e4:	e7ef      	b.n	800a9c6 <__gethex+0x132>
 800a9e6:	f100 0a14 	add.w	sl, r0, #20
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	4655      	mov	r5, sl
 800a9ee:	469b      	mov	fp, r3
 800a9f0:	45b1      	cmp	r9, r6
 800a9f2:	d337      	bcc.n	800aa64 <__gethex+0x1d0>
 800a9f4:	f845 bb04 	str.w	fp, [r5], #4
 800a9f8:	eba5 050a 	sub.w	r5, r5, sl
 800a9fc:	10ad      	asrs	r5, r5, #2
 800a9fe:	6125      	str	r5, [r4, #16]
 800aa00:	4658      	mov	r0, fp
 800aa02:	f7fe f817 	bl	8008a34 <__hi0bits>
 800aa06:	016d      	lsls	r5, r5, #5
 800aa08:	f8d8 6000 	ldr.w	r6, [r8]
 800aa0c:	1a2d      	subs	r5, r5, r0
 800aa0e:	42b5      	cmp	r5, r6
 800aa10:	dd54      	ble.n	800aabc <__gethex+0x228>
 800aa12:	1bad      	subs	r5, r5, r6
 800aa14:	4629      	mov	r1, r5
 800aa16:	4620      	mov	r0, r4
 800aa18:	f7fe fbab 	bl	8009172 <__any_on>
 800aa1c:	4681      	mov	r9, r0
 800aa1e:	b178      	cbz	r0, 800aa40 <__gethex+0x1ac>
 800aa20:	1e6b      	subs	r3, r5, #1
 800aa22:	1159      	asrs	r1, r3, #5
 800aa24:	f003 021f 	and.w	r2, r3, #31
 800aa28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aa2c:	f04f 0901 	mov.w	r9, #1
 800aa30:	fa09 f202 	lsl.w	r2, r9, r2
 800aa34:	420a      	tst	r2, r1
 800aa36:	d003      	beq.n	800aa40 <__gethex+0x1ac>
 800aa38:	454b      	cmp	r3, r9
 800aa3a:	dc36      	bgt.n	800aaaa <__gethex+0x216>
 800aa3c:	f04f 0902 	mov.w	r9, #2
 800aa40:	4629      	mov	r1, r5
 800aa42:	4620      	mov	r0, r4
 800aa44:	f7ff febe 	bl	800a7c4 <rshift>
 800aa48:	442f      	add	r7, r5
 800aa4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa4e:	42bb      	cmp	r3, r7
 800aa50:	da42      	bge.n	800aad8 <__gethex+0x244>
 800aa52:	9801      	ldr	r0, [sp, #4]
 800aa54:	4621      	mov	r1, r4
 800aa56:	f7fd ff3b 	bl	80088d0 <_Bfree>
 800aa5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	6013      	str	r3, [r2, #0]
 800aa60:	25a3      	movs	r5, #163	@ 0xa3
 800aa62:	e793      	b.n	800a98c <__gethex+0xf8>
 800aa64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800aa68:	2a2e      	cmp	r2, #46	@ 0x2e
 800aa6a:	d012      	beq.n	800aa92 <__gethex+0x1fe>
 800aa6c:	2b20      	cmp	r3, #32
 800aa6e:	d104      	bne.n	800aa7a <__gethex+0x1e6>
 800aa70:	f845 bb04 	str.w	fp, [r5], #4
 800aa74:	f04f 0b00 	mov.w	fp, #0
 800aa78:	465b      	mov	r3, fp
 800aa7a:	7830      	ldrb	r0, [r6, #0]
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	f7ff fef3 	bl	800a868 <__hexdig_fun>
 800aa82:	9b03      	ldr	r3, [sp, #12]
 800aa84:	f000 000f 	and.w	r0, r0, #15
 800aa88:	4098      	lsls	r0, r3
 800aa8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800aa8e:	3304      	adds	r3, #4
 800aa90:	e7ae      	b.n	800a9f0 <__gethex+0x15c>
 800aa92:	45b1      	cmp	r9, r6
 800aa94:	d8ea      	bhi.n	800aa6c <__gethex+0x1d8>
 800aa96:	492b      	ldr	r1, [pc, #172]	@ (800ab44 <__gethex+0x2b0>)
 800aa98:	9303      	str	r3, [sp, #12]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff fe35 	bl	800a70c <strncmp>
 800aaa2:	9b03      	ldr	r3, [sp, #12]
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d1e1      	bne.n	800aa6c <__gethex+0x1d8>
 800aaa8:	e7a2      	b.n	800a9f0 <__gethex+0x15c>
 800aaaa:	1ea9      	subs	r1, r5, #2
 800aaac:	4620      	mov	r0, r4
 800aaae:	f7fe fb60 	bl	8009172 <__any_on>
 800aab2:	2800      	cmp	r0, #0
 800aab4:	d0c2      	beq.n	800aa3c <__gethex+0x1a8>
 800aab6:	f04f 0903 	mov.w	r9, #3
 800aaba:	e7c1      	b.n	800aa40 <__gethex+0x1ac>
 800aabc:	da09      	bge.n	800aad2 <__gethex+0x23e>
 800aabe:	1b75      	subs	r5, r6, r5
 800aac0:	4621      	mov	r1, r4
 800aac2:	9801      	ldr	r0, [sp, #4]
 800aac4:	462a      	mov	r2, r5
 800aac6:	f7fe f91b 	bl	8008d00 <__lshift>
 800aaca:	1b7f      	subs	r7, r7, r5
 800aacc:	4604      	mov	r4, r0
 800aace:	f100 0a14 	add.w	sl, r0, #20
 800aad2:	f04f 0900 	mov.w	r9, #0
 800aad6:	e7b8      	b.n	800aa4a <__gethex+0x1b6>
 800aad8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aadc:	42bd      	cmp	r5, r7
 800aade:	dd6f      	ble.n	800abc0 <__gethex+0x32c>
 800aae0:	1bed      	subs	r5, r5, r7
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	dc34      	bgt.n	800ab50 <__gethex+0x2bc>
 800aae6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aaea:	2b02      	cmp	r3, #2
 800aaec:	d022      	beq.n	800ab34 <__gethex+0x2a0>
 800aaee:	2b03      	cmp	r3, #3
 800aaf0:	d024      	beq.n	800ab3c <__gethex+0x2a8>
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d115      	bne.n	800ab22 <__gethex+0x28e>
 800aaf6:	42ae      	cmp	r6, r5
 800aaf8:	d113      	bne.n	800ab22 <__gethex+0x28e>
 800aafa:	2e01      	cmp	r6, #1
 800aafc:	d10b      	bne.n	800ab16 <__gethex+0x282>
 800aafe:	9a02      	ldr	r2, [sp, #8]
 800ab00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab04:	6013      	str	r3, [r2, #0]
 800ab06:	2301      	movs	r3, #1
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	f8ca 3000 	str.w	r3, [sl]
 800ab0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab10:	2562      	movs	r5, #98	@ 0x62
 800ab12:	601c      	str	r4, [r3, #0]
 800ab14:	e73a      	b.n	800a98c <__gethex+0xf8>
 800ab16:	1e71      	subs	r1, r6, #1
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7fe fb2a 	bl	8009172 <__any_on>
 800ab1e:	2800      	cmp	r0, #0
 800ab20:	d1ed      	bne.n	800aafe <__gethex+0x26a>
 800ab22:	9801      	ldr	r0, [sp, #4]
 800ab24:	4621      	mov	r1, r4
 800ab26:	f7fd fed3 	bl	80088d0 <_Bfree>
 800ab2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	6013      	str	r3, [r2, #0]
 800ab30:	2550      	movs	r5, #80	@ 0x50
 800ab32:	e72b      	b.n	800a98c <__gethex+0xf8>
 800ab34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d1f3      	bne.n	800ab22 <__gethex+0x28e>
 800ab3a:	e7e0      	b.n	800aafe <__gethex+0x26a>
 800ab3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d1dd      	bne.n	800aafe <__gethex+0x26a>
 800ab42:	e7ee      	b.n	800ab22 <__gethex+0x28e>
 800ab44:	0800bbe8 	.word	0x0800bbe8
 800ab48:	0800ba82 	.word	0x0800ba82
 800ab4c:	0800bd96 	.word	0x0800bd96
 800ab50:	1e6f      	subs	r7, r5, #1
 800ab52:	f1b9 0f00 	cmp.w	r9, #0
 800ab56:	d130      	bne.n	800abba <__gethex+0x326>
 800ab58:	b127      	cbz	r7, 800ab64 <__gethex+0x2d0>
 800ab5a:	4639      	mov	r1, r7
 800ab5c:	4620      	mov	r0, r4
 800ab5e:	f7fe fb08 	bl	8009172 <__any_on>
 800ab62:	4681      	mov	r9, r0
 800ab64:	117a      	asrs	r2, r7, #5
 800ab66:	2301      	movs	r3, #1
 800ab68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ab6c:	f007 071f 	and.w	r7, r7, #31
 800ab70:	40bb      	lsls	r3, r7
 800ab72:	4213      	tst	r3, r2
 800ab74:	4629      	mov	r1, r5
 800ab76:	4620      	mov	r0, r4
 800ab78:	bf18      	it	ne
 800ab7a:	f049 0902 	orrne.w	r9, r9, #2
 800ab7e:	f7ff fe21 	bl	800a7c4 <rshift>
 800ab82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ab86:	1b76      	subs	r6, r6, r5
 800ab88:	2502      	movs	r5, #2
 800ab8a:	f1b9 0f00 	cmp.w	r9, #0
 800ab8e:	d047      	beq.n	800ac20 <__gethex+0x38c>
 800ab90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab94:	2b02      	cmp	r3, #2
 800ab96:	d015      	beq.n	800abc4 <__gethex+0x330>
 800ab98:	2b03      	cmp	r3, #3
 800ab9a:	d017      	beq.n	800abcc <__gethex+0x338>
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d109      	bne.n	800abb4 <__gethex+0x320>
 800aba0:	f019 0f02 	tst.w	r9, #2
 800aba4:	d006      	beq.n	800abb4 <__gethex+0x320>
 800aba6:	f8da 3000 	ldr.w	r3, [sl]
 800abaa:	ea49 0903 	orr.w	r9, r9, r3
 800abae:	f019 0f01 	tst.w	r9, #1
 800abb2:	d10e      	bne.n	800abd2 <__gethex+0x33e>
 800abb4:	f045 0510 	orr.w	r5, r5, #16
 800abb8:	e032      	b.n	800ac20 <__gethex+0x38c>
 800abba:	f04f 0901 	mov.w	r9, #1
 800abbe:	e7d1      	b.n	800ab64 <__gethex+0x2d0>
 800abc0:	2501      	movs	r5, #1
 800abc2:	e7e2      	b.n	800ab8a <__gethex+0x2f6>
 800abc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abc6:	f1c3 0301 	rsb	r3, r3, #1
 800abca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800abcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d0f0      	beq.n	800abb4 <__gethex+0x320>
 800abd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abd6:	f104 0314 	add.w	r3, r4, #20
 800abda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abe2:	f04f 0c00 	mov.w	ip, #0
 800abe6:	4618      	mov	r0, r3
 800abe8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abf0:	d01b      	beq.n	800ac2a <__gethex+0x396>
 800abf2:	3201      	adds	r2, #1
 800abf4:	6002      	str	r2, [r0, #0]
 800abf6:	2d02      	cmp	r5, #2
 800abf8:	f104 0314 	add.w	r3, r4, #20
 800abfc:	d13c      	bne.n	800ac78 <__gethex+0x3e4>
 800abfe:	f8d8 2000 	ldr.w	r2, [r8]
 800ac02:	3a01      	subs	r2, #1
 800ac04:	42b2      	cmp	r2, r6
 800ac06:	d109      	bne.n	800ac1c <__gethex+0x388>
 800ac08:	1171      	asrs	r1, r6, #5
 800ac0a:	2201      	movs	r2, #1
 800ac0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac10:	f006 061f 	and.w	r6, r6, #31
 800ac14:	fa02 f606 	lsl.w	r6, r2, r6
 800ac18:	421e      	tst	r6, r3
 800ac1a:	d13a      	bne.n	800ac92 <__gethex+0x3fe>
 800ac1c:	f045 0520 	orr.w	r5, r5, #32
 800ac20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac22:	601c      	str	r4, [r3, #0]
 800ac24:	9b02      	ldr	r3, [sp, #8]
 800ac26:	601f      	str	r7, [r3, #0]
 800ac28:	e6b0      	b.n	800a98c <__gethex+0xf8>
 800ac2a:	4299      	cmp	r1, r3
 800ac2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac30:	d8d9      	bhi.n	800abe6 <__gethex+0x352>
 800ac32:	68a3      	ldr	r3, [r4, #8]
 800ac34:	459b      	cmp	fp, r3
 800ac36:	db17      	blt.n	800ac68 <__gethex+0x3d4>
 800ac38:	6861      	ldr	r1, [r4, #4]
 800ac3a:	9801      	ldr	r0, [sp, #4]
 800ac3c:	3101      	adds	r1, #1
 800ac3e:	f7fd fe07 	bl	8008850 <_Balloc>
 800ac42:	4681      	mov	r9, r0
 800ac44:	b918      	cbnz	r0, 800ac4e <__gethex+0x3ba>
 800ac46:	4b1a      	ldr	r3, [pc, #104]	@ (800acb0 <__gethex+0x41c>)
 800ac48:	4602      	mov	r2, r0
 800ac4a:	2184      	movs	r1, #132	@ 0x84
 800ac4c:	e6c5      	b.n	800a9da <__gethex+0x146>
 800ac4e:	6922      	ldr	r2, [r4, #16]
 800ac50:	3202      	adds	r2, #2
 800ac52:	f104 010c 	add.w	r1, r4, #12
 800ac56:	0092      	lsls	r2, r2, #2
 800ac58:	300c      	adds	r0, #12
 800ac5a:	f7fc fe96 	bl	800798a <memcpy>
 800ac5e:	4621      	mov	r1, r4
 800ac60:	9801      	ldr	r0, [sp, #4]
 800ac62:	f7fd fe35 	bl	80088d0 <_Bfree>
 800ac66:	464c      	mov	r4, r9
 800ac68:	6923      	ldr	r3, [r4, #16]
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac70:	6122      	str	r2, [r4, #16]
 800ac72:	2201      	movs	r2, #1
 800ac74:	615a      	str	r2, [r3, #20]
 800ac76:	e7be      	b.n	800abf6 <__gethex+0x362>
 800ac78:	6922      	ldr	r2, [r4, #16]
 800ac7a:	455a      	cmp	r2, fp
 800ac7c:	dd0b      	ble.n	800ac96 <__gethex+0x402>
 800ac7e:	2101      	movs	r1, #1
 800ac80:	4620      	mov	r0, r4
 800ac82:	f7ff fd9f 	bl	800a7c4 <rshift>
 800ac86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac8a:	3701      	adds	r7, #1
 800ac8c:	42bb      	cmp	r3, r7
 800ac8e:	f6ff aee0 	blt.w	800aa52 <__gethex+0x1be>
 800ac92:	2501      	movs	r5, #1
 800ac94:	e7c2      	b.n	800ac1c <__gethex+0x388>
 800ac96:	f016 061f 	ands.w	r6, r6, #31
 800ac9a:	d0fa      	beq.n	800ac92 <__gethex+0x3fe>
 800ac9c:	4453      	add	r3, sl
 800ac9e:	f1c6 0620 	rsb	r6, r6, #32
 800aca2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aca6:	f7fd fec5 	bl	8008a34 <__hi0bits>
 800acaa:	42b0      	cmp	r0, r6
 800acac:	dbe7      	blt.n	800ac7e <__gethex+0x3ea>
 800acae:	e7f0      	b.n	800ac92 <__gethex+0x3fe>
 800acb0:	0800ba82 	.word	0x0800ba82

0800acb4 <L_shift>:
 800acb4:	f1c2 0208 	rsb	r2, r2, #8
 800acb8:	0092      	lsls	r2, r2, #2
 800acba:	b570      	push	{r4, r5, r6, lr}
 800acbc:	f1c2 0620 	rsb	r6, r2, #32
 800acc0:	6843      	ldr	r3, [r0, #4]
 800acc2:	6804      	ldr	r4, [r0, #0]
 800acc4:	fa03 f506 	lsl.w	r5, r3, r6
 800acc8:	432c      	orrs	r4, r5
 800acca:	40d3      	lsrs	r3, r2
 800accc:	6004      	str	r4, [r0, #0]
 800acce:	f840 3f04 	str.w	r3, [r0, #4]!
 800acd2:	4288      	cmp	r0, r1
 800acd4:	d3f4      	bcc.n	800acc0 <L_shift+0xc>
 800acd6:	bd70      	pop	{r4, r5, r6, pc}

0800acd8 <__match>:
 800acd8:	b530      	push	{r4, r5, lr}
 800acda:	6803      	ldr	r3, [r0, #0]
 800acdc:	3301      	adds	r3, #1
 800acde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ace2:	b914      	cbnz	r4, 800acea <__match+0x12>
 800ace4:	6003      	str	r3, [r0, #0]
 800ace6:	2001      	movs	r0, #1
 800ace8:	bd30      	pop	{r4, r5, pc}
 800acea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800acf2:	2d19      	cmp	r5, #25
 800acf4:	bf98      	it	ls
 800acf6:	3220      	addls	r2, #32
 800acf8:	42a2      	cmp	r2, r4
 800acfa:	d0f0      	beq.n	800acde <__match+0x6>
 800acfc:	2000      	movs	r0, #0
 800acfe:	e7f3      	b.n	800ace8 <__match+0x10>

0800ad00 <__hexnan>:
 800ad00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad04:	680b      	ldr	r3, [r1, #0]
 800ad06:	6801      	ldr	r1, [r0, #0]
 800ad08:	115e      	asrs	r6, r3, #5
 800ad0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad0e:	f013 031f 	ands.w	r3, r3, #31
 800ad12:	b087      	sub	sp, #28
 800ad14:	bf18      	it	ne
 800ad16:	3604      	addne	r6, #4
 800ad18:	2500      	movs	r5, #0
 800ad1a:	1f37      	subs	r7, r6, #4
 800ad1c:	4682      	mov	sl, r0
 800ad1e:	4690      	mov	r8, r2
 800ad20:	9301      	str	r3, [sp, #4]
 800ad22:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad26:	46b9      	mov	r9, r7
 800ad28:	463c      	mov	r4, r7
 800ad2a:	9502      	str	r5, [sp, #8]
 800ad2c:	46ab      	mov	fp, r5
 800ad2e:	784a      	ldrb	r2, [r1, #1]
 800ad30:	1c4b      	adds	r3, r1, #1
 800ad32:	9303      	str	r3, [sp, #12]
 800ad34:	b342      	cbz	r2, 800ad88 <__hexnan+0x88>
 800ad36:	4610      	mov	r0, r2
 800ad38:	9105      	str	r1, [sp, #20]
 800ad3a:	9204      	str	r2, [sp, #16]
 800ad3c:	f7ff fd94 	bl	800a868 <__hexdig_fun>
 800ad40:	2800      	cmp	r0, #0
 800ad42:	d151      	bne.n	800ade8 <__hexnan+0xe8>
 800ad44:	9a04      	ldr	r2, [sp, #16]
 800ad46:	9905      	ldr	r1, [sp, #20]
 800ad48:	2a20      	cmp	r2, #32
 800ad4a:	d818      	bhi.n	800ad7e <__hexnan+0x7e>
 800ad4c:	9b02      	ldr	r3, [sp, #8]
 800ad4e:	459b      	cmp	fp, r3
 800ad50:	dd13      	ble.n	800ad7a <__hexnan+0x7a>
 800ad52:	454c      	cmp	r4, r9
 800ad54:	d206      	bcs.n	800ad64 <__hexnan+0x64>
 800ad56:	2d07      	cmp	r5, #7
 800ad58:	dc04      	bgt.n	800ad64 <__hexnan+0x64>
 800ad5a:	462a      	mov	r2, r5
 800ad5c:	4649      	mov	r1, r9
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f7ff ffa8 	bl	800acb4 <L_shift>
 800ad64:	4544      	cmp	r4, r8
 800ad66:	d952      	bls.n	800ae0e <__hexnan+0x10e>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	f1a4 0904 	sub.w	r9, r4, #4
 800ad6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad72:	f8cd b008 	str.w	fp, [sp, #8]
 800ad76:	464c      	mov	r4, r9
 800ad78:	461d      	mov	r5, r3
 800ad7a:	9903      	ldr	r1, [sp, #12]
 800ad7c:	e7d7      	b.n	800ad2e <__hexnan+0x2e>
 800ad7e:	2a29      	cmp	r2, #41	@ 0x29
 800ad80:	d157      	bne.n	800ae32 <__hexnan+0x132>
 800ad82:	3102      	adds	r1, #2
 800ad84:	f8ca 1000 	str.w	r1, [sl]
 800ad88:	f1bb 0f00 	cmp.w	fp, #0
 800ad8c:	d051      	beq.n	800ae32 <__hexnan+0x132>
 800ad8e:	454c      	cmp	r4, r9
 800ad90:	d206      	bcs.n	800ada0 <__hexnan+0xa0>
 800ad92:	2d07      	cmp	r5, #7
 800ad94:	dc04      	bgt.n	800ada0 <__hexnan+0xa0>
 800ad96:	462a      	mov	r2, r5
 800ad98:	4649      	mov	r1, r9
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f7ff ff8a 	bl	800acb4 <L_shift>
 800ada0:	4544      	cmp	r4, r8
 800ada2:	d936      	bls.n	800ae12 <__hexnan+0x112>
 800ada4:	f1a8 0204 	sub.w	r2, r8, #4
 800ada8:	4623      	mov	r3, r4
 800adaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800adae:	f842 1f04 	str.w	r1, [r2, #4]!
 800adb2:	429f      	cmp	r7, r3
 800adb4:	d2f9      	bcs.n	800adaa <__hexnan+0xaa>
 800adb6:	1b3b      	subs	r3, r7, r4
 800adb8:	f023 0303 	bic.w	r3, r3, #3
 800adbc:	3304      	adds	r3, #4
 800adbe:	3401      	adds	r4, #1
 800adc0:	3e03      	subs	r6, #3
 800adc2:	42b4      	cmp	r4, r6
 800adc4:	bf88      	it	hi
 800adc6:	2304      	movhi	r3, #4
 800adc8:	4443      	add	r3, r8
 800adca:	2200      	movs	r2, #0
 800adcc:	f843 2b04 	str.w	r2, [r3], #4
 800add0:	429f      	cmp	r7, r3
 800add2:	d2fb      	bcs.n	800adcc <__hexnan+0xcc>
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	b91b      	cbnz	r3, 800ade0 <__hexnan+0xe0>
 800add8:	4547      	cmp	r7, r8
 800adda:	d128      	bne.n	800ae2e <__hexnan+0x12e>
 800addc:	2301      	movs	r3, #1
 800adde:	603b      	str	r3, [r7, #0]
 800ade0:	2005      	movs	r0, #5
 800ade2:	b007      	add	sp, #28
 800ade4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade8:	3501      	adds	r5, #1
 800adea:	2d08      	cmp	r5, #8
 800adec:	f10b 0b01 	add.w	fp, fp, #1
 800adf0:	dd06      	ble.n	800ae00 <__hexnan+0x100>
 800adf2:	4544      	cmp	r4, r8
 800adf4:	d9c1      	bls.n	800ad7a <__hexnan+0x7a>
 800adf6:	2300      	movs	r3, #0
 800adf8:	f844 3c04 	str.w	r3, [r4, #-4]
 800adfc:	2501      	movs	r5, #1
 800adfe:	3c04      	subs	r4, #4
 800ae00:	6822      	ldr	r2, [r4, #0]
 800ae02:	f000 000f 	and.w	r0, r0, #15
 800ae06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ae0a:	6020      	str	r0, [r4, #0]
 800ae0c:	e7b5      	b.n	800ad7a <__hexnan+0x7a>
 800ae0e:	2508      	movs	r5, #8
 800ae10:	e7b3      	b.n	800ad7a <__hexnan+0x7a>
 800ae12:	9b01      	ldr	r3, [sp, #4]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d0dd      	beq.n	800add4 <__hexnan+0xd4>
 800ae18:	f1c3 0320 	rsb	r3, r3, #32
 800ae1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae20:	40da      	lsrs	r2, r3
 800ae22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ae26:	4013      	ands	r3, r2
 800ae28:	f846 3c04 	str.w	r3, [r6, #-4]
 800ae2c:	e7d2      	b.n	800add4 <__hexnan+0xd4>
 800ae2e:	3f04      	subs	r7, #4
 800ae30:	e7d0      	b.n	800add4 <__hexnan+0xd4>
 800ae32:	2004      	movs	r0, #4
 800ae34:	e7d5      	b.n	800ade2 <__hexnan+0xe2>

0800ae36 <__ascii_mbtowc>:
 800ae36:	b082      	sub	sp, #8
 800ae38:	b901      	cbnz	r1, 800ae3c <__ascii_mbtowc+0x6>
 800ae3a:	a901      	add	r1, sp, #4
 800ae3c:	b142      	cbz	r2, 800ae50 <__ascii_mbtowc+0x1a>
 800ae3e:	b14b      	cbz	r3, 800ae54 <__ascii_mbtowc+0x1e>
 800ae40:	7813      	ldrb	r3, [r2, #0]
 800ae42:	600b      	str	r3, [r1, #0]
 800ae44:	7812      	ldrb	r2, [r2, #0]
 800ae46:	1e10      	subs	r0, r2, #0
 800ae48:	bf18      	it	ne
 800ae4a:	2001      	movne	r0, #1
 800ae4c:	b002      	add	sp, #8
 800ae4e:	4770      	bx	lr
 800ae50:	4610      	mov	r0, r2
 800ae52:	e7fb      	b.n	800ae4c <__ascii_mbtowc+0x16>
 800ae54:	f06f 0001 	mvn.w	r0, #1
 800ae58:	e7f8      	b.n	800ae4c <__ascii_mbtowc+0x16>

0800ae5a <_realloc_r>:
 800ae5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5e:	4680      	mov	r8, r0
 800ae60:	4615      	mov	r5, r2
 800ae62:	460c      	mov	r4, r1
 800ae64:	b921      	cbnz	r1, 800ae70 <_realloc_r+0x16>
 800ae66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	f7fd bc64 	b.w	8008738 <_malloc_r>
 800ae70:	b92a      	cbnz	r2, 800ae7e <_realloc_r+0x24>
 800ae72:	f7fd fbed 	bl	8008650 <_free_r>
 800ae76:	2400      	movs	r4, #0
 800ae78:	4620      	mov	r0, r4
 800ae7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae7e:	f000 f8c4 	bl	800b00a <_malloc_usable_size_r>
 800ae82:	4285      	cmp	r5, r0
 800ae84:	4606      	mov	r6, r0
 800ae86:	d802      	bhi.n	800ae8e <_realloc_r+0x34>
 800ae88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ae8c:	d8f4      	bhi.n	800ae78 <_realloc_r+0x1e>
 800ae8e:	4629      	mov	r1, r5
 800ae90:	4640      	mov	r0, r8
 800ae92:	f7fd fc51 	bl	8008738 <_malloc_r>
 800ae96:	4607      	mov	r7, r0
 800ae98:	2800      	cmp	r0, #0
 800ae9a:	d0ec      	beq.n	800ae76 <_realloc_r+0x1c>
 800ae9c:	42b5      	cmp	r5, r6
 800ae9e:	462a      	mov	r2, r5
 800aea0:	4621      	mov	r1, r4
 800aea2:	bf28      	it	cs
 800aea4:	4632      	movcs	r2, r6
 800aea6:	f7fc fd70 	bl	800798a <memcpy>
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4640      	mov	r0, r8
 800aeae:	f7fd fbcf 	bl	8008650 <_free_r>
 800aeb2:	463c      	mov	r4, r7
 800aeb4:	e7e0      	b.n	800ae78 <_realloc_r+0x1e>

0800aeb6 <__ascii_wctomb>:
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	4608      	mov	r0, r1
 800aeba:	b141      	cbz	r1, 800aece <__ascii_wctomb+0x18>
 800aebc:	2aff      	cmp	r2, #255	@ 0xff
 800aebe:	d904      	bls.n	800aeca <__ascii_wctomb+0x14>
 800aec0:	228a      	movs	r2, #138	@ 0x8a
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	4770      	bx	lr
 800aeca:	700a      	strb	r2, [r1, #0]
 800aecc:	2001      	movs	r0, #1
 800aece:	4770      	bx	lr

0800aed0 <fiprintf>:
 800aed0:	b40e      	push	{r1, r2, r3}
 800aed2:	b503      	push	{r0, r1, lr}
 800aed4:	4601      	mov	r1, r0
 800aed6:	ab03      	add	r3, sp, #12
 800aed8:	4805      	ldr	r0, [pc, #20]	@ (800aef0 <fiprintf+0x20>)
 800aeda:	f853 2b04 	ldr.w	r2, [r3], #4
 800aede:	6800      	ldr	r0, [r0, #0]
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	f7ff f96d 	bl	800a1c0 <_vfiprintf_r>
 800aee6:	b002      	add	sp, #8
 800aee8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeec:	b003      	add	sp, #12
 800aeee:	4770      	bx	lr
 800aef0:	200000d8 	.word	0x200000d8

0800aef4 <__swhatbuf_r>:
 800aef4:	b570      	push	{r4, r5, r6, lr}
 800aef6:	460c      	mov	r4, r1
 800aef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aefc:	2900      	cmp	r1, #0
 800aefe:	b096      	sub	sp, #88	@ 0x58
 800af00:	4615      	mov	r5, r2
 800af02:	461e      	mov	r6, r3
 800af04:	da0d      	bge.n	800af22 <__swhatbuf_r+0x2e>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af0c:	f04f 0100 	mov.w	r1, #0
 800af10:	bf14      	ite	ne
 800af12:	2340      	movne	r3, #64	@ 0x40
 800af14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af18:	2000      	movs	r0, #0
 800af1a:	6031      	str	r1, [r6, #0]
 800af1c:	602b      	str	r3, [r5, #0]
 800af1e:	b016      	add	sp, #88	@ 0x58
 800af20:	bd70      	pop	{r4, r5, r6, pc}
 800af22:	466a      	mov	r2, sp
 800af24:	f000 f848 	bl	800afb8 <_fstat_r>
 800af28:	2800      	cmp	r0, #0
 800af2a:	dbec      	blt.n	800af06 <__swhatbuf_r+0x12>
 800af2c:	9901      	ldr	r1, [sp, #4]
 800af2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800af32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af36:	4259      	negs	r1, r3
 800af38:	4159      	adcs	r1, r3
 800af3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af3e:	e7eb      	b.n	800af18 <__swhatbuf_r+0x24>

0800af40 <__smakebuf_r>:
 800af40:	898b      	ldrh	r3, [r1, #12]
 800af42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af44:	079d      	lsls	r5, r3, #30
 800af46:	4606      	mov	r6, r0
 800af48:	460c      	mov	r4, r1
 800af4a:	d507      	bpl.n	800af5c <__smakebuf_r+0x1c>
 800af4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af50:	6023      	str	r3, [r4, #0]
 800af52:	6123      	str	r3, [r4, #16]
 800af54:	2301      	movs	r3, #1
 800af56:	6163      	str	r3, [r4, #20]
 800af58:	b003      	add	sp, #12
 800af5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af5c:	ab01      	add	r3, sp, #4
 800af5e:	466a      	mov	r2, sp
 800af60:	f7ff ffc8 	bl	800aef4 <__swhatbuf_r>
 800af64:	9f00      	ldr	r7, [sp, #0]
 800af66:	4605      	mov	r5, r0
 800af68:	4639      	mov	r1, r7
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7fd fbe4 	bl	8008738 <_malloc_r>
 800af70:	b948      	cbnz	r0, 800af86 <__smakebuf_r+0x46>
 800af72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af76:	059a      	lsls	r2, r3, #22
 800af78:	d4ee      	bmi.n	800af58 <__smakebuf_r+0x18>
 800af7a:	f023 0303 	bic.w	r3, r3, #3
 800af7e:	f043 0302 	orr.w	r3, r3, #2
 800af82:	81a3      	strh	r3, [r4, #12]
 800af84:	e7e2      	b.n	800af4c <__smakebuf_r+0xc>
 800af86:	89a3      	ldrh	r3, [r4, #12]
 800af88:	6020      	str	r0, [r4, #0]
 800af8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af8e:	81a3      	strh	r3, [r4, #12]
 800af90:	9b01      	ldr	r3, [sp, #4]
 800af92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af96:	b15b      	cbz	r3, 800afb0 <__smakebuf_r+0x70>
 800af98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af9c:	4630      	mov	r0, r6
 800af9e:	f000 f81d 	bl	800afdc <_isatty_r>
 800afa2:	b128      	cbz	r0, 800afb0 <__smakebuf_r+0x70>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f023 0303 	bic.w	r3, r3, #3
 800afaa:	f043 0301 	orr.w	r3, r3, #1
 800afae:	81a3      	strh	r3, [r4, #12]
 800afb0:	89a3      	ldrh	r3, [r4, #12]
 800afb2:	431d      	orrs	r5, r3
 800afb4:	81a5      	strh	r5, [r4, #12]
 800afb6:	e7cf      	b.n	800af58 <__smakebuf_r+0x18>

0800afb8 <_fstat_r>:
 800afb8:	b538      	push	{r3, r4, r5, lr}
 800afba:	4d07      	ldr	r5, [pc, #28]	@ (800afd8 <_fstat_r+0x20>)
 800afbc:	2300      	movs	r3, #0
 800afbe:	4604      	mov	r4, r0
 800afc0:	4608      	mov	r0, r1
 800afc2:	4611      	mov	r1, r2
 800afc4:	602b      	str	r3, [r5, #0]
 800afc6:	f7f6 fe58 	bl	8001c7a <_fstat>
 800afca:	1c43      	adds	r3, r0, #1
 800afcc:	d102      	bne.n	800afd4 <_fstat_r+0x1c>
 800afce:	682b      	ldr	r3, [r5, #0]
 800afd0:	b103      	cbz	r3, 800afd4 <_fstat_r+0x1c>
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd38      	pop	{r3, r4, r5, pc}
 800afd6:	bf00      	nop
 800afd8:	20001724 	.word	0x20001724

0800afdc <_isatty_r>:
 800afdc:	b538      	push	{r3, r4, r5, lr}
 800afde:	4d06      	ldr	r5, [pc, #24]	@ (800aff8 <_isatty_r+0x1c>)
 800afe0:	2300      	movs	r3, #0
 800afe2:	4604      	mov	r4, r0
 800afe4:	4608      	mov	r0, r1
 800afe6:	602b      	str	r3, [r5, #0]
 800afe8:	f7f6 fe4c 	bl	8001c84 <_isatty>
 800afec:	1c43      	adds	r3, r0, #1
 800afee:	d102      	bne.n	800aff6 <_isatty_r+0x1a>
 800aff0:	682b      	ldr	r3, [r5, #0]
 800aff2:	b103      	cbz	r3, 800aff6 <_isatty_r+0x1a>
 800aff4:	6023      	str	r3, [r4, #0]
 800aff6:	bd38      	pop	{r3, r4, r5, pc}
 800aff8:	20001724 	.word	0x20001724

0800affc <abort>:
 800affc:	b508      	push	{r3, lr}
 800affe:	2006      	movs	r0, #6
 800b000:	f000 f834 	bl	800b06c <raise>
 800b004:	2001      	movs	r0, #1
 800b006:	f7f6 fe15 	bl	8001c34 <_exit>

0800b00a <_malloc_usable_size_r>:
 800b00a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00e:	1f18      	subs	r0, r3, #4
 800b010:	2b00      	cmp	r3, #0
 800b012:	bfbc      	itt	lt
 800b014:	580b      	ldrlt	r3, [r1, r0]
 800b016:	18c0      	addlt	r0, r0, r3
 800b018:	4770      	bx	lr

0800b01a <_raise_r>:
 800b01a:	291f      	cmp	r1, #31
 800b01c:	b538      	push	{r3, r4, r5, lr}
 800b01e:	4605      	mov	r5, r0
 800b020:	460c      	mov	r4, r1
 800b022:	d904      	bls.n	800b02e <_raise_r+0x14>
 800b024:	2316      	movs	r3, #22
 800b026:	6003      	str	r3, [r0, #0]
 800b028:	f04f 30ff 	mov.w	r0, #4294967295
 800b02c:	bd38      	pop	{r3, r4, r5, pc}
 800b02e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b030:	b112      	cbz	r2, 800b038 <_raise_r+0x1e>
 800b032:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b036:	b94b      	cbnz	r3, 800b04c <_raise_r+0x32>
 800b038:	4628      	mov	r0, r5
 800b03a:	f000 f831 	bl	800b0a0 <_getpid_r>
 800b03e:	4622      	mov	r2, r4
 800b040:	4601      	mov	r1, r0
 800b042:	4628      	mov	r0, r5
 800b044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b048:	f000 b818 	b.w	800b07c <_kill_r>
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d00a      	beq.n	800b066 <_raise_r+0x4c>
 800b050:	1c59      	adds	r1, r3, #1
 800b052:	d103      	bne.n	800b05c <_raise_r+0x42>
 800b054:	2316      	movs	r3, #22
 800b056:	6003      	str	r3, [r0, #0]
 800b058:	2001      	movs	r0, #1
 800b05a:	e7e7      	b.n	800b02c <_raise_r+0x12>
 800b05c:	2100      	movs	r1, #0
 800b05e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b062:	4620      	mov	r0, r4
 800b064:	4798      	blx	r3
 800b066:	2000      	movs	r0, #0
 800b068:	e7e0      	b.n	800b02c <_raise_r+0x12>
	...

0800b06c <raise>:
 800b06c:	4b02      	ldr	r3, [pc, #8]	@ (800b078 <raise+0xc>)
 800b06e:	4601      	mov	r1, r0
 800b070:	6818      	ldr	r0, [r3, #0]
 800b072:	f7ff bfd2 	b.w	800b01a <_raise_r>
 800b076:	bf00      	nop
 800b078:	200000d8 	.word	0x200000d8

0800b07c <_kill_r>:
 800b07c:	b538      	push	{r3, r4, r5, lr}
 800b07e:	4d07      	ldr	r5, [pc, #28]	@ (800b09c <_kill_r+0x20>)
 800b080:	2300      	movs	r3, #0
 800b082:	4604      	mov	r4, r0
 800b084:	4608      	mov	r0, r1
 800b086:	4611      	mov	r1, r2
 800b088:	602b      	str	r3, [r5, #0]
 800b08a:	f7f6 fdcb 	bl	8001c24 <_kill>
 800b08e:	1c43      	adds	r3, r0, #1
 800b090:	d102      	bne.n	800b098 <_kill_r+0x1c>
 800b092:	682b      	ldr	r3, [r5, #0]
 800b094:	b103      	cbz	r3, 800b098 <_kill_r+0x1c>
 800b096:	6023      	str	r3, [r4, #0]
 800b098:	bd38      	pop	{r3, r4, r5, pc}
 800b09a:	bf00      	nop
 800b09c:	20001724 	.word	0x20001724

0800b0a0 <_getpid_r>:
 800b0a0:	f7f6 bdbe 	b.w	8001c20 <_getpid>

0800b0a4 <atan2>:
 800b0a4:	f000 b824 	b.w	800b0f0 <__ieee754_atan2>

0800b0a8 <sqrtf>:
 800b0a8:	b508      	push	{r3, lr}
 800b0aa:	ed2d 8b02 	vpush	{d8}
 800b0ae:	eeb0 8a40 	vmov.f32	s16, s0
 800b0b2:	f000 f817 	bl	800b0e4 <__ieee754_sqrtf>
 800b0b6:	eeb4 8a48 	vcmp.f32	s16, s16
 800b0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0be:	d60c      	bvs.n	800b0da <sqrtf+0x32>
 800b0c0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b0e0 <sqrtf+0x38>
 800b0c4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0cc:	d505      	bpl.n	800b0da <sqrtf+0x32>
 800b0ce:	f7fc fc2f 	bl	8007930 <__errno>
 800b0d2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b0d6:	2321      	movs	r3, #33	@ 0x21
 800b0d8:	6003      	str	r3, [r0, #0]
 800b0da:	ecbd 8b02 	vpop	{d8}
 800b0de:	bd08      	pop	{r3, pc}
 800b0e0:	00000000 	.word	0x00000000

0800b0e4 <__ieee754_sqrtf>:
 800b0e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b0e8:	4770      	bx	lr
 800b0ea:	0000      	movs	r0, r0
 800b0ec:	0000      	movs	r0, r0
	...

0800b0f0 <__ieee754_atan2>:
 800b0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b0f4:	ec57 6b11 	vmov	r6, r7, d1
 800b0f8:	4273      	negs	r3, r6
 800b0fa:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800b278 <__ieee754_atan2+0x188>
 800b0fe:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b102:	4333      	orrs	r3, r6
 800b104:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b108:	4543      	cmp	r3, r8
 800b10a:	ec51 0b10 	vmov	r0, r1, d0
 800b10e:	4635      	mov	r5, r6
 800b110:	d809      	bhi.n	800b126 <__ieee754_atan2+0x36>
 800b112:	4244      	negs	r4, r0
 800b114:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b118:	4304      	orrs	r4, r0
 800b11a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b11e:	4544      	cmp	r4, r8
 800b120:	468e      	mov	lr, r1
 800b122:	4681      	mov	r9, r0
 800b124:	d907      	bls.n	800b136 <__ieee754_atan2+0x46>
 800b126:	4632      	mov	r2, r6
 800b128:	463b      	mov	r3, r7
 800b12a:	f7f5 f8c7 	bl	80002bc <__adddf3>
 800b12e:	ec41 0b10 	vmov	d0, r0, r1
 800b132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b136:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b13a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b13e:	4334      	orrs	r4, r6
 800b140:	d103      	bne.n	800b14a <__ieee754_atan2+0x5a>
 800b142:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b146:	f000 b89b 	b.w	800b280 <atan>
 800b14a:	17bc      	asrs	r4, r7, #30
 800b14c:	f004 0402 	and.w	r4, r4, #2
 800b150:	ea53 0909 	orrs.w	r9, r3, r9
 800b154:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b158:	d107      	bne.n	800b16a <__ieee754_atan2+0x7a>
 800b15a:	2c02      	cmp	r4, #2
 800b15c:	d05f      	beq.n	800b21e <__ieee754_atan2+0x12e>
 800b15e:	2c03      	cmp	r4, #3
 800b160:	d1e5      	bne.n	800b12e <__ieee754_atan2+0x3e>
 800b162:	a141      	add	r1, pc, #260	@ (adr r1, 800b268 <__ieee754_atan2+0x178>)
 800b164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b168:	e7e1      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b16a:	4315      	orrs	r5, r2
 800b16c:	d106      	bne.n	800b17c <__ieee754_atan2+0x8c>
 800b16e:	f1be 0f00 	cmp.w	lr, #0
 800b172:	da5f      	bge.n	800b234 <__ieee754_atan2+0x144>
 800b174:	a13e      	add	r1, pc, #248	@ (adr r1, 800b270 <__ieee754_atan2+0x180>)
 800b176:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b17a:	e7d8      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b17c:	4542      	cmp	r2, r8
 800b17e:	d10f      	bne.n	800b1a0 <__ieee754_atan2+0xb0>
 800b180:	4293      	cmp	r3, r2
 800b182:	f104 34ff 	add.w	r4, r4, #4294967295
 800b186:	d107      	bne.n	800b198 <__ieee754_atan2+0xa8>
 800b188:	2c02      	cmp	r4, #2
 800b18a:	d84c      	bhi.n	800b226 <__ieee754_atan2+0x136>
 800b18c:	4b34      	ldr	r3, [pc, #208]	@ (800b260 <__ieee754_atan2+0x170>)
 800b18e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b192:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b196:	e7ca      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b198:	2c02      	cmp	r4, #2
 800b19a:	d848      	bhi.n	800b22e <__ieee754_atan2+0x13e>
 800b19c:	4b31      	ldr	r3, [pc, #196]	@ (800b264 <__ieee754_atan2+0x174>)
 800b19e:	e7f6      	b.n	800b18e <__ieee754_atan2+0x9e>
 800b1a0:	4543      	cmp	r3, r8
 800b1a2:	d0e4      	beq.n	800b16e <__ieee754_atan2+0x7e>
 800b1a4:	1a9b      	subs	r3, r3, r2
 800b1a6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800b1aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b1ae:	da1e      	bge.n	800b1ee <__ieee754_atan2+0xfe>
 800b1b0:	2f00      	cmp	r7, #0
 800b1b2:	da01      	bge.n	800b1b8 <__ieee754_atan2+0xc8>
 800b1b4:	323c      	adds	r2, #60	@ 0x3c
 800b1b6:	db1e      	blt.n	800b1f6 <__ieee754_atan2+0x106>
 800b1b8:	4632      	mov	r2, r6
 800b1ba:	463b      	mov	r3, r7
 800b1bc:	f7f5 fb5e 	bl	800087c <__aeabi_ddiv>
 800b1c0:	ec41 0b10 	vmov	d0, r0, r1
 800b1c4:	f000 f9f4 	bl	800b5b0 <fabs>
 800b1c8:	f000 f85a 	bl	800b280 <atan>
 800b1cc:	ec51 0b10 	vmov	r0, r1, d0
 800b1d0:	2c01      	cmp	r4, #1
 800b1d2:	d013      	beq.n	800b1fc <__ieee754_atan2+0x10c>
 800b1d4:	2c02      	cmp	r4, #2
 800b1d6:	d015      	beq.n	800b204 <__ieee754_atan2+0x114>
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	d0a8      	beq.n	800b12e <__ieee754_atan2+0x3e>
 800b1dc:	a318      	add	r3, pc, #96	@ (adr r3, 800b240 <__ieee754_atan2+0x150>)
 800b1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e2:	f7f5 f869 	bl	80002b8 <__aeabi_dsub>
 800b1e6:	a318      	add	r3, pc, #96	@ (adr r3, 800b248 <__ieee754_atan2+0x158>)
 800b1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ec:	e014      	b.n	800b218 <__ieee754_atan2+0x128>
 800b1ee:	a118      	add	r1, pc, #96	@ (adr r1, 800b250 <__ieee754_atan2+0x160>)
 800b1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1f4:	e7ec      	b.n	800b1d0 <__ieee754_atan2+0xe0>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	e7e9      	b.n	800b1d0 <__ieee754_atan2+0xe0>
 800b1fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b200:	4619      	mov	r1, r3
 800b202:	e794      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b204:	a30e      	add	r3, pc, #56	@ (adr r3, 800b240 <__ieee754_atan2+0x150>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	f7f5 f855 	bl	80002b8 <__aeabi_dsub>
 800b20e:	4602      	mov	r2, r0
 800b210:	460b      	mov	r3, r1
 800b212:	a10d      	add	r1, pc, #52	@ (adr r1, 800b248 <__ieee754_atan2+0x158>)
 800b214:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b218:	f7f5 f84e 	bl	80002b8 <__aeabi_dsub>
 800b21c:	e787      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b21e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b248 <__ieee754_atan2+0x158>)
 800b220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b224:	e783      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b226:	a10c      	add	r1, pc, #48	@ (adr r1, 800b258 <__ieee754_atan2+0x168>)
 800b228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b22c:	e77f      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b22e:	2000      	movs	r0, #0
 800b230:	2100      	movs	r1, #0
 800b232:	e77c      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b234:	a106      	add	r1, pc, #24	@ (adr r1, 800b250 <__ieee754_atan2+0x160>)
 800b236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b23a:	e778      	b.n	800b12e <__ieee754_atan2+0x3e>
 800b23c:	f3af 8000 	nop.w
 800b240:	33145c07 	.word	0x33145c07
 800b244:	3ca1a626 	.word	0x3ca1a626
 800b248:	54442d18 	.word	0x54442d18
 800b24c:	400921fb 	.word	0x400921fb
 800b250:	54442d18 	.word	0x54442d18
 800b254:	3ff921fb 	.word	0x3ff921fb
 800b258:	54442d18 	.word	0x54442d18
 800b25c:	3fe921fb 	.word	0x3fe921fb
 800b260:	0800be10 	.word	0x0800be10
 800b264:	0800bdf8 	.word	0x0800bdf8
 800b268:	54442d18 	.word	0x54442d18
 800b26c:	c00921fb 	.word	0xc00921fb
 800b270:	54442d18 	.word	0x54442d18
 800b274:	bff921fb 	.word	0xbff921fb
 800b278:	7ff00000 	.word	0x7ff00000
 800b27c:	00000000 	.word	0x00000000

0800b280 <atan>:
 800b280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	ec55 4b10 	vmov	r4, r5, d0
 800b288:	4bbf      	ldr	r3, [pc, #764]	@ (800b588 <atan+0x308>)
 800b28a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b28e:	429e      	cmp	r6, r3
 800b290:	46ab      	mov	fp, r5
 800b292:	d918      	bls.n	800b2c6 <atan+0x46>
 800b294:	4bbd      	ldr	r3, [pc, #756]	@ (800b58c <atan+0x30c>)
 800b296:	429e      	cmp	r6, r3
 800b298:	d801      	bhi.n	800b29e <atan+0x1e>
 800b29a:	d109      	bne.n	800b2b0 <atan+0x30>
 800b29c:	b144      	cbz	r4, 800b2b0 <atan+0x30>
 800b29e:	4622      	mov	r2, r4
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	4620      	mov	r0, r4
 800b2a4:	4629      	mov	r1, r5
 800b2a6:	f7f5 f809 	bl	80002bc <__adddf3>
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	460d      	mov	r5, r1
 800b2ae:	e006      	b.n	800b2be <atan+0x3e>
 800b2b0:	f1bb 0f00 	cmp.w	fp, #0
 800b2b4:	f340 812b 	ble.w	800b50e <atan+0x28e>
 800b2b8:	a597      	add	r5, pc, #604	@ (adr r5, 800b518 <atan+0x298>)
 800b2ba:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2be:	ec45 4b10 	vmov	d0, r4, r5
 800b2c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2c6:	4bb2      	ldr	r3, [pc, #712]	@ (800b590 <atan+0x310>)
 800b2c8:	429e      	cmp	r6, r3
 800b2ca:	d813      	bhi.n	800b2f4 <atan+0x74>
 800b2cc:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b2d0:	429e      	cmp	r6, r3
 800b2d2:	d80c      	bhi.n	800b2ee <atan+0x6e>
 800b2d4:	a392      	add	r3, pc, #584	@ (adr r3, 800b520 <atan+0x2a0>)
 800b2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2da:	4620      	mov	r0, r4
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7f4 ffed 	bl	80002bc <__adddf3>
 800b2e2:	4bac      	ldr	r3, [pc, #688]	@ (800b594 <atan+0x314>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f7f5 fc2f 	bl	8000b48 <__aeabi_dcmpgt>
 800b2ea:	2800      	cmp	r0, #0
 800b2ec:	d1e7      	bne.n	800b2be <atan+0x3e>
 800b2ee:	f04f 3aff 	mov.w	sl, #4294967295
 800b2f2:	e029      	b.n	800b348 <atan+0xc8>
 800b2f4:	f000 f95c 	bl	800b5b0 <fabs>
 800b2f8:	4ba7      	ldr	r3, [pc, #668]	@ (800b598 <atan+0x318>)
 800b2fa:	429e      	cmp	r6, r3
 800b2fc:	ec55 4b10 	vmov	r4, r5, d0
 800b300:	f200 80bc 	bhi.w	800b47c <atan+0x1fc>
 800b304:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b308:	429e      	cmp	r6, r3
 800b30a:	f200 809e 	bhi.w	800b44a <atan+0x1ca>
 800b30e:	4622      	mov	r2, r4
 800b310:	462b      	mov	r3, r5
 800b312:	4620      	mov	r0, r4
 800b314:	4629      	mov	r1, r5
 800b316:	f7f4 ffd1 	bl	80002bc <__adddf3>
 800b31a:	4b9e      	ldr	r3, [pc, #632]	@ (800b594 <atan+0x314>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	f7f4 ffcb 	bl	80002b8 <__aeabi_dsub>
 800b322:	2200      	movs	r2, #0
 800b324:	4606      	mov	r6, r0
 800b326:	460f      	mov	r7, r1
 800b328:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b32c:	4620      	mov	r0, r4
 800b32e:	4629      	mov	r1, r5
 800b330:	f7f4 ffc4 	bl	80002bc <__adddf3>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4630      	mov	r0, r6
 800b33a:	4639      	mov	r1, r7
 800b33c:	f7f5 fa9e 	bl	800087c <__aeabi_ddiv>
 800b340:	f04f 0a00 	mov.w	sl, #0
 800b344:	4604      	mov	r4, r0
 800b346:	460d      	mov	r5, r1
 800b348:	4622      	mov	r2, r4
 800b34a:	462b      	mov	r3, r5
 800b34c:	4620      	mov	r0, r4
 800b34e:	4629      	mov	r1, r5
 800b350:	f7f5 f96a 	bl	8000628 <__aeabi_dmul>
 800b354:	4602      	mov	r2, r0
 800b356:	460b      	mov	r3, r1
 800b358:	4680      	mov	r8, r0
 800b35a:	4689      	mov	r9, r1
 800b35c:	f7f5 f964 	bl	8000628 <__aeabi_dmul>
 800b360:	a371      	add	r3, pc, #452	@ (adr r3, 800b528 <atan+0x2a8>)
 800b362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	f7f5 f95d 	bl	8000628 <__aeabi_dmul>
 800b36e:	a370      	add	r3, pc, #448	@ (adr r3, 800b530 <atan+0x2b0>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ffa2 	bl	80002bc <__adddf3>
 800b378:	4632      	mov	r2, r6
 800b37a:	463b      	mov	r3, r7
 800b37c:	f7f5 f954 	bl	8000628 <__aeabi_dmul>
 800b380:	a36d      	add	r3, pc, #436	@ (adr r3, 800b538 <atan+0x2b8>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ff99 	bl	80002bc <__adddf3>
 800b38a:	4632      	mov	r2, r6
 800b38c:	463b      	mov	r3, r7
 800b38e:	f7f5 f94b 	bl	8000628 <__aeabi_dmul>
 800b392:	a36b      	add	r3, pc, #428	@ (adr r3, 800b540 <atan+0x2c0>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f4 ff90 	bl	80002bc <__adddf3>
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	f7f5 f942 	bl	8000628 <__aeabi_dmul>
 800b3a4:	a368      	add	r3, pc, #416	@ (adr r3, 800b548 <atan+0x2c8>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ff87 	bl	80002bc <__adddf3>
 800b3ae:	4632      	mov	r2, r6
 800b3b0:	463b      	mov	r3, r7
 800b3b2:	f7f5 f939 	bl	8000628 <__aeabi_dmul>
 800b3b6:	a366      	add	r3, pc, #408	@ (adr r3, 800b550 <atan+0x2d0>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f4 ff7e 	bl	80002bc <__adddf3>
 800b3c0:	4642      	mov	r2, r8
 800b3c2:	464b      	mov	r3, r9
 800b3c4:	f7f5 f930 	bl	8000628 <__aeabi_dmul>
 800b3c8:	a363      	add	r3, pc, #396	@ (adr r3, 800b558 <atan+0x2d8>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	4680      	mov	r8, r0
 800b3d0:	4689      	mov	r9, r1
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	f7f5 f927 	bl	8000628 <__aeabi_dmul>
 800b3da:	a361      	add	r3, pc, #388	@ (adr r3, 800b560 <atan+0x2e0>)
 800b3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e0:	f7f4 ff6a 	bl	80002b8 <__aeabi_dsub>
 800b3e4:	4632      	mov	r2, r6
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	f7f5 f91e 	bl	8000628 <__aeabi_dmul>
 800b3ec:	a35e      	add	r3, pc, #376	@ (adr r3, 800b568 <atan+0x2e8>)
 800b3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f2:	f7f4 ff61 	bl	80002b8 <__aeabi_dsub>
 800b3f6:	4632      	mov	r2, r6
 800b3f8:	463b      	mov	r3, r7
 800b3fa:	f7f5 f915 	bl	8000628 <__aeabi_dmul>
 800b3fe:	a35c      	add	r3, pc, #368	@ (adr r3, 800b570 <atan+0x2f0>)
 800b400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b404:	f7f4 ff58 	bl	80002b8 <__aeabi_dsub>
 800b408:	4632      	mov	r2, r6
 800b40a:	463b      	mov	r3, r7
 800b40c:	f7f5 f90c 	bl	8000628 <__aeabi_dmul>
 800b410:	a359      	add	r3, pc, #356	@ (adr r3, 800b578 <atan+0x2f8>)
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 ff4f 	bl	80002b8 <__aeabi_dsub>
 800b41a:	4632      	mov	r2, r6
 800b41c:	463b      	mov	r3, r7
 800b41e:	f7f5 f903 	bl	8000628 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	4640      	mov	r0, r8
 800b428:	4649      	mov	r1, r9
 800b42a:	f7f4 ff47 	bl	80002bc <__adddf3>
 800b42e:	4622      	mov	r2, r4
 800b430:	462b      	mov	r3, r5
 800b432:	f7f5 f8f9 	bl	8000628 <__aeabi_dmul>
 800b436:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b43a:	4602      	mov	r2, r0
 800b43c:	460b      	mov	r3, r1
 800b43e:	d148      	bne.n	800b4d2 <atan+0x252>
 800b440:	4620      	mov	r0, r4
 800b442:	4629      	mov	r1, r5
 800b444:	f7f4 ff38 	bl	80002b8 <__aeabi_dsub>
 800b448:	e72f      	b.n	800b2aa <atan+0x2a>
 800b44a:	4b52      	ldr	r3, [pc, #328]	@ (800b594 <atan+0x314>)
 800b44c:	2200      	movs	r2, #0
 800b44e:	4620      	mov	r0, r4
 800b450:	4629      	mov	r1, r5
 800b452:	f7f4 ff31 	bl	80002b8 <__aeabi_dsub>
 800b456:	4b4f      	ldr	r3, [pc, #316]	@ (800b594 <atan+0x314>)
 800b458:	4606      	mov	r6, r0
 800b45a:	460f      	mov	r7, r1
 800b45c:	2200      	movs	r2, #0
 800b45e:	4620      	mov	r0, r4
 800b460:	4629      	mov	r1, r5
 800b462:	f7f4 ff2b 	bl	80002bc <__adddf3>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	4630      	mov	r0, r6
 800b46c:	4639      	mov	r1, r7
 800b46e:	f7f5 fa05 	bl	800087c <__aeabi_ddiv>
 800b472:	f04f 0a01 	mov.w	sl, #1
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	e765      	b.n	800b348 <atan+0xc8>
 800b47c:	4b47      	ldr	r3, [pc, #284]	@ (800b59c <atan+0x31c>)
 800b47e:	429e      	cmp	r6, r3
 800b480:	d21c      	bcs.n	800b4bc <atan+0x23c>
 800b482:	4b47      	ldr	r3, [pc, #284]	@ (800b5a0 <atan+0x320>)
 800b484:	2200      	movs	r2, #0
 800b486:	4620      	mov	r0, r4
 800b488:	4629      	mov	r1, r5
 800b48a:	f7f4 ff15 	bl	80002b8 <__aeabi_dsub>
 800b48e:	4b44      	ldr	r3, [pc, #272]	@ (800b5a0 <atan+0x320>)
 800b490:	4606      	mov	r6, r0
 800b492:	460f      	mov	r7, r1
 800b494:	2200      	movs	r2, #0
 800b496:	4620      	mov	r0, r4
 800b498:	4629      	mov	r1, r5
 800b49a:	f7f5 f8c5 	bl	8000628 <__aeabi_dmul>
 800b49e:	4b3d      	ldr	r3, [pc, #244]	@ (800b594 <atan+0x314>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f7f4 ff0b 	bl	80002bc <__adddf3>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	4639      	mov	r1, r7
 800b4ae:	f7f5 f9e5 	bl	800087c <__aeabi_ddiv>
 800b4b2:	f04f 0a02 	mov.w	sl, #2
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	460d      	mov	r5, r1
 800b4ba:	e745      	b.n	800b348 <atan+0xc8>
 800b4bc:	4622      	mov	r2, r4
 800b4be:	462b      	mov	r3, r5
 800b4c0:	4938      	ldr	r1, [pc, #224]	@ (800b5a4 <atan+0x324>)
 800b4c2:	2000      	movs	r0, #0
 800b4c4:	f7f5 f9da 	bl	800087c <__aeabi_ddiv>
 800b4c8:	f04f 0a03 	mov.w	sl, #3
 800b4cc:	4604      	mov	r4, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	e73a      	b.n	800b348 <atan+0xc8>
 800b4d2:	4b35      	ldr	r3, [pc, #212]	@ (800b5a8 <atan+0x328>)
 800b4d4:	4e35      	ldr	r6, [pc, #212]	@ (800b5ac <atan+0x32c>)
 800b4d6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4de:	f7f4 feeb 	bl	80002b8 <__aeabi_dsub>
 800b4e2:	4622      	mov	r2, r4
 800b4e4:	462b      	mov	r3, r5
 800b4e6:	f7f4 fee7 	bl	80002b8 <__aeabi_dsub>
 800b4ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b4f6:	f7f4 fedf 	bl	80002b8 <__aeabi_dsub>
 800b4fa:	f1bb 0f00 	cmp.w	fp, #0
 800b4fe:	4604      	mov	r4, r0
 800b500:	460d      	mov	r5, r1
 800b502:	f6bf aedc 	bge.w	800b2be <atan+0x3e>
 800b506:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b50a:	461d      	mov	r5, r3
 800b50c:	e6d7      	b.n	800b2be <atan+0x3e>
 800b50e:	a51c      	add	r5, pc, #112	@ (adr r5, 800b580 <atan+0x300>)
 800b510:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b514:	e6d3      	b.n	800b2be <atan+0x3e>
 800b516:	bf00      	nop
 800b518:	54442d18 	.word	0x54442d18
 800b51c:	3ff921fb 	.word	0x3ff921fb
 800b520:	8800759c 	.word	0x8800759c
 800b524:	7e37e43c 	.word	0x7e37e43c
 800b528:	e322da11 	.word	0xe322da11
 800b52c:	3f90ad3a 	.word	0x3f90ad3a
 800b530:	24760deb 	.word	0x24760deb
 800b534:	3fa97b4b 	.word	0x3fa97b4b
 800b538:	a0d03d51 	.word	0xa0d03d51
 800b53c:	3fb10d66 	.word	0x3fb10d66
 800b540:	c54c206e 	.word	0xc54c206e
 800b544:	3fb745cd 	.word	0x3fb745cd
 800b548:	920083ff 	.word	0x920083ff
 800b54c:	3fc24924 	.word	0x3fc24924
 800b550:	5555550d 	.word	0x5555550d
 800b554:	3fd55555 	.word	0x3fd55555
 800b558:	2c6a6c2f 	.word	0x2c6a6c2f
 800b55c:	bfa2b444 	.word	0xbfa2b444
 800b560:	52defd9a 	.word	0x52defd9a
 800b564:	3fadde2d 	.word	0x3fadde2d
 800b568:	af749a6d 	.word	0xaf749a6d
 800b56c:	3fb3b0f2 	.word	0x3fb3b0f2
 800b570:	fe231671 	.word	0xfe231671
 800b574:	3fbc71c6 	.word	0x3fbc71c6
 800b578:	9998ebc4 	.word	0x9998ebc4
 800b57c:	3fc99999 	.word	0x3fc99999
 800b580:	54442d18 	.word	0x54442d18
 800b584:	bff921fb 	.word	0xbff921fb
 800b588:	440fffff 	.word	0x440fffff
 800b58c:	7ff00000 	.word	0x7ff00000
 800b590:	3fdbffff 	.word	0x3fdbffff
 800b594:	3ff00000 	.word	0x3ff00000
 800b598:	3ff2ffff 	.word	0x3ff2ffff
 800b59c:	40038000 	.word	0x40038000
 800b5a0:	3ff80000 	.word	0x3ff80000
 800b5a4:	bff00000 	.word	0xbff00000
 800b5a8:	0800be28 	.word	0x0800be28
 800b5ac:	0800be48 	.word	0x0800be48

0800b5b0 <fabs>:
 800b5b0:	ec51 0b10 	vmov	r0, r1, d0
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b5ba:	ec43 2b10 	vmov	d0, r2, r3
 800b5be:	4770      	bx	lr

0800b5c0 <_init>:
 800b5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c2:	bf00      	nop
 800b5c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c6:	bc08      	pop	{r3}
 800b5c8:	469e      	mov	lr, r3
 800b5ca:	4770      	bx	lr

0800b5cc <_fini>:
 800b5cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ce:	bf00      	nop
 800b5d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5d2:	bc08      	pop	{r3}
 800b5d4:	469e      	mov	lr, r3
 800b5d6:	4770      	bx	lr
